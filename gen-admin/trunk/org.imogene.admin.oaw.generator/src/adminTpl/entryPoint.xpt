«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR Project»
«FILE projectName.toLowerCase()+"/client/Admin"+projectName.toFirstUpper() + "EntryPoint.java"»
package org.imogene.«projectName.toLowerCase()».client;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;

import org.imogene.web.gwt.client.LocalSession;
import org.imogene.web.gwt.client.ui.menu.MenuList;
import org.imogene.web.gwt.client.ui.menu.MenuListEntity;
import org.imogene.web.gwt.client.ui.panel.BottomBannerPanel;
import org.imogene.web.gwt.client.ui.panel.LoginPanel;
import org.imogene.web.gwt.client.ui.panel.MainContentPanel;
import org.imogene.web.gwt.client.ui.panel.RoundedWrapperPanel;
import org.imogene.web.gwt.client.ui.panel.TopBannerPanel;
import org.imogene.web.gwt.client.ui.panel.LoginPanel.AuthenticationListener;
import org.imogene.web.gwt.common.entity.ImogActor;
import org.imogene.web.gwt.remote.AuthenticationServiceAsyncFacade;
import org.imogene.web.gwt.remote.callback.EmptyCallback;

import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Admin«projectName.toFirstUpper()»EntryPoint implements EntryPoint, ValueChangeHandler<String>, AuthenticationListener {
	
	private MainContentPanel content;
	private LoginPanel loginC;
	private TopBannerPanel bc;
	private HandlerRegistration registration;
	
	
	/**
	 * The message displayed to the user when the server cannot be reached or
	 * returns an error.
	 */
	@SuppressWarnings("unused")
	private static final String SERVER_ERROR = "An error occurred while "
			+ "attempting to contact the server. Please check your network "
			+ "connection and try again.";

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {		
		displayLogin();
	}
	
	public void displayLogin(){
		loginC = new LoginPanel(GWT.getModuleBaseURL()+ "/images/logo_admin.png");
		«FOREACH languages AS l-»
			loginC.addLanguage("«l.name.toFirstUpper()»", "«l.isoCode»");
		«ENDFOREACH»
		loginC.setAuthenticationListener(this);		
		RootPanel.get("topBanner").clear();
		RootPanel.get("contentContainer").clear();
		RootPanel.get("topBanner").add(loginC);
		RootPanel.get("bottomBanner").clear();
	}
	
	public void displayApplication(ImogActor actor){
		registration = History.addValueChangeHandler(this);
		RootPanel.get("topBanner").clear();
		bc = new TopBannerPanel(GWT.getModuleBaseURL()+ "/images/logo_admin.png");
		bc.setActor(actor);
		RootPanel.get("topBanner").add(bc);
		content = new MainContentPanel();	
		//content.setContent(new RoundedWrapperPanel("First screen", new Label("content"), "welcome"));
		populateMenu(content);
		RootPanel.get("contentContainer").add(content);	
		RootPanel.get("bottomBanner").add(new BottomBannerPanel());
		History.fireCurrentHistoryState();
	}

	@Override
	public void onValueChange(ValueChangeEvent<String> event) {
	
		String token = event.getValue();
		if(token.equals("")){		
		«LET getFirstActorName(this.entities) AS actorName  -» 
		History.newItem("list/«actorName.toLowerCase()»");	
		«ENDLET-»
		}		
		else if(token.equals("logout")){
			
			/* clean local data */
			LocalSession.get().setCurrentUser(null);
			displayLogin();
			bc = null;
			content = null;
			registration.removeHandler();
			
			History.newItem("");
			
			/* disconnect from the server */
			AuthenticationServiceAsyncFacade.getInstance().disconnect(
					new EmptyCallback<Void>());

			//History.addValueChangeHandler(this);
			return;
		}
		else if(token.equals("back")){			
			History.back();			
			History.back();	
			return;
		}
		
		if (!token.equals("") && content!=null) {
			Widget tokenView = TokenHandler.getViewForToken(token);
			if (tokenView != null)
				content.setContent(tokenView);
		}	
	}

	@Override
	public void authenticated(ImogActor actor) {
	    LocalSession.get().setCurrentUser(actor);
		displayApplication(actor);	
		if (loginC != null) {
			loginC.removeAuthenticationListener();
			loginC = null;
		}
	}
	
	public void populateMenu(MainContentPanel mc){
		MenuList menu = mc.getMenuList();
		MenuListEntity menuListEntity = new MenuListEntity();
		
		«EXPAND specificMenuItem FOR this -»
		«FOREACH entities AS e -»
			«IF Actor.isAssignableFrom(e.metaType)-»			
		menuListEntity.addItem(NLS.constants().«e.name.toFirstLower()»_title(), "list/«e.name.toLowerCase()»", "«e.name.toLowerCase()»");
			«ENDIF-»
		«ENDFOREACH -»	
		menuListEntity.addItem("Notifications", "list/notif", "notif");	
		
		menu.addItem(menuListEntity);
	}
	
	
		
}
«ENDFILE-»
«ENDDEFINE»

«REM»
	specific part AOP hook for menu item«ENDREM»
«DEFINE specificMenuItem FOR Project»«ENDDEFINE»



