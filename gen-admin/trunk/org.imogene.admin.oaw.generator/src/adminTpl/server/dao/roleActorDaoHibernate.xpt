«IMPORT core»
«DEFINE generate(String packageName, String projectName) FOR Project»
«FILE projectName.toLowerCase() + "/server/dao/hibernate/RoleActorDaoImpl.java"»
package org.imogene.«projectName.toLowerCase()».server.dao.hibernate;

import java.util.List;
import java.util.Vector;

import org.apache.log4j.Logger;
import org.hibernate.criterion.DetachedCriteria;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

«FOREACH entities AS e-»
«IF Actor.isAssignableFrom(e.metaType)-»
import org.imogene.«projectName.toLowerCase()».client.entity.«e.name.toFirstUpper()»;
«ENDIF-»
«ENDFOREACH»

import org.imogene.«projectName.toLowerCase()».server.dao.RoleActorDao;
import org.imogene.web.gwt.common.entity.DefaultActor;
import org.imogene.web.gwt.common.entity.ImogActor;
import org.imogene.web.gwt.common.entity.ImogRole;
import org.imogene.web.gwt.common.entity.RoleBeanImpl;

public class RoleActorDaoImpl extends HibernateDaoSupport implements RoleActorDao {

	private Logger logger = Logger.getLogger("org.imogene.«projectName.toLowerCase()».dao.hibernate");
	
	@Override
	public ImogActor getActor(String actorId) {
		ImogActor actor = null;

		«FOREACH entities AS e -»
		«IF Actor.isAssignableFrom(e.metaType)-»
		/* «e.name.toFirstUpper()» */
		try {
			actor = (ImogActor) getHibernateTemplate().load(«e.name.toFirstUpper()».class, actorId);
			if (actor != null)
				return actor;
		} catch (Exception ex) {
			logger.warn(ex.getMessage());
		}
		«ENDIF-»
		«ENDFOREACH -»				

		/* default actor*/
		try {
			actor = (ImogActor) getHibernateTemplate().load(DefaultActor.class, actorId);
			if (actor != null)
				return actor;
		} catch (Exception ex) {
			logger.warn(ex.getMessage());
		}
		return null;		
	}

	@Override
	public ImogRole getRole(String id) {		
		return (ImogRole)getHibernateTemplate().load(RoleBeanImpl.class, id);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ImogActor> listActors() {
		List<ImogActor> actors = new Vector<ImogActor>();
		«FOREACH entities AS e -»
		«IF Actor.isAssignableFrom(e.metaType)-»
		/* «e.name.toFirstUpper()» */
		DetachedCriteria dc«e.name.toFirstUpper()» = DetachedCriteria.forClass(«e.name.toFirstUpper()».class);
		actors.addAll(getHibernateTemplate().findByCriteria(dc«e.name.toFirstUpper()»));
		«ENDIF»
		«ENDFOREACH -»		
		/* default actor */
		DetachedCriteria dcDefault = DetachedCriteria.forClass(DefaultActor.class);
		actors.addAll(getHibernateTemplate().findByCriteria(dcDefault));		
		return actors;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ImogRole> listRoles() {
		DetachedCriteria dc = DetachedCriteria.forClass(RoleBeanImpl.class);
		return getHibernateTemplate().findByCriteria(dc);		
	}
	
}
«ENDFILE»
«ENDDEFINE»