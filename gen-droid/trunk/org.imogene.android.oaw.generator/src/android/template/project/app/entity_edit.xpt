«IMPORT core»
«EXTENSION template::CommonFieldUtilExt»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(String projectName) FOR CardEntity»
«FILE "/" + projectName.toLowerCase() + "/app/" + name.toFirstUpper() + "Edit.java"»
package org.imogene.android.«projectName.toLowerCase()-».app;

import java.util.ArrayList;
import java.util.HashMap;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import org.imogene.android.Constants.Extras;
import org.imogene.android.app.AbstractEntityEdit;
import org.imogene.android.widget.ScrollingTabHost;
import org.imogene.android.widget.field.FieldManager;
import org.imogene.android.widget.field.FieldManager.RelationManager;
import org.imogene.android.widget.field.edit.BarcodeFieldEdit;
import org.imogene.android.widget.field.edit.BinaryFieldEdit;
import org.imogene.android.widget.field.edit.BooleanFieldEdit;
import org.imogene.android.widget.field.edit.DateFieldEdit;
import org.imogene.android.widget.field.edit.DateTimeFieldEdit;
import org.imogene.android.widget.field.edit.EnumMultipleFieldEdit;
import org.imogene.android.widget.field.edit.EnumSingleFieldEdit;
import org.imogene.android.widget.field.edit.FloatFieldEdit;
import org.imogene.android.widget.field.edit.GeoFieldEdit;
import org.imogene.android.widget.field.edit.IntegerFieldEdit;
import org.imogene.android.widget.field.edit.RelationManyFieldEdit;
import org.imogene.android.widget.field.edit.RelationOneFieldEdit;
import org.imogene.android.widget.field.edit.TextFieldEdit;
import org.imogene.android.widget.field.edit.TimeFieldEdit;
import org.imogene.android.«projectName.toLowerCase()».R;
import org.imogene.android.«projectName.toLowerCase()».entities.«name.toFirstUpper()-»;
«EXPAND android::template::EntityUtil::organizeEntityImport(projectName) FOREACH groups.fields-»
import org.imogene.android.«projectName.toLowerCase()».roles.«name.toFirstUpper()»Roles;

public class «name.toFirstUpper()-»Edit extends AbstractEntityEdit implements RelationManager {

	private FieldManager mManager;
	
	«FOREACH groups.fields AS f-»
	private «EXPAND android::template::EditorsUtil::nameEditField FOR f» «f.name.toFirstLower()»;
	«ENDFOREACH»
	
	private «name.toFirstUpper()-» mEntity;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		if (Intent.ACTION_INSERT.equals(getIntent().getAction())) {
			if (getIntent().hasExtra(Extras.EXTRA_ENTITY))
				mEntity = new «name.toFirstUpper()»(getIntent().getBundleExtra(Extras.EXTRA_ENTITY));
			else
				mEntity = new «name.toFirstUpper()»();
		} else {
			mEntity = new «name.toFirstUpper()»(this, getIntent().getData());
		}
		
		mManager = new FieldManager(this, this, 100);
		
		ScrollingTabHost tabHost = getTabHost();

		LayoutInflater.from(this).inflate(R.layout.«name.toLowerCase()»_edit, tabHost.getTabContentView(), true);
		
		«FOREACH groups.fields AS f-»
			«f.name.toFirstLower()» = («EXPAND android::template::EditorsUtil::nameEditField FOR f») findViewById(R.id.«f.shortName.toLowerCase()»);
		«ENDFOREACH-»
	
		«FOREACH groups.fields AS f-»
			«f.name.toFirstLower()».onAttachedToHierarchy(mManager);
			«f.name.toFirstLower()».setValue(mEntity.get«f.name.toFirstUpper()»());
			«EXPAND android::template::EditorsUtil::specificInit FOR f-»
			«EXPAND android::template::EditorsUtil::dependency FOREACH f.fieldDependentVisibility-»
		«ENDFOREACH»
		
		«EXPAND newTabSpec(this) FOREACH groups-»
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		mManager.dispatchActivityResult(requestCode, resultCode, data);
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		mManager.dispatchActivityDestroy();
	}

	@Override
	protected ArrayList<HashMap<String, String>> getErrors() {
		ArrayList<HashMap<String, String>> result = new ArrayList<HashMap<String,String>>();
		«FOREACH groups.fields AS f-»
		if (!«f.name.toFirstLower()».isValid()) {
			HashMap<String, String> map = new HashMap<String, String>();
			map.put(ER_TAG, "«f.parentGroup.shortName.toLowerCase()-»");
			map.put(ER_LAY, String.valueOf(R.id.«f.shortName.toLowerCase()-»));
			map.put(ER_DES, getString(R.string.«f.shortName.toLowerCase()-»));
			map.put(ER_MSG, «f.name.toFirstLower()».getErrorMessage());
			result.add(map);
		}
		«ENDFOREACH-»
		return result;
	}
	
	private boolean check() {
		«FOREACH groups.fields AS f-»
		if (!«f.name.toFirstLower()».isValid())
			return false;
		«ENDFOREACH-»
		return true;
	}
	
	@Override
	protected void save(boolean temporary) {
		if (temporary) {
			collect();
			mEntity.commit(this, true, true);
			return;
		}
		if (check()) {
			collect();
			Uri uri = mEntity.commit(this, true, false);
			if (uri != null) {
				setResult(RESULT_OK, new Intent().setData(uri));
				forceFinish();
			} else {
				setResult(RESULT_CANCELED);
				forceFinish();
			}
		} else {
			showErrorDialog();
		}
	}
	
	private void collect() {
		«FOREACH groups.fields AS f-»
		mEntity.set«f.name.toFirstUpper()»(«f.name.toFirstLower()».getValue());
		«ENDFOREACH-»
	}
	
	public String getCurrentId() {
		if (mEntity.getId() == null)
			save(true);
		return mEntity.getId();
	}
	
	public long getCurrentRowId() {
		if (mEntity.getRowId() == -1)
			save(true);
		return mEntity.getRowId();
	}
	
	public Uri getCurrentContentUri() {
		return «name.toFirstUpper()».CONTENT_URI;
	}
	
}
«ENDFILE»
«ENDDEFINE»



«DEFINE newTabSpec(CardEntity card) FOR FieldGroup»
if («card.name.toFirstUpper()-»Roles.canRead«name.toFirstUpper()-»(this) ||
	«card.name.toFirstUpper()-»Roles.canWrite«name.toFirstUpper()-»(this)) {
	tabHost.addTab(tabHost.newTabSpec("«shortName.toLowerCase()-»")
	«IF icon != null && icon.length > 0-»
	.setIndicator(getString(R.string.«shortName.toLowerCase()-»), getResources().getDrawable(R.drawable.«icon.split("\\.").get(0).toLowerCase()»))
	«ELSE-»
	.setIndicator(getString(R.string.«shortName.toLowerCase()-»))
	«ENDIF-»
	.setContent(R.id.«shortName.toLowerCase()-»));

	if (!«card.name.toFirstUpper()-»Roles.canWrite«name.toFirstUpper()-»(this)) {
		«FOREACH fields AS f-»
		«f.name.toFirstLower()».setReadOnly(true);
		«ENDFOREACH-»
	}
} else {
	findViewById(R.id.«shortName.toLowerCase()-»).setVisibility(View.GONE);
}
«ENDDEFINE»