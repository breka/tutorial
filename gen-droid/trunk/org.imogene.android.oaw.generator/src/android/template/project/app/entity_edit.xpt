«IMPORT core»
«EXTENSION template::CommonFieldUtilExt»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(String projectName) FOR CardEntity»
«FILE "/" + projectName.toLowerCase() + "/app/" + name.toFirstUpper() + "Edit.java"»
package org.imogene.android.«projectName.toLowerCase()-».app;

import java.util.ArrayList;
import java.util.HashMap;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.ActivityNotFoundException;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.SimpleAdapter;
import android.widget.Toast;

import org.imogene.android.Constants.Editor;
import org.imogene.android.Constants.Extras;
import org.imogene.android.app.ViewPagerIndicatorActivity;
import org.imogene.android.util.IamLost;
import org.imogene.android.util.content.IntentUtils;
import org.imogene.android.util.database.DatabaseUtils;
import org.imogene.android.util.dialog.DialogFactory;
import org.imogene.android.widget.EntityPagerAdapter;
import org.imogene.android.widget.field.FieldManager;
import org.imogene.android.widget.field.FieldManager.RelationManager;
import org.imogene.android.widget.field.edit.BarcodeFieldEdit;
import org.imogene.android.widget.field.edit.BinaryFieldEdit;
import org.imogene.android.widget.field.edit.BooleanFieldEdit;
import org.imogene.android.widget.field.edit.DateFieldEdit;
import org.imogene.android.widget.field.edit.DateTimeFieldEdit;
import org.imogene.android.widget.field.edit.EnumMultipleFieldEdit;
import org.imogene.android.widget.field.edit.EnumSingleFieldEdit;
import org.imogene.android.widget.field.edit.FloatFieldEdit;
import org.imogene.android.widget.field.edit.GeoFieldEdit;
import org.imogene.android.widget.field.edit.IntegerFieldEdit;
import org.imogene.android.widget.field.edit.LocalizedTextFieldEdit;
import org.imogene.android.widget.field.edit.RelationManyFieldEdit;
import org.imogene.android.widget.field.edit.RelationOneFieldEdit;
import org.imogene.android.widget.field.edit.TextFieldEdit;
import org.imogene.android.widget.field.edit.TimeFieldEdit;
import org.imogene.android.«projectName.toLowerCase()».R;
import org.imogene.android.«projectName.toLowerCase()».entities.«name.toFirstUpper()-»;
import org.imogene.android.«projectName.toLowerCase()».notification.«projectName.toFirstUpper()»Notification;
«EXPAND android::template::EntityUtil::organizeEntityImport(projectName) FOREACH groups.fields-»
import org.imogene.android.«projectName.toLowerCase()».roles.«name.toFirstUpper()»Roles;

public class «name.toFirstUpper()-»Edit extends ViewPagerIndicatorActivity implements OnClickListener,RelationManager {

	private static final int DIALOG_UNSAVED_ID = 1;
	private static final int DIALOG_ERROR_ID = 2;
	private static final int DIALOG_IAMLOST_ID = 3;
	
	private final ArrayList<HashMap<String, Object>> mErrors = new ArrayList<HashMap<String, Object>>();
	private SimpleAdapter mAdapter;
	
	private FieldManager mManager;
	
	«FOREACH groups.fields AS f-»
	private «EXPAND android::template::EditorsUtil::nameEditField FOR f» «f.name.toFirstLower()»;
	«ENDFOREACH»
	
	private «name.toFirstUpper()-» mEntity;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.view_pager);
		
		if (!Intent.ACTION_INSERT.equals(getIntent().getAction()))
			DatabaseUtils.markAs(getContentResolver(), getIntent().getData(), false);
		IamLost.getInstance().add(getTitle().toString());
		
		«projectName.toFirstUpper()»Notification.cancel«name.toFirstUpper()»Notification(this);
		
		if (Intent.ACTION_INSERT.equals(getIntent().getAction())) {
			if (getIntent().hasExtra(Extras.EXTRA_ENTITY))
				mEntity = new «name.toFirstUpper()»(getIntent().getBundleExtra(Extras.EXTRA_ENTITY));
			else
				mEntity = new «name.toFirstUpper()»();
		} else {
			mEntity = new «name.toFirstUpper()»(this, getIntent().getData());
		}
		
		mManager = new FieldManager(this, this, 100);
		
		LayoutInflater.from(this).inflate(R.layout.«name.toLowerCase()»_edit, getViewPager(), true);
		
		«FOREACH groups.fields AS f-»
			«f.name.toFirstLower()» = («EXPAND android::template::EditorsUtil::nameEditField FOR f») findViewById(R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR f»);
		«ENDFOREACH-»
	
		«FOREACH groups.fields AS f-»
			«EXPAND android::template::EditorsUtil::specificInit FOR f-»
			«f.name.toFirstLower()».onAttachedToHierarchy(mManager);
			«EXPAND android::template::EditorsUtil::dependency FOREACH f.fieldDependentVisibility-»
			«f.name.toFirstLower()».setValue(mEntity.get«f.name.toFirstUpper()»());
		«ENDFOREACH»
		
		EntityPagerAdapter adapter = new EntityPagerAdapter();
		
		«FOREACH groups AS group»
		if («name.toFirstUpper()-»Roles.canRead«group.name.toFirstUpper()-»(this) ||
			«name.toFirstUpper()-»Roles.canWrite«group.name.toFirstUpper()-»(this)) {
			adapter.addPage(R.string.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR group», R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR group»);

			if (!«name.toFirstUpper()-»Roles.canWrite«group.name.toFirstUpper()-»(this)) {
				«FOREACH group.fields AS f-»
				«f.name.toFirstLower()».setReadOnly(true);
				«ENDFOREACH-»
			}
		}
		«ENDFOREACH»
		
		getViewPager().setAdapter(adapter);
		getViewPagerIndicator().init(0, adapter.getCount(), adapter);
	}
	
	@Override
	public final void startActivity(Intent intent) {
		try {
			super.startActivity(intent);
		} catch (ActivityNotFoundException e) {
			IntentUtils.treatException(e, this, intent);
		}
	}
	
	@Override
	public final void startActivityForResult(Intent intent, int requestCode) {
		try {
			super.startActivityForResult(intent, requestCode);
		} catch (ActivityNotFoundException e) {
			IntentUtils.treatException(e, this, intent);
		}
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		mManager.dispatchActivityResult(requestCode, resultCode, data);
	}
	
	private void forceFinish() {
		super.finish();
	}

	@Override
	public void finish() {
		showDialog(DIALOG_UNSAVED_ID);
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		IamLost.getInstance().remove();
		mManager.dispatchActivityDestroy();
	}
	
	@Override
	public boolean onCreateActionBarMenu(Menu menu) {
		boolean result = super.onCreateActionBarMenu(menu);
		getMenuInflater().inflate(R.menu.actionbar_save_item, menu);
		return result;
	}
	
	@Override
	public boolean onActionBarItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_save :
			save(false);
			return true;
		default:
			return super.onActionBarItemSelected(item);
		}
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		boolean result = super.onCreateOptionsMenu(menu);
		getMenuInflater().inflate(R.menu.menu_iamlost_item, menu);
		return result;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
			case R.id.menu_iamlost :
				showDialog(DIALOG_IAMLOST_ID);
				return true;
			default :
				return super.onOptionsItemSelected(item);
		}
	}
	
	@Override
	protected Dialog onCreateDialog(int id) {
		switch (id) {
			case DIALOG_UNSAVED_ID :
				return new AlertDialog.Builder(this)
				.setTitle(android.R.string.dialog_alert_title)
				.setIcon(android.R.drawable.ic_dialog_alert)
				.setMessage(R.string.unsaved_dialog_msg)
				.setPositiveButton(android.R.string.yes, this)
				.setNegativeButton(R.string.no, this)
				.setNeutralButton(android.R.string.cancel, null)
				.setCancelable(false)
				.create();
			case DIALOG_ERROR_ID :
				return new AlertDialog.Builder(this)
				.setTitle(android.R.string.dialog_alert_title)
				.setIcon(android.R.drawable.ic_dialog_alert)
				.setAdapter(mAdapter =
					new SimpleAdapter(this, mErrors, R.layout.dialog_list_item,
						new String[] { Editor.ERROR_DESC, Editor.ERROR_MSG }, new int[] {
							R.id.dialog_item_title,
							R.id.dialog_item_message }), this)
				.setPositiveButton(android.R.string.ok, this)
				.setCancelable(false)
				.create();
			case DIALOG_IAMLOST_ID :
				return DialogFactory.createIamLostDialog(this);
			default :
				return super.onCreateDialog(id);
		}
	}
	
	@Override
	protected void onPrepareDialog(int id, Dialog dialog) {
		super.onPrepareDialog(id, dialog);
		switch(id) {
		case DIALOG_ERROR_ID:
			if (mAdapter != null) {
				mErrors.clear();
				getErrors(mErrors);
				mAdapter.notifyDataSetChanged();
			}
			break;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void onClick(DialogInterface dialog, int which) {
		switch (which) {
		case Dialog.BUTTON_POSITIVE:
			save(false);
			break;
		case Dialog.BUTTON_NEGATIVE:
			forceFinish();
			break;
		default:
			if (which >= 0) {
				HashMap<String, Object> map = (HashMap<String, Object>) mAdapter.getItem(which);
				getViewPager().setCurrentItem(((EntityPagerAdapter) getViewPager().getAdapter()).getViewPosition((Integer) map.get(Editor.ERROR_TAG)));
				findViewById((Integer) map.get(Editor.ERROR_LAYOUT)).requestFocusFromTouch();
			}
			break;
		}
	}
	
	private ArrayList<HashMap<String, Object>> getErrors(ArrayList<HashMap<String, Object>> errors) {
		ArrayList<HashMap<String, Object>> result = errors != null ? errors : new ArrayList<HashMap<String, Object>>();
		«FOREACH groups.fields AS f-»
		if (!«f.name.toFirstLower()».isValid()) {
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put(Editor.ERROR_TAG, R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR f.parentGroup»);
			map.put(Editor.ERROR_LAYOUT, R.id.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR f»);
			map.put(Editor.ERROR_DESC, getString(R.string.«EXPAND android::template::MedooAndroidFieldUtil::resourceName FOR f»));
			map.put(Editor.ERROR_MSG, «f.name.toFirstLower()».getErrorMessage());
			result.add(map);
		}
		«ENDFOREACH-»
		return result;
	}
	
	private boolean check() {
		«FOREACH groups.fields AS f-»
		if (!«f.name.toFirstLower()».isValid())
			return false;
		«ENDFOREACH-»
		return true;
	}
	
	private void save(boolean temporary) {
		if (temporary) {
			collect();
			mEntity.commit(this, true, true);
			return;
		}
		if (check()) {
			collect();
			Uri uri = mEntity.commit(this, true, false);
			if (uri != null) {
				Toast.makeText(this, R.string.«name.toLowerCase()»_des_registered, Toast.LENGTH_SHORT).show();
				setResult(RESULT_OK, new Intent().setData(uri));
				forceFinish();
			} else {
				setResult(RESULT_CANCELED);
				forceFinish();
			}
		} else {
			showDialog(DIALOG_ERROR_ID);
		}
	}
	
	private void collect() {
		«FOREACH groups.fields AS f-»
		mEntity.set«f.name.toFirstUpper()»(«f.name.toFirstLower()».getValue());
		«ENDFOREACH-»
	}
	
	public String getCurrentId() {
		if (mEntity.getId() == null)
			save(true);
		return mEntity.getId();
	}
	
	public long getCurrentRowId() {
		if (mEntity.getRowId() == -1)
			save(true);
		return mEntity.getRowId();
	}
	
	public Uri getCurrentContentUri() {
		return «name.toFirstUpper()».Columns.CONTENT_URI;
	}
	
}
«ENDFILE»
«ENDDEFINE»