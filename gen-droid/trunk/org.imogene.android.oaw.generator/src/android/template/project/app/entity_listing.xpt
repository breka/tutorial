«IMPORT core»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(String canDelete, String canModify, String projectName) FOR CardEntity»
«FILE "/" + projectName.toLowerCase() + "/app/" + name.toFirstUpper() + "Listing.java"»
package org.imogene.android.«projectName.toLowerCase()-».app;

import java.util.ArrayList;

import android.app.SearchManager;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.ActivityNotFoundException;
import android.content.ContentUris;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.SparseBooleanArray;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.Menu;
import android.view.MenuItem;
import android.view.SubMenu;
import android.view.View;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.widget.ListView;
import android.widget.TextView;

import org.imogene.android.Constants.Extras;
import org.imogene.android.Constants.Intents;
import org.imogene.android.Constants.Keys;
import org.imogene.android.Constants.SortOrder;
import org.imogene.android.app.BaseListActivity;
import org.imogene.android.database.interfaces.EntityCursor;
import org.imogene.android.database.sqlite.SQLiteBuilder;
import org.imogene.android.database.sqlite.SQLiteWrapper;
import org.imogene.android.preference.PreferenceHelper;
import org.imogene.android.service.AbstractSyncService;
import org.imogene.android.util.IamLost;
import org.imogene.android.util.content.IntentUtils;
import org.imogene.android.util.database.DatabaseUtils;
import org.imogene.android.util.database.GpsTableUtils;
import org.imogene.android.util.dialog.DialogFactory;
import org.imogene.android.widget.EntityCursorAdapter;
import org.imogene.android.«projectName.toLowerCase()».R;
import org.imogene.android.«projectName.toLowerCase()».entities.«name.toFirstUpper()-»;
import org.imogene.android.«projectName.toLowerCase()».notification.«projectName.toFirstUpper()-»Notification;
import org.imogene.android.«projectName.toLowerCase()».roles.«name.toFirstUpper()-»Roles;
import org.imogene.android.«projectName.toLowerCase()».search.«projectName.toFirstUpper()-»SearchSupport;

public class «name.toFirstUpper()-»Listing extends BaseListActivity implements View.OnClickListener, DialogInterface.OnClickListener {

	// Extras keys
	private static final String EXTRA_CURRENT_URI = "AbstractEntityListing_currentUri";

	// Options menu ids
	private static final int MENU_MARK_ALL_AS_READ_ID = Menu.FIRST + 1;
	private static final int MENU_SORT_BY_MODIFIED_ID = Menu.FIRST + 2;
	
	private static final int MENU_SORT_BY_GROUP_ID = 1;
	«FOREACH getMainFields(this) AS field ITERATOR i-»
	private static final int MENU_SORT_BY_«field.shortName.toUpperCase()-»_ID = Menu.FIRST + «i.counter1 + 4-»;
	«ENDFOREACH-»
	«FOREACH secondaryFields AS field ITERATOR i-»
	private static final int MENU_SORT_BY_«field.shortName.toUpperCase()-»_ID = Menu.FIRST + «i.counter1 + getMainFields(this).size + 4-»;
	«ENDFOREACH-»
	«IF georeferenced != null-»
	private static final int MENU_SHOW_CLOUD_ID = Menu.FIRST + «secondaryFields.size + getMainFields(this).size + 5»;
		
	private static final int ACTIVITY_GET_AREA = 1000;
	«ENDIF-»
	
	// Context menu ids
	private static final int CMENU_DELETE_ID = Menu.FIRST;
	private static final int CMENU_EDIT_ID = Menu.FIRST + 1;
	private static final int CMENU_VIEW_ID = Menu.FIRST + 2;
	private static final int CMENU_MARK_AS_READ_ID = Menu.FIRST + 3;
	private static final int CMENU_MARK_AS_UNREAD_ID = Menu.FIRST + 4;
	
	// Dialog ids
	private static final int DIALOG_DELETE_ID = 1;
	private static final int DIALOG_IAMLOST_ID = 2;

	// Activity request code
	private static final int ACTIVITY_INSERT = 1;
	
	private EntityCursor mCursor;
	private EntityCursorAdapter mAdapter;

	private boolean mCanCreate;
	private boolean mCanDelete;
	private boolean mCanModify;

	private SQLiteBuilder mSQLBuilder = null;
	private String mSortKey = Keys.KEY_MODIFIED;
	private int mSortOrder = SortOrder.DESCENDANT_ORDER;

	private Uri mCurrentUri;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		if (Intent.ACTION_SEARCH.equals(getIntent().getAction())) {
			String query = getIntent().getStringExtra(SearchManager.QUERY);
			mSQLBuilder = «projectName.toFirstUpper()-»SearchSupport.searchFor«name.toFirstUpper()-»(query);
		}

		SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
		boolean canDelete = prefs.getBoolean(getString(R.string.«shortName.toLowerCase()-»_delete), «canDelete»);
		boolean canModify = prefs.getBoolean(getString(R.string.«shortName.toLowerCase()-»_modify), «canModify»);
		
		«IF creators.size > 0-»
		mCanCreate = «name.toFirstUpper()-»Roles.canCreate(this);
		mCanDelete = canDelete && mCanCreate;
		mCanModify = canModify && «name.toFirstUpper()-»Roles.canWrite(this);
		«ELSE-»
		mCanCreate = «name.toFirstUpper()-»Roles.canWrite(this);
		mCanDelete = canDelete && mCanCreate;
		mCanModify = canModify && mCanCreate;
		«ENDIF-»
		
		«projectName.toFirstUpper()»Notification.cancel«name.toFirstUpper()»Notification(this);

		IamLost.getInstance().add(getTitle().toString());

		if (getIntent().hasExtra(Extras.EXTRA_WHERE))
			mSQLBuilder = getIntent().getParcelableExtra(Extras.EXTRA_WHERE);

		if (getIntent().hasExtra(Extras.EXTRA_SORT_KEY))
			mSortKey = getIntent().getStringExtra(Extras.EXTRA_SORT_KEY);

		if (getIntent().hasExtra(Extras.EXTRA_SORT_ORDER))
			mSortOrder = getIntent().getIntExtra(Extras.EXTRA_SORT_ORDER,
					SortOrder.DESCENDANT_ORDER);

		if (savedInstanceState != null) {
			mSortKey = savedInstanceState.getString(Extras.EXTRA_SORT_KEY);
			mSortOrder = savedInstanceState.getInt(Extras.EXTRA_SORT_ORDER);
		}

		boolean IsPickMultiple = false;
		int choiceMode = ListView.CHOICE_MODE_NONE;
		
		if (Intent.ACTION_PICK.equals(getIntent().getAction())) {
			if (getIntent().hasExtra(Extras.EXTRA_MULTIPLE)) {
				findViewById(R.id.footer).setVisibility(View.VISIBLE);
				findViewById(R.id.saveButton).setOnClickListener(this);
				findViewById(R.id.discardButton).setOnClickListener(this);
				
				IsPickMultiple = true;
				choiceMode = ListView.CHOICE_MODE_MULTIPLE;
			} else {
				choiceMode = ListView.CHOICE_MODE_SINGLE;
			}
		}

		TextView empty = (TextView) findViewById(R.id.emptyText);
		empty.setText(R.string.noEntityHelpText);
		
		mCursor = query();
		startManagingCursor(mCursor);
		
		setListAdapter(mAdapter = new EntityCursorAdapter(this, mCursor, «name.toFirstUpper()-».COLOR, choiceMode));
		
		if (IsPickMultiple) {
			getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
			if (getIntent().hasExtra(Extras.EXTRA_SELECTED)) {
				ArrayList<Uri> selected = getIntent().getParcelableArrayListExtra(Extras.EXTRA_SELECTED);
				ListView list = getListView();
				for (int i = 0; i < list.getCount(); i++) {
					long itemId = list.getItemIdAtPosition(i);
					Uri itemUri = ContentUris.withAppendedId(«name.toFirstUpper()-».CONTENT_URI, itemId);
					if (selected.contains(itemUri)) {
						list.setItemChecked(i, true);
					}
				}
			}
		}

		registerForContextMenu(getListView());
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		IamLost.getInstance().remove();
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		outState.putString(Extras.EXTRA_SORT_KEY, mSortKey);
		outState.putInt(Extras.EXTRA_SORT_ORDER, mSortOrder);
		outState.putParcelable(EXTRA_CURRENT_URI, mCurrentUri);
	}

	@Override
	protected void onRestoreInstanceState(Bundle state) {
		super.onRestoreInstanceState(state);
		mCurrentUri = state.getParcelable(EXTRA_CURRENT_URI);
	}
	
	@Override
	public void startActivity(Intent intent) {
		try {
			super.startActivity(intent);
		} catch (ActivityNotFoundException e) {
			IntentUtils.treatException(e, this, intent);
		}
	}
	
	@Override
	public void startActivityForResult(Intent intent, int requestCode) {
		try {
			super.startActivityForResult(intent, requestCode);
		} catch (ActivityNotFoundException e) {
			IntentUtils.treatException(e, this, intent);
		}
	}
	
	private EntityCursor query() {
		String where = DatabaseUtils.computeWhere(mSQLBuilder).toSQL();
		String order = mSortKey	+ (mSortOrder != SortOrder.DESCENDANT_ORDER	? " asc" : " desc");
		return (EntityCursor) SQLiteWrapper.query(this, «name.toFirstUpper()-».CONTENT_URI, where, order);
	}
	
	protected void requery() {
		stopManagingCursor(mCursor);
		mCursor = query();
		startManagingCursor(mCursor);
		mAdapter.changeCursor(mCursor);
	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		if (!getIntent().hasExtra(Extras.EXTRA_MULTIPLE)) {
			Uri uri = ContentUris.withAppendedId(«name.toFirstUpper()-».CONTENT_URI, id);
			if (Intent.ACTION_PICK.equals(getIntent().getAction())) {
				setResult(RESULT_OK, new Intent().setData(uri));
				finish();
			} else {
				startActivity(new Intent(Intent.ACTION_VIEW, uri));
			}
		}
	}
	
	@Override
	public boolean onCreateActionBarMenu(Menu menu) {
		boolean result = super.onCreateActionBarMenu(menu);
		if (mCanCreate) {
			getMenuInflater().inflate(R.menu.actionbar_add_item, menu);
		}
		getMenuInflater().inflate(R.menu.actionbar_search_item, menu);
		getMenuInflater().inflate(R.menu.actionbar_sync_item, menu);
		return result;
	}
	
	@Override
	public boolean onActionBarItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_add :
			Intent intent = new Intent(Intent.ACTION_INSERT, «name.toFirstUpper()».CONTENT_URI);
			intent.putExtras(getIntent());
			intent.addCategory(PreferenceHelper.getEditionCategory(this));
			startActivity(intent);
			return true;
		case R.id.menu_sync:
			AbstractSyncService.startService(this);
			return true;
		case R.id.menu_search:
			startSearch(null, false, null, false);
			return true;
		default:
			return super.onActionBarItemSelected(item);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(Menu.NONE, MENU_MARK_ALL_AS_READ_ID, Menu.NONE,
				R.string.menu_mark_all_as_read)
				.setIcon(R.drawable.ic_menu_mark);

		getMenuInflater().inflate(R.menu.menu_iamlost_item, menu);
		
		«IF georeferenced != null-»
		menu.add(
			Menu.NONE,
			MENU_SHOW_CLOUD_ID,
			Menu.NONE,
			R.string.menu_map)
			.setIcon(android.R.drawable.ic_menu_mapmode);
		«ENDIF-»

		SubMenu subMenu = menu.addSubMenu(R.string.menu_sort_by);
		subMenu.setIcon(android.R.drawable.ic_menu_sort_by_size);

		subMenu.add(MENU_SORT_BY_GROUP_ID, MENU_SORT_BY_MODIFIED_ID, Menu.NONE,
				R.string.menu_sort_by_modified);

		«EXPAND addSortMenu FOREACH getMainFields(this)»
		«EXPAND addSortMenu FOREACH secondaryFields»

		subMenu.setGroupCheckable(MENU_SORT_BY_GROUP_ID, true, true);

		return super.onCreateOptionsMenu(menu);
	}
	
	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		if (Keys.KEY_MODIFIED.equals(mSortKey))
			menu.findItem(MENU_SORT_BY_MODIFIED_ID).setChecked(true);
		«EXPAND onPrepareMenu FOREACH getMainFields(this)»
		«EXPAND onPrepareMenu FOREACH secondaryFields»
		return super.onPrepareOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_iamlost:
			showDialog(DIALOG_IAMLOST_ID);
			return true;
		case MENU_MARK_ALL_AS_READ_ID:
			DatabaseUtils.markAs(getContentResolver(), «name.toFirstUpper()-».CONTENT_URI, false);
			return true;
		case MENU_SORT_BY_MODIFIED_ID:
			if (Keys.KEY_MODIFIED.equals(mSortKey)) {
				mSortOrder = mSortOrder != SortOrder.DESCENDANT_ORDER ? SortOrder.DESCENDANT_ORDER
						: SortOrder.ASCENDANT_ORDER;
			} else {
				mSortKey = Keys.KEY_MODIFIED;
				mSortOrder = SortOrder.DESCENDANT_ORDER;
			}
			requery();
			return true;
		«IF georeferenced != null-»
		case MENU_SHOW_CLOUD_ID:
			startActivityForResult(new Intent(Intents.ACTION_NEW_RECT), ACTIVITY_GET_AREA);
			return true;
		«ENDIF-»
		«EXPAND onOptionItemSelected FOREACH getMainFields(this)»
		«EXPAND onOptionItemSelected FOREACH secondaryFields»
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		AdapterContextMenuInfo info = (AdapterContextMenuInfo) menuInfo;
		if (info.id < 0)
			return;

		super.onCreateContextMenu(menu, v, menuInfo);
		menu.add(Menu.NONE, CMENU_VIEW_ID, Menu.NONE, R.string.menu_view);
		if (mCanModify) {
			menu.add(Menu.NONE, CMENU_EDIT_ID, Menu.NONE, R.string.menu_edit);
		}
		if (mCanDelete) {
			menu.add(Menu.NONE, CMENU_DELETE_ID, Menu.NONE, R.string.menu_delete);
		}

		EntityCursor c = (EntityCursor) getListAdapter().getItem(
				info.position - getListView().getHeaderViewsCount());
		if (c.getUnread()) {
			menu.add(Menu.NONE, CMENU_MARK_AS_READ_ID, Menu.NONE,
					R.string.menu_mark_as_read);
		} else {
			menu.add(Menu.NONE, CMENU_MARK_AS_UNREAD_ID, Menu.NONE,
					R.string.menu_mark_as_unread);
		}
	}

	@Override
	public boolean onContextItemSelected(MenuItem item) {
		AdapterContextMenuInfo info = (AdapterContextMenuInfo) item
				.getMenuInfo();
		Uri uri = ContentUris.withAppendedId(«name.toFirstUpper()-».CONTENT_URI, info.id);
		switch (item.getItemId()) {
		case CMENU_DELETE_ID:
			mCurrentUri = uri;
			showDialog(DIALOG_DELETE_ID);
			return true;
		case CMENU_EDIT_ID:
			startActivity(new Intent(Intent.ACTION_EDIT, uri));
			return true;
		case CMENU_VIEW_ID:
			startActivity(new Intent(Intent.ACTION_VIEW, uri));
			return true;
		case CMENU_MARK_AS_READ_ID:
			DatabaseUtils.markAs(getContentResolver(), uri, false);
			return true;
		case CMENU_MARK_AS_UNREAD_ID:
			DatabaseUtils.markAs(getContentResolver(), uri, true);
			return true;
		default:
			return super.onContextItemSelected(item);
		}
	}

	@Override
	protected Dialog onCreateDialog(int id) {
		switch (id) {
		case DIALOG_DELETE_ID:
			return new AlertDialog.Builder(this)
			.setTitle(R.string.delete_confirmation_title)
			.setIcon(android.R.drawable.ic_dialog_alert)
			.setMessage(R.string.delete_confirmation)
			.setNegativeButton(android.R.string.cancel, null)
			.setPositiveButton(android.R.string.ok, this)
			.setCancelable(false)
			.create();
		case DIALOG_IAMLOST_ID:
			return DialogFactory.createIamLostDialog(this);
		default:
			return super.onCreateDialog(id);
		}
	}
	
	public void onClick(DialogInterface dialog, int which) {
		if (which == DialogInterface.BUTTON_POSITIVE) {
			getContentResolver().delete(mCurrentUri, null, null);			
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		switch (requestCode) {
		«IF georeferenced != null-»
		case ACTIVITY_GET_AREA:
			if (resultCode == RESULT_OK) {
				double north = data.getDoubleExtra(Extras.EXTRA_NORTH, 0);
				double east = data.getDoubleExtra(Extras.EXTRA_EAST, 0);
				double south = data.getDoubleExtra(Extras.EXTRA_SOUTH, 0);
				double west = data.getDoubleExtra(Extras.EXTRA_WEST, 0);
				Intent intent = GpsTableUtils.build(
					this,
					«name.toFirstUpper()».CONTENT_URI,
					mSQLBuilder,
					"«georeferenced.name.toLowerCase()»",
					"get«georeferenced.name.toFirstUpper()»",
					north, east, south, west);
				if (intent != null) {
					startActivity(intent);
				}
			}
			break;
		«ENDIF-»
		case ACTIVITY_INSERT:
			if (resultCode == RESULT_OK) {
				if (!getIntent().hasExtra(Extras.EXTRA_MULTIPLE)) {
					setResult(RESULT_OK, data);
					finish();
				}
			}
			break;
		default:
			super.onActivityResult(requestCode, resultCode, data);
		}
	}

	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.saveButton:
			ListView list = getListView();
			SparseBooleanArray spa = list.getCheckedItemPositions();
			ArrayList<Uri> uris = new ArrayList<Uri>();
			if (spa.size() != 0) {
				for (int i = 0; i < list.getCount(); i++) {
					if (spa.get(i)) {
						long id = list.getItemIdAtPosition(i);
						if (id != -1)
							uris.add(ContentUris.withAppendedId(«name.toFirstUpper()-».CONTENT_URI, id));
					}
				}
			}
			Intent data = new Intent().putParcelableArrayListExtra(
					Extras.EXTRA_SELECTED, uris);
			setResult(RESULT_OK, data);
			finish();
			break;
		case R.id.discardButton:
			setResult(RESULT_CANCELED);
			finish();
			break;
		}
	}
	
}
«ENDFILE-»
«ENDDEFINE»


«DEFINE addSortMenu FOR FieldEntity-»
subMenu.add(MENU_SORT_BY_GROUP_ID, MENU_SORT_BY_«shortName.toUpperCase()-»_ID, Menu.NONE, R.string.«shortName.toLowerCase()-»);
«ENDDEFINE»


«DEFINE onPrepareMenu FOR FieldEntity-»
if ("«name.toLowerCase()-»".equals(mSortKey))
	menu.findItem(MENU_SORT_BY_«shortName.toUpperCase()-»_ID).setChecked(true);
«ENDDEFINE»

«DEFINE onOptionItemSelected FOR FieldEntity-»
case MENU_SORT_BY_«shortName.toUpperCase()-»_ID:
	if ("«name.toLowerCase()-»".equals(mSortKey)) {
		mSortOrder = mSortOrder != SortOrder.DESCENDANT_ORDER ? SortOrder.DESCENDANT_ORDER : SortOrder.ASCENDANT_ORDER;
	} else {
		mSortKey = "«name.toLowerCase()-»";
		mSortOrder = 0;
	}
	requery();
	return true;
«ENDDEFINE»