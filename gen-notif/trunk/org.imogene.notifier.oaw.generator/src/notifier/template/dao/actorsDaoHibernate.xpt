«IMPORT core»
«DEFINE generate(String modelName) FOR Project»
«FILE modelName.toLowerCase()+"/dao/hibernate/"+modelName.toFirstUpper()+"ActorsDao.java"»
package org.imogene.«modelName.toLowerCase()».dao.hibernate;

import java.util.Set;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import org.imogene.common.entity.DefaultActor;
import org.imogene.common.entity.ImogActor;
import org.imogene.common.entity.ImogRole;
«FOREACH entities AS e -»
 «IF Actor.isAssignableFrom(e.metaType)-»
import org.imogene.«modelName.toLowerCase()».entity.«e.name.toFirstUpper()»Actor;
 «ENDIF-»
«ENDFOREACH -»
import org.imogene.notifier.server.dao.ImogActorDao;

/**
 * Hibernate DAO implementation to handle the Imogene actors
 *@author Medes-IMPS
 */
public class «modelName.toFirstUpper()»ActorsDao extends HibernateDaoSupport implements ImogActorDao {

	@Override
	public ImogActor getActorFormId(String actorId) {
		ImogActor actor = null;
		«FOREACH entities AS e»
		«IF Actor.isAssignableFrom(e.metaType)»
		/* «e.name.toFirstUpper()» */
		try{
			actor = (ImogActor)getHibernateTemplate().load(«e.name.toFirstUpper()»Actor.class, actorId);
		if(actor != null)
			return actor;
		}catch(Exception ex){
			logger.warn(ex.getMessage());
		}
		«ENDIF»
		«ENDFOREACH»
		
		/* default actor*/
		try{
			actor = (ImogActor)getHibernateTemplate().load(DefaultActor.class, actorId);
			if(actor!=null)
				return actor;
		}catch(Exception ex){
			logger.warn(ex.getMessage());
		}
		return null;
	}

	@Override
	public ImogActor getActorFromLogin(String actorLogin) {		
		
		«FOREACH entities AS e»
		«IF Actor.isAssignableFrom(e.metaType)»
		/* «e.name.toFirstUpper()» */
		try{
			Criteria criteria = getSession().createCriteria(
				«e.name.toFirstUpper()»Actor.class);
			criteria.add(Restrictions.eq("login", actorLogin));
			List<?> result = criteria.list();
			if(result.size()>0)
				return (ImogActor)result.get(0);		
		}catch(Exception ex){
			logger.warn(ex.getMessage());
		}
		«ENDIF»
		«ENDFOREACH»
		
		/* default actor*/
		try{
			Criteria criteria = getSession().createCriteria(
				DefaultActor.class);
			criteria.add(Restrictions.eq("login", actorLogin));
			List<?> result = criteria.list();
			if(result.size()>0)
				return (ImogActor)result.get(0);			
		}catch(Exception ex){
			logger.warn(ex.getMessage());
		}
		return null;
	}

	@Override
	public Set<ImogActor> getActorsForRole(ImogRole role) {
		
		return null;
	}
}
«ENDFILE»
«ENDDEFINE»
