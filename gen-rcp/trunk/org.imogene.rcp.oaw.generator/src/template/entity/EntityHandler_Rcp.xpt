«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String moduleName) FOR CardEntity»
«FILE moduleName.toLowerCase() + "/handler/" + name.toFirstUpper() + "Handler.java"»
package org.imogene.«moduleName.toLowerCase()».handler;


import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.imogene.common.dao.EntityDao;
import org.imogene.common.dao.criteria.ImogJunction;
import org.imogene.common.data.Synchronizable;
import org.imogene.common.data.SynchronizableUser;
import org.imogene.common.data.handler.EntityHandler;
import org.imogene.sync.SyncConstants;
import org.imogene.sync.client.EntityListener;

import org.imogene.«moduleName.toLowerCase()».entity.«this.name.toFirstUpper()»;
«FOREACH this.groups.fields AS f-»
	«EXPAND importParent(moduleName.toLowerCase()) FOR f-»
«ENDFOREACH-»
import org.imogene.common.dao.LocalizedTextDao;
«IF isTranslatableFieldPresent(this.groups.fields)-»
import org.imogene.sync.localizedtext.LocalizedText;
«ENDIF-»	


/**
 * Implements a data handler for the «this.name» 
 * @author Medes-IMPS
 */
public class «this.name.toFirstUpper()»Handler implements EntityHandler {

	private static Set<EntityListener> listeners = new HashSet<EntityListener>();

	private EntityDao dao;
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	private LocalizedTextDao i18nDao;
	«ENDIF-»	
	
	public int countAll() {		
		return dao.countAll();
	}
	
	public Synchronizable createNewEntity(String id) {
		//TODO handle  with not null constraint values
		«this.name.toFirstUpper()» entity = new «this.name.toFirstUpper()»();			
		entity.setId(id);
		entity.setModified(new Date());
		entity.setCreatedBy(SyncConstants.SYNC_ID_SYS);
		entity.setModifiedBy(SyncConstants.SYNC_ID_SYS);
		entity.setModifiedFrom(SyncConstants.SYNC_ID_SYS);
		return entity;
	}

	public void delete(Synchronizable entity, SynchronizableUser user) {
		dao.delete(entity);
	}	
	
	public void deleteEntities() {		
		dao.deleteEntities();
	}
	
	public List<Synchronizable> loadEntities(SynchronizableUser user) {		
		return dao.loadEntities();
	}

«IF this.topLevel == true -»
	/**
	 * Used to get «this.name»ForList entities by pages
	 * @param startRow page start row
	 * @param maxRows page max number of rows
	 * @param sortProperty property used for entity list sorting
	 * @param sortOrder true if ascending
	 * @param user
	 * @return «this.name»ForList entities between startRow and (startRow + maxRows)
	 */
«ENDIF -»
	public List<Synchronizable> loadEntities(int startRow, int maxRows,	String sortProperty, boolean sortOrder, SynchronizableUser user) {
		return dao.loadEntities(startRow, maxRows, sortProperty, sortOrder);
	}

	public Synchronizable loadEntity(String entityId, SynchronizableUser user) {		
		return dao.loadEntity(entityId);
	}

	public List<Synchronizable> loadModified(Date date, SynchronizableUser user) {		
		«IF isTranslatableFieldPresent(this.groups.fields)-»
		List<Synchronizable> entities = dao.loadModified(date, (ImogJunction) null);
		for (Synchronizable entity: entities) {
			entity = getLocalized«this.name.toFirstUpper()»(entity);
		}
		return entities;
		«ELSE-»
		return dao.loadModified(date, (ImogJunction)null);
		«ENDIF-»	
	}		
	
	public Synchronizable loadModified(String entityId, Date date, SynchronizableUser user) {
		«IF isTranslatableFieldPresent(this.groups.fields)-»
		Synchronizable entity = dao.loadModified(date, entityId);
		entity = getLocalized«this.name.toFirstUpper()»(entity);
		return entity;
		«ELSE»
		return dao.loadModified(date, entityId);
		«ENDIF»	
	}		
	
	public void merge(Synchronizable entity, SynchronizableUser user) {		
		«FOREACH this.groups.fields AS f-»
			«EXPAND saveParent FOR f-»
		«ENDFOREACH-»
		 dao.merge(entity);
		 
		«IF isTranslatableFieldPresent(this.groups.fields)-»
		// save related LocalizedTexts
		«this.name.toFirstUpper()» «this.name.toFirstLower()» = («this.name.toFirstUpper()») entity;
		List<LocalizedText> texts = «this.name.toFirstLower()».getLocalizedFieldMap().getI18nValues();
		for (LocalizedText current : texts)
			i18nDao.saveOrUpdate(current);
		«ENDIF-»	
		 
		/* notify listeners */
		// TODO: should we notify when it is a fake entity ?
		synchronized (listeners) {
			for (EntityListener listener : listeners)
				listener.entitySavedOrUpdated(entity);
		}	 
	}	
	
	public void saveOrUpdate(Synchronizable entity, SynchronizableUser user) {		
		«FOREACH this.groups.fields AS f-»
			«EXPAND saveParent FOR f-»
		«ENDFOREACH-»		
		dao.saveOrUpdate(entity);
		
		«IF isTranslatableFieldPresent(this.groups.fields)-»
		// save related LocalizedTexts
		«this.name.toFirstUpper()» «this.name.toFirstLower()» = («this.name.toFirstUpper()») entity;
		List<LocalizedText> texts = «this.name.toFirstLower()».getLocalizedFieldMap().getI18nValues();
		for (LocalizedText current : texts)
			i18nDao.saveOrUpdate(current);
		«ENDIF-»	
		
		/* notify listeners */
		// TODO: should we notify when it is a fake entity ?
		synchronized (listeners) {
			for (EntityListener listener : listeners)
				listener.entitySavedOrUpdated(entity);
		}					
	}	
	
	/*
	 *
	 */
	public synchronized void addListener(EntityListener listener) {
		listeners.add(listener);
	}

	/*
	 *
	 */
	public synchronized void removeListener(EntityListener listener) {
		listeners.remove(listener);
	}	
	
	
	/**
	 * Setter for bean injection
	 * @param dao
	 */
	public void setDao(EntityDao dao) {
		this.dao = dao;
	}

	public EntityDao getDao() {
		return dao;
	}
	
	public void setI18nDao(LocalizedTextDao i18nDao) {
		«IF isTranslatableFieldPresent(this.groups.fields)-»
		this.i18nDao = i18nDao;
		«ENDIF»	

	}
	
	@Override
	public List<Synchronizable> loadEntities(SynchronizableUser user,
			String terminalId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Synchronizable> loadModified(Date date,
			SynchronizableUser user, String terminalId) {
		// TODO Auto-generated method stub
		return null;
	}
	
		«IF isTranslatableFieldPresent(this.groups.fields)-»
	/**
	 * Adds the Localized texts to a «this.name.toFirstUpper()» entity
	 * @param value the «this.name.toFirstUpper()» entity
	 * @return «this.name.toFirstUpper()» entity with the Localized texts added
	 */
	private «this.name.toFirstUpper()» getLocalized«this.name.toFirstUpper()»(Synchronizable value) {
		«this.name.toFirstUpper()» entity = («this.name.toFirstUpper()»)value;
		if (entity != null) {
		«FOREACH this.groups.fields AS f-»
			«EXPAND addLocalizedTexts FOR f-»
		«ENDFOREACH-»			
		}
		return entity;
	}
	
	/**
	 * Gets the Localized texts for a given field
	 * @param fieldId the field id for which LocalizedTexts are searched
	 * @return a list of LocalizedTexts
	 */
	private List<LocalizedText> getLocalizedTexts(String fieldId) {
		return i18nDao.listLocalizedText(fieldId);
	}
		«ENDIF»		
	
}
«ENDFILE»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»



«REM» ------------------------------------------------«ENDREM»
«DEFINE importParent(String moduleName) FOR FieldEntity-»«ENDDEFINE»
«DEFINE importParent(String moduleName) FOR ReverseRelationFieldEntity -»
	«IF (this.cardinality == 1 && this.oppositeRelationField!=null && this.oppositeRelationField.cardinality == 1)-»
import org.imogene.«moduleName».entity.«this.entity.name.toFirstUpper()»;		
	«ENDIF -»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»


«REM» ------------------------------------------------«ENDREM»
«DEFINE saveParent FOR FieldEntity-»«ENDDEFINE»
«DEFINE saveParent FOR ReverseRelationFieldEntity -»
	«IF (this.cardinality == 1 && this.oppositeRelationField!=null && this.oppositeRelationField.cardinality == 1)-»
		«REM» Relation 1 <-> 1 «ENDREM»	
		«this.entity.name» child = ((«this.parentGroup.parentCard.name»)entity).«EXPAND template::CommonFieldUtil::getterName FOR this-»();
		if (child != null) {
			child.«EXPAND template::CommonFieldUtil::setterName FOR this.oppositeRelationField-»((«this.parentGroup.parentCard.name»)entity);
		}			
	«ENDIF -»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»

«REM» Add LocalizedTexts to translatable entity «ENDREM»
«DEFINE addLocalizedTexts FOR FieldEntity-»«ENDDEFINE»
«DEFINE addLocalizedTexts FOR TextField-»
	«IF this.translatable-»
			entity.getLocalizedFieldMap().addI18nValues(getLocalizedTexts(entity.«EXPAND template::CommonFieldUtil::getterName FOR this-»()));
	«ENDIF-»
«ENDDEFINE»
«REM» ---------------------------------------------------------- «ENDREM»



