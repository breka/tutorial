«IMPORT core»
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR Project»
«FILE projectName.toLowerCase()+"/server/servlet/BinaryUploadServlet.java"»
package org.imogene.«projectName.toLowerCase()».server.servlet;

import org.imogene.web.gwt.common.id.ImogKeyGenerator;
import org.imogene.web.server.ExportedPropertiesHolder;
import org.imogene.web.server.binary.Binary;
import org.imogene.web.server.binary.BinaryDao;
import org.imogene.web.server.binary.file.BinaryFile;
import org.imogene.web.server.util.MediaConverter;
import org.imogene.web.server.util.PhotoConverter;
import gwtupload.server.UploadAction;
import gwtupload.server.exceptions.UploadActionException;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItem;

/**
 * This servlet permits to handle 
 * binary file upload for the Imog platform.
 * 
 * @author Medes-IMPS
 * 
 */
public class BinaryUploadServlet extends UploadAction {

	/** serial version */
	private static final long serialVersionUID = 6429923373802231312L;	
	private static final String DEFAULT_DIRECTORY = "/binaries/";	
	private static final String PATH_PARAM = "binaryPath";	
	private static final String BINARY_SHORTNAME = "BIN";	
	private String binaryPath = DEFAULT_DIRECTORY;
	private BinaryDao binaryDao;
	private MediaConverter videoConverter;
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(config.getServletContext());		
		binaryDao = (BinaryDao)wac.getBean("binaryDao");
		videoConverter = (MediaConverter)wac.getBean("videoConverter");
		initBinaryPath(wac);	
	}	
	
	/**
	 * Set the binary path of the application
	 */
	private void initBinaryPath(WebApplicationContext wac){
		ExportedPropertiesHolder eph = (ExportedPropertiesHolder)wac.getBean("exportedProperties");
		if(eph.getProperties().get(PATH_PARAM)!=null)
			binaryPath = eph.getProperties().get(PATH_PARAM);	
		if(!binaryPath.endsWith("/"))
				binaryPath = binaryPath+"/";
		/* flv directory */
		File flvDir = new File(binaryPath+"flv/");
		if(!flvDir.exists())
			flvDir.mkdir();			
	}
	
	/**
	 * Copy the uploaded file in the correct folder,
	 * Create the binary entity associated.
	 */
	@Override
	public String executeAction(HttpServletRequest request, List<FileItem> sessionFiles) throws UploadActionException {
		String entityId="noid";
		for (FileItem item : sessionFiles) {
			if (false == item.isFormField()) {
				try {			
					entityId = ImogKeyGenerator.generateKeyId(BINARY_SHORTNAME);
					Binary binary = new BinaryFile();
					binary.setId(entityId);
					binary.setContentType(item.getContentType());
					binary.setLength(item.getSize());
					binary.setFileName(item.getName());		
					binary.setCreationDate(new Date(System.currentTimeMillis()));
					binary.setLastModificationDate(new Date(System.currentTimeMillis()));		
					binaryDao.saveOrUpdateBinary(binary);
					/* binary file creation */
					File localFile = getLocalFile(item.getName(), entityId);							
					item.write(localFile);
					/* binary file conversion to flv */
					if (item.getContentType().contains("video")) {
						File flvFile = new File(binaryPath + "/flv/"
								+ localFile.getName() + ".flv");
						if (!item.getContentType().contains("x-flash-video")) {
							videoConverter.convert(localFile, new File(
									binaryPath + "flv/" + localFile.getName()
											+ ".flv"), item.getContentType());
						} else {
							copy(new FileInputStream(localFile),
									new FileOutputStream(flvFile));
						}
					}
					/* image file thumbnail */
					if(item.getContentType().contains("image")){
						File thumbnail = new File(binaryPath+"/thumb_"+localFile.getName());
						PhotoConverter.convert(localFile, thumbnail, item.getContentType());
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		removeSessionFileItems(request);
		return "<entityid>"+entityId+"</entityid>";
	}
	
	/**
	 * Remove a file when the user sends a request
	 */
	@Override
	public void removeItem(HttpServletRequest request, FileItem item) throws UploadActionException {
		//getLocalFile(item.getName()).delete();
	}

	/**
	 * Get the local file where copy the FileItem
	 * @param remoteName the remote name 
	 * @return the corresponding file.
	 */
	private File getLocalFile(String remoteName, String entityId) {		
		String basename = (new File(remoteName)).getName();
		return new File(binaryPath + entityId+"-" + basename);
	}
	
	/**
	 * Copy the binary file to the http response output stream
	 * @param in input stream
	 * @param out output stream
	 * @throws IOException
	 */
	private static void copy(InputStream in, OutputStream out)
			throws IOException {
		try {
			byte[] buffer = new byte[1024];
			int nrOfBytes = -1;
			while ((nrOfBytes = in.read(buffer)) != -1) {
				out.write(buffer, 0, nrOfBytes);
			}
			out.flush();
		} finally {
			try {
				in.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
			try {
				out.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
	}
}

«ENDFILE»
«ENDDEFINE»