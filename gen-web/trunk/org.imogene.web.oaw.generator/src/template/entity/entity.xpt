«IMPORT core»
«EXTENSION template::CommonFieldUtilExt» 
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR CardEntity»
«FILE projectName.toLowerCase()+"/client/entity/"+this.name.toFirstUpper() + ".java"»
package org.imogene.«projectName.toLowerCase()».client.entity;

import java.util.Date;
import java.util.Set;
«IF Actor.isAssignableFrom(this.metaType)-»
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
«ENDIF-»

«IF !Actor.isAssignableFrom(this.metaType)-»
import org.imogene.web.gwt.common.entity.ImogBean;
«ELSE-»
import org.imogene.web.gwt.client.sync.SynchronizableEntity;
import org.imogene.web.gwt.common.entity.ImogActor;
import org.imogene.web.gwt.common.entity.ImogRole;
«ENDIF-»

«IF this.georeferenced!=null -»
import org.imogene.web.gwt.common.entity.IsGeoreferenced;
«ENDIF-»


/**
 * ImogBean implementation for the entity «name.toFirstUpper()»
 * @author MEDES-IMPS
 */
«IF !Actor.isAssignableFrom(this.metaType)-»
public class «name.toFirstUpper()» implements ImogBean «IF this.georeferenced!=null», IsGeoreferenced«ENDIF»{
«ELSE-»
public class «name.toFirstUpper()» implements ImogActor «IF this.georeferenced!=null», IsGeoreferenced«ENDIF»{
«ENDIF-»


	/* Imog bean fields */
	private String id;	
	private Date creationDate;
	private String creator;	
	private Date lastModificationDate;
	private String modifier;
	private String modifiedFrom;
	private Date uploadDate;
	
	«IF Actor.isAssignableFrom(this.metaType)-»	
	/* Imog actor fields */
	public static String ENTITY_NAME = "«name.toFirstUpper()»";
	private String login;
	private String password;
	private String notifLocale;
	private Integer defaultNotificationMethod;
	private Boolean beNotified;
	private HashMap<String, String> notificationData = new HashMap<String, String>();
	private Set<SynchronizableEntity> synchronizables = new HashSet<SynchronizableEntity>();
	private Set<ImogRole> assignedRoles = new HashSet<ImogRole>();
	private Date lastLoginDate;	
	«ENDIF-»	
	
	/* Entity fields */
	
	«FOREACH groups AS g-»
	/* «g.name.toFirstUpper()» group fields */
	«FOREACH g.fields AS f -»
	«EXPAND fieldDeclaration FOR f-»
	«ENDFOREACH -»	
	«ENDFOREACH»	
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	/* For localized fields */
	private LocalizedFieldMap localizedFieldMap;	
	«ENDIF»
	
	
	
	public «name.toFirstUpper()»(){
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
		localizedFieldMap = new LocalizedFieldMap();		
	«ENDIF-»
	«IF Actor.isAssignableFrom(this.metaType)-»	
		«IF ((Actor)this).notificationInfos != null -»
          «FOREACH ((Actor)this).notificationInfos AS nf-»        
            notificationData.put("«nf.method»", "«EXPAND template::CommonFieldUtil::getterName FOR nf.dataField-»");        
          «ENDFOREACH -»
        «ENDIF-»
    «ENDIF-»		
	}
	
	/* Getters for Imog bean fields */
	
	public String getId() {		
		return id;
	}
		
	public Date getCreationDate() {		
		return creationDate;
	}	

	public String getCreator() {		
		return creator;
	}

	public Date getLastModificationDate() {		
		return lastModificationDate;
	}
	
	public String getModifier() {		
		return modifier;
	}	

	public String getModifiedFrom() {		
		return modifiedFrom;
	}

	public Date getUploadDate() {		
		return uploadDate;
	}
	
	/* Setters for Imog bean fields */
	
	public void setId(String pId) {		
		id = pId;
	}

	public void setCreationDate(Date date) {		
		creationDate = date;
	}

	public void setCreator(String pCreator) {
		creator =pCreator;		
	}

	public void setLastModificationDate(Date date) {
		lastModificationDate = date;		
	}
	
	public void setModifier(String pModifier) {
		modifier = pModifier;		
	}

	public void setModifiedFrom(String terminal) {
		modifiedFrom = terminal;		
	}

	public void setUploadDate(Date date) {		
		uploadDate = date;
	}
	
	
	/* Getters and Setters for Entity fields */
	
	«FOREACH groups AS g-»
	/* Getters and Setters for «g.name.toFirstUpper()» group fields */
	«FOREACH g.fields AS f -»
	«EXPAND template::WebFieldUtil::getterDeclarationForField FOR f»
	«EXPAND template::WebFieldUtil::setterDeclarationForField FOR f»	
	«REM»
	When a property has a lowercase first char and an upper case second char,
	some bean introspectors need getter/setter with type getXxxx
	and some other need getter/setter with type getxxx
	«ENDREM»
	«IF isPropertyWithLowerUpperCaseFirstTwoChar(f.name)-»
	/* second set of getter/setter because of property has first char with lowercase and second char with uppercase 
	   and bean introspectors do not use same naming conventions */
	«EXPAND template::WebFieldUtil::getterDeclarationForFieldWithLowerUpperCaseFirstTwoChar FOR f»
	«EXPAND template::WebFieldUtil::setterDeclarationForFieldWithLowerUpperCaseFirstTwoChar FOR f-»
	/* ----------------------------------------------------------------------------------------------------------- */
	«ENDIF-»
	
	«IF RelationFieldEntity.isAssignableFrom(f.metaType) && (((RelationFieldEntity)f).cardinality != 1)-»
	/**
	 * @param param the «((RelationFieldEntity)f).entity.name-» to add to the «EXPAND template::CommonFieldUtil::propertyName FOR f-» collection
	 */
	public void addTo«EXPAND template::CommonFieldUtil::propertyName FOR f-»(«((RelationFieldEntity)f).entity.name.toFirstUpper()-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR f-».add(param);
	}	
	
	/**
	 * @param param the «((RelationFieldEntity)f).entity.name-» to remove from the «EXPAND template::CommonFieldUtil::propertyName FOR f-» collection
	 */
	public void removeFrom«EXPAND template::CommonFieldUtil::propertyName FOR f-»(«((RelationFieldEntity)f).entity.name.toFirstUpper()-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR f-».remove(param);
	}	
	«ENDIF-»	
	
	
	«ENDFOREACH -»	
	«ENDFOREACH»
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	public LocalizedFieldMap getLocalizedFieldMap() {
		return localizedFieldMap;
	}

	public void setLocalizedFieldMap(LocalizedFieldMap localizedFieldMap) {
		this.localizedFieldMap = localizedFieldMap;
	}
	«ENDIF»	
	
	«IF this.georeferenced!=null -»
	public Double getLatitude() {
		return «EXPAND template::CommonFieldUtil::propertyName FOR this.georeferenced»Latitude;
	}
	public Double getLongitude() {
		return «EXPAND template::CommonFieldUtil::propertyName FOR this.georeferenced»Longitude;
	}
	«ENDIF»	
	

	public String getDisplayValue() {		
		StringBuffer buffer = new StringBuffer();
		«FOREACH this.mainFields AS m -»
		//TODO Compute main fields
		«ENDFOREACH -»
		return buffer.toString();
	}
	
	«IF Actor.isAssignableFrom(this.metaType)-»
	/* Getters and Setters for Actor fields */
	
	/** 
	 * Get the assigned roles for this actor. 
	 * @return a list of role names (EMPTY_LIST if none). 	  
	 */
	public Set<ImogRole> getRoles() {
		return assignedRoles;
	}

	/**
	 * Set the list of roles assigned to this actor. 	 
	 * @param roles the list of roles assigned. 
	 */
	public void setRoles(Set<ImogRole> roles) {
		assignedRoles = roles;
	}

	/** */
	private boolean isRoleAuthorized(String roleId) {
		boolean result = false;
		if (getAuthorizedRoles() != null) {
			for (Iterator<String> iter = getAuthorizedRoles().iterator(); iter
					.hasNext() && !result;) {
				String currRoleId = (String) iter.next();
				result = currRoleId.equals(roleId);
			}
		}
		return result;
	}
	
	/** 
	 * Add a role to this actor.
	 * @param role the role to add.
	 */
	public void addRole(ImogRole role) {

		if (!isRoleAuthorized(role.getId())) {
			throw new IllegalArgumentException(
					"The role "
							+ role.getName()
							+ " can not be assigned to this actor (not defined as an authorized role), for actor : «name.toFirstUpper()»");
		}

		if (!isRoleAssigned(role.getId())) {
			assignedRoles.add(role);
		}
	}

	/** 
	 * Remove the specified role of this actor assigned roles
	 */
	public void removeRole(ImogRole role) {
		assignedRoles.remove(role);
	}

	/** 
	 * Get the authorized roles for this actor. (defined in model).    
	 * @return a list of roles names (EMPTY_LIST if none).  
	 */
	public static Set<String> getAuthorizedRoles() {

		Set<String> authorizedRoles = new HashSet<String>();

    	«IF !((Actor)this).authorizedRoles.isEmpty -»
		    «FOREACH ((Actor)this).authorizedRoles AS role-»
				«EXPAND setAuthorizedRoles FOR role-»
			«ENDFOREACH -»   
		«ELSE -»
			«EXPAND setProjectRoles FOR this.eContainer-»				
		«ENDIF -»  

		return authorizedRoles;
	}

	/** 
	 * Get this actor login.
	 *@return the actor login
	 */
	public String getLogin() {
		return login;
	}

	/** 
	 * Get the assigned password for this actor.
	 *@return the actor password 
	 */
	public String getPassword() {
		return password;
	}

	/**
	 * Set the actor login.
	 *@param pLogin the actor login.
	 */
	public void setLogin(String pLogin) {
		login = pLogin;
	}

	/**
	 * set the actor password
	 *@param pPassword the actor password 
	 */
	public void setPassword(String pPassword) {
		password = pPassword;
	}

	/** 
	 * Get the notification locale ISO code to use for this actor
	 *@return the locale ISO code
	 */
	public String getNotificationLocale() {
		return notifLocale;
	}

	/** 
	 * Set the notification locale ISO code
	 *@param pLocale the locale ISO code
	 */
	public void setNotificationLocale(String locale) {
		notifLocale = locale;
	}

	/** 
	 * Get the notification method to use (if none : NO_METHOD). 
	 * @return the notification method id
	 */
	public Integer getNotificationMethod() {
		return defaultNotificationMethod;
	}

	/**
	 * Set the notification method to use.
	 *@param method the notification method
	 */
	public void setNotificationMethod(Integer method) {
		defaultNotificationMethod = method;
	}

	/**
	 * Get the notification data (ie: phone number, email) 
	 * for the specified notification method.
	 * @param method the notification method
	 * @return the data associated with the method
	 */
	public String getNotificationDataMethodName(String method) {
		return (String) notificationData.get(method);
	}

	/** 
	 * This actor can be notified ?
	 * @return true if actor can be notified.
	 */
	public Boolean getBeNotified() {
		return beNotified;
	}
	
	@Override
	public Date getLastLoginDate() {
		return lastLoginDate;
	}

	@Override
	public void setLastLoginDate(Date date) {
		this.lastLoginDate = date;
	}

	public void setSynchronizables(Set<SynchronizableEntity> syncs) {
		synchronizables = syncs;
	}

	public Set<SynchronizableEntity> getSynchronizables() {
		return synchronizables;
	}
	
	/**
	 * Set if this actor can be notified
	 *@param notif true if it can be notified
	 */
	public void setBeNotified(Boolean notif) {
		beNotified = notif;
	}

	/** 
	 * Is the specified role already assigned to the user ?
	 * @param roleId the role id
	 * @return true it is already assigned
	 */
	private boolean isRoleAssigned(String roleId) {
		boolean result = false;
		if (assignedRoles != null) {
			for (Iterator<ImogRole> it = assignedRoles.iterator(); it.hasNext()
					&& !result;) {
				ImogRole currRole = (ImogRole) it.next();
				result = currRole.getId().equals(roleId);
			}
		}
		return result;
	}
	
	«EXPAND filterField FOREACH ((Actor)this).filters-»
	
	«ENDIF-»
	
	
	
}
«ENDFILE»
«ENDDEFINE»

«DEFINE fieldDeclaration FOR FieldEntity-»
	private «EXPAND template::WebFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»; 
«ENDDEFINE»
«DEFINE fieldDeclaration FOR GeoField-»
	private «EXPAND template::WebFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»Latitude; 
	private «EXPAND template::WebFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»Longitude; 
«ENDDEFINE»


«REM» Set the actor roles «ENDREM»
«DEFINE setAuthorizedRoles FOR Role-»              
        authorizedRoles.add("«name»");
«ENDDEFINE»



«REM» Set the project roles to the actor «ENDREM»
«DEFINE setProjectRoles FOR emf::EObject-»«ENDDEFINE»
«DEFINE setProjectRoles FOR Project-»              
       	«FOREACH this.roles AS r-»         
        authorizedRoles.add("«r.name»");
		«ENDFOREACH -»
		authorizedRoles.add("administrator");
		authorizedRoles.add("delete");
		authorizedRoles.add("export");
«ENDDEFINE»

«REM» Create variable, getter and setter for the filter fields «ENDREM»
«DEFINE filterField FOR FilterField»

	/** 
	 * filter fields for the «this.entity.name.toFirstUpper()» entity 	
	 */		
	private Set<«entity.name.toFirstUpper()»> «EXPAND template::CommonFieldUtil::propertyName FOR this» = new HashSet<«entity.name.toFirstUpper()»>();
	
	/**
	 * Set the list of allowed «this.entity.name.toFirstUpper()» for card access.	
	 */
	public void «EXPAND template::CommonFieldUtil::setterName FOR this»(Set<«entity.name.toFirstUpper()»> filterFields){
		«EXPAND template::CommonFieldUtil::propertyName FOR this» = filterFields;
	}
	
	/**
	 * Get the list of allowed «this.entity.name.toFirstUpper()» for card access.
	 * @return a list of «this.entity.name.toFirstUpper()». 	
	 */
	public Set<«entity.name.toFirstUpper()»> «EXPAND template::CommonFieldUtil::getterName FOR this»(){
		return «EXPAND template::CommonFieldUtil::propertyName FOR this»;
	} 
«ENDDEFINE»


