«IMPORT core»
«EXTENSION template::CommonFieldUtilExt» 
«EXTENSION template::CommonEntityUtilExt»
 
«DEFINE generate(String packageName, String projectName) FOR CardEntity»
«FILE projectName.toLowerCase()+ "/client/entity/" + this.name.toFirstUpper() + "FormComposite.java"»
	«LET (Project)this.eContainer AS project -»
	«LET getCardEntityUIFormat(this, project) AS format -»
package org.imogene.«projectName.toLowerCase()».client.entity;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.Timer;
import com.google.gwt.user.client.Window;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Hyperlink;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Widget;

import org.imogene.web.gwt.client.Constants;
import org.imogene.web.gwt.client.LocalSession;
import org.imogene.web.gwt.client.i18n.BaseNLS;
import org.imogene.web.gwt.client.ui.MessageManager;
import org.imogene.web.gwt.client.ui.field.*;
import org.imogene.web.gwt.client.ui.field.paginatedList.*;
import org.imogene.web.gwt.client.ui.form.AbstractFormComposite;
import org.imogene.web.gwt.client.ui.form.GroupField;
import org.imogene.web.gwt.client.util.NumericUtil;
import org.imogene.web.gwt.client.util.DateUtil;

import org.imogene.web.gwt.common.criteria.BasicCriteria;
import org.imogene.web.gwt.common.criteria.CriteriaConstants;
import org.imogene.web.gwt.common.criteria.ImogConjunction;
import org.imogene.web.gwt.common.criteria.ImogDisjunction;
import org.imogene.web.gwt.common.criteria.ImogJunction;
import org.imogene.web.gwt.common.entity.CommonConstants;
import org.imogene.web.gwt.common.id.ImogKeyGenerator;

import org.imogene.«projectName.toLowerCase()».client.AccessManager;
import org.imogene.«projectName.toLowerCase()».client.entity.«name.toFirstUpper()»;
import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;
import org.imogene.«projectName.toLowerCase()».client.remote.«this.name.toFirstUpper()»ServiceFacade;
import org.imogene.web.gwt.client.ui.form.RelationUpdateManager;
import org.imogene.web.gwt.client.ui.form.RelationUpdateManager.RelationBroadcastReceiver;
«FOREACH groups.fields AS f-»
«EXPAND importForRelation("org.imogene." + projectName.toLowerCase() + ".client.remote") FOR f-»
«ENDFOREACH-»
«IF isTranslatableFieldPresent(this.groups.fields)-»
import java.util.Arrays;
import java.util.Vector;
import org.imogene.web.gwt.client.ui.field.ImogLocalizedTextBox;
import org.imogene.web.gwt.client.ui.field.ImogLocalizedTextAreaBox;
import org.imogene.web.gwt.common.entity.LocalizedText;
«ENDIF -»

/**
 * Form for a «this.name.toFirstUpper()» entity
 * @author MEDES-IMPS
 */
public class «this.name.toFirstUpper()»FormComposite extends AbstractFormComposite implements  FieldValueChangeHandler, RelationBroadcastReceiver {

	/* status */
	private «name.toFirstUpper()» entity;
	private String newEntityId;
	private int uploadMsgId = -1;
	private Widget lastEventParent=null;
	private boolean visibilityActivated=false;
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	private List<String> locales = Arrays.asList(«EXPAND getLocales FOR project-»);	
	«ENDIF -»
	
	«IF DisplayQRCode -»
	private GroupField imogQRCodeSection;
	private QRCodeField imogQRCodeField;
	«ENDIF -»
	
	«FOREACH groups AS g»
	/* «g.name.toFirstUpper()» section widgets */
	private GroupField «g.name.toFirstLower()»Section;
	«FOREACH g.fields AS f -»
	private «EXPAND template::WebFieldUtil::formFieldType FOR f» «f.name.toFirstLower()»;
	«EXPAND fieldAssociatedObject FOR f-»
	«ENDFOREACH -»	
	«ENDFOREACH»	
		
	/**
	 * Creates a «name.toFirstUpper()» empty form for the 
	 * creation of a new instance.
	 */
	public «name.toFirstUpper()»FormComposite(){
		«IF format!=null && format.withTabulations -»
		super(NLS.constants().«name.toFirstLower()»_create_subtitle(), "«name.toFirstLower()»", true);
		«ELSE -»
		super(NLS.constants().«name.toFirstLower()»_create_subtitle(), "«name.toFirstLower()»");
		«ENDIF -»		
		newEntityId = ImogKeyGenerator.generateKeyId("«shortName»");		
		isNew = true;
		layout();
		properties();		
		setEditable(true);
		
		setRelationButtonBehavior();
		computeVisibility(null, true);
	}
	
	/**
	 * Creates a «name.toFirstUpper()» form to display the data of an existing instance.
	 * @param entityId the «name.toFirstUpper()» instance id
	 */
	public «name.toFirstUpper()»FormComposite(String entityId){
		this(entityId, false);
	}
	
	/** 
	 * Creates a «name.toFirstUpper()» form to display 
	 * or edit an existing instance.
	 * @param entityId the «name.toFirstUpper()» instance id
	 * @param editable true if in edit mode.
	 */
	public «name.toFirstUpper()»FormComposite(String entityId, boolean editable){
		«IF format!=null && format.withTabulations -»
		super(BaseNLS.constants().form_loading(), "«name.toFirstLower()»", true);
		«ELSE -»
		super(BaseNLS.constants().form_loading(), "«name.toFirstLower()»");
		«ENDIF -»		
		layout();
		properties();		
		setEditable(editable);		
		«name.toFirstUpper()»ServiceFacade.getInstance().get«name.toFirstUpper()»(entityId, new PopulateWith«name.toFirstUpper()»());
		setRelationButtonBehavior();		
	}
	
	/**
	 * Layouts the form
	 */
	private void layout(){
	
		if(!AccessManager.canEditForm("«name.toLowerCase()»"))
			this.setModifiable(false);	

		«IF DisplayQRCode -»
		layoutImogQRCodeSection();		
		«ENDIF -»		

		/* Layout sections */
		«FOREACH groups AS g -»
		layout«g.name.toFirstUpper()»Section();
		«ENDFOREACH -»		
	
		/* Add sections to the form */	
		«IF format==null || !format.withTabulations -»
		«IF DisplayQRCode -»addSection(imogQRCodeSection);«ENDIF -»
		«ENDIF -»
		«FOREACH groups AS g -»
		if (AccessManager.canReadGroup("«g.parentCard.name.toLowerCase()».«g.name.toLowerCase()»")) {
			«IF format!=null && format.withTabulations -»
			addSection(«g.name.toFirstLower()»Section, NLS.constants().«name.toFirstLower()»_group_«g.name.toFirstLower()»());
			«ELSE -»		
			addSection(«g.name.toFirstLower()»Section);	
			«ENDIF -»				
		}					
		«ENDFOREACH -»		
		visibilityActivated=true;			
	}	
	
	/**
	 * Sets the layout properties
	 */
	private void properties(){	
		«IF (icon!=null && icon!="")-»
		setIconPath(GWT.getModuleBaseURL() + "images/small/«icon»");
		«ELSE -»
		setIconPath(GWT.getModuleBaseURL() + "images/entity_default_24.png");
		«ENDIF -»
		
		«FOREACH groups AS g -»	
		properties«g.name.toFirstUpper()»Section();
		«ENDFOREACH -»			
	}	
	
	
	/**
	 * Configures the button to export the «name.toFirstUpper()» instance data to a Pdf file
	 */	
	protected void setPrintButton() {
		String valuePrintHtml = "<a target=\"_blank\" href=\""
				+ GWT.getModuleBaseURL() + Constants.RPC_URL_BASE
				+ "getCardReportFile.sprg?entityShortName=«shortName»&entityId=" + entity.getId()
				+ "&loc=" + NLS.constants().locale() + "\">"
				+ BaseNLS.constants().button_print() + "</a>";	
		
		printButton.setHTML(valuePrintHtml);		
	}	
	
	«IF DisplayQRCode -»
	private void layoutImogQRCodeSection(){
		imogQRCodeSection = new GroupField(BaseNLS.constants().qrcode());	
		imogQRCodeField = new QRCodeField();
		imogQRCodeSection.addField(imogQRCodeField);
	}
	«ENDIF -»
	
	«FOREACH groups AS g -»	
	/** 
	 * Layouts the «g.name.toFirstUpper()» section 
	 * */	
	private void layout«g.name.toFirstUpper()»Section(){
		
		«IF format!=null && format.withTabulations -»
		«g.name.toFirstLower()»Section = new GroupField();
		«ELSE -»
		«g.name.toFirstLower()»Section = new GroupField(NLS.constants().«name.toFirstLower()»_group_«g.name.toFirstLower()»());	
		«ENDIF -»
		«IF (g.icon!=null && g.icon!="") -»
		«g.name.toFirstLower()»Section.setImage(new Image(GWT.getModuleBaseURL() + "/images/«g.icon»"));
		«ELSE -»
		«g.name.toFirstLower()»Section.setImage(null);
		«ENDIF -»
							
		«FOREACH g.fields AS f -»
		/* Field «f.name.toFirstUpper()» */
		«EXPAND createFieldView(name) FOR f -»
		«IF f.readOnly -»
		«f.name.toFirstLower()».setEnabled(false);
		«ENDIF -»
		«EXPAND addFieldToSection(g.name.toFirstLower()) FOR f»
		«ENDFOREACH -»						
	}	
	«ENDFOREACH -»
	
	«FOREACH groups AS g-»
	/**
	 * «g.name.toFirstUpper()» section layout properties
	 */
	private void properties«g.name.toFirstUpper()»Section(){				
	}	
	«ENDFOREACH»
	
	/**
	 * Sets the behavior of the relation field
	 * embedded button.
	 */
	 private void setRelationButtonBehavior(){
	 
	 	«FOREACH groups.fields AS f -»
	 	«EXPAND relationButtonBehavior FOR f -»
	 	«ENDFOREACH»
	 }
	
	/**
	 * Sets the editable mode.
	 * @param editable true to edit the form.
	 */
	public void setEditable(boolean editable){
		super.setEditable(editable);		

		«FOREACH groups AS g »
		/* «g.name.toFirstUpper()» group fields */
		boolean is«g.name.toFirstUpper()»Editable = editable && AccessManager.canEditGroup("«g.parentCard.name.toLowerCase()».«g.name.toLowerCase()»");	
		«FOREACH g.fields AS f -»
			«IF !f.readOnly -»
		  «EXPAND setEditable FOR f-»
			«ENDIF -» 
		«ENDFOREACH -»									
		«ENDFOREACH »		

		if(editable)
			RelationUpdateManager.get().addRelationBroadcastReceiver(this);
		else
			RelationUpdateManager.get().removeRelationBroadcastReceiver(this);			
	}

	/** 
	 * Refreshes the Form with the values of a «name.toFirstUpper()» entity instance
	 * @param entity the «name.toFirstUpper()» entity instance to be displayed in the Form
	 */
	private void set«name.toFirstUpper()»(«name.toFirstUpper()» entity){
	
		this.entity = entity;
		setTitle(NLS.constants().«name.toFirstLower()»_title() + " : " + MainFieldsUtilImpl.get().getDisplayValue(entity));	
		«IF format!=null && format.withTabulations -»
		«IF DisplayQRCode -»
		addMetadata(imogQRCodeSection);
		«ELSE -»
		addMetadata();
		«ENDIF -»

		«ENDIF -»	
			
		setMetaData(entity);
		
		«IF DisplayQRCode -»
		imogQRCodeField.setValue(entity.getId());
		«ENDIF -»
		
		«FOREACH groups AS g»
		/* «g.name.toFirstUpper()» group fields */
		«FOREACH g.fields AS f -»
		«EXPAND affectValueToView FOR f -»
		«ENDFOREACH -»	
		«ENDFOREACH»			

		computeVisibility(null, true);	
	}
	
	«FOREACH groups.fields AS f -»
		«EXPAND setterForRelation FOR f -»
	«ENDFOREACH -»
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.gwt.laboudeuse.client.AbstractFormComposite#save()
	 */
	@Override
	protected void save(){		
	
		if(validate()){
		
			MessageManager.get().newWarningMessage(BaseNLS.constants().form_saving());
			
			if(isUploading()){			
				if(uploadMsgId==-1)
					uploadMsgId = MessageManager.get().newWarningMessage(BaseNLS.constants().form_uploading());
				Timer timer = new Timer(){

					@Override
					public void run() {
						save();					
					}				
				};
				timer.schedule(2000);
				return;
			}
			
			if(entity == null){
				«IF Actor.isAssignableFrom(this.metaType)-»
					entity = new «name.toFirstUpper()»Actor();
				«ELSE -»
					entity = new «name.toFirstUpper()»();
				«ENDIF -»								
				entity.setId(newEntityId);
				entity.setCreationDate(new Date(System.currentTimeMillis()));
				entity.setCreator((LocalSession.get().getCurrentUser().getLogin()));
			}
			
			entity.setLastModificationDate(new Date(System.currentTimeMillis()));
			entity.setModifier((LocalSession.get().getCurrentUser().getLogin()));
			entity.setModifiedFrom(CommonConstants.IS_WEB);	
			
			«IF isTranslatableFieldPresent(this.groups.fields)-»
			List<LocalizedText> localizedTextsToSave = new Vector<LocalizedText>();
			«ENDIF -»				

			«FOREACH groups AS g»
			/* «g.name.toFirstUpper()» group fields */
			«FOREACH g.fields AS f -»
			«EXPAND affectValueToEntity FOR f -»
			«ENDFOREACH -»	
			«ENDFOREACH»		
			
			«IF isTranslatableFieldPresent(this.groups.fields)-»
			entity.getLocalizedFieldMap().addI18nValues(localizedTextsToSave);
			«ENDIF -»
			
			«name.toFirstUpper()»ServiceFacade.getInstance().saveOrUpdate(entity, isNew, new NoResultCallback());

			MessageManager.get().newInfoMessage(BaseNLS.constants().form_saved(), 5);
		}
		else {
			MessageManager.get().newWarningMessage(BaseNLS.constants().form_not_validated());
		}
	}
	
	/**
	 * 
	 * @return true if is uploading binary
	 */	
	private boolean isUploading(){
		boolean result = false;
		«FOREACH groups.fields AS f -»
		«EXPAND uploadingTest FOR f -»
		«ENDFOREACH -»		
		return result;
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.gwt.laboudeuse.client.AbstractFormComposite#cancel()
	 */
	@Override
	protected void cancel(){
		set«name.toFirstUpper()»(entity);		
	}
	
	@Override
	protected void returnToList() {
		History.newItem("list/«name.toLowerCase()»");
	}	
	
	@Override
	public void onFieldValueChange(ImogField<?> source){
		if(visibilityActivated)
		 	computeVisibility(source, false);
		 	
		«FOREACH groups.fields AS f-»
			«EXPAND onFieldValueChangeHierarchicalFilterCall FOR f -»
		«ENDFOREACH»
	}
	
	«FOREACH groups.fields AS f-»
		«EXPAND setRelationFieldHierarchicalFilterBehavior FOR f -»
	«ENDFOREACH»		
	

	/**
	 * 
	 * @return true if Form fields are validated
	 */	
	private boolean validate(){
		boolean valid=true;
		
		«FOREACH groups AS g»
		/* «g.name.toFirstUpper()» group fields */
		«FOREACH g.fields AS f -»
		«EXPAND callValidate FOR f -»
		«ENDFOREACH -»
		«ENDFOREACH»
		
		return valid;
	}
	
	/**
	 * Compute the field visibility
	 */
	private void computeVisibility(ImogField<?> source, boolean allValidation){
		«FOREACH groups.fields AS f -»
		«EXPAND fieldDependantVisibility FOR f -»
		«ENDFOREACH -» 
	}
	
	«REM» Calculation of field value «ENDREM»
    «FOREACH groups.fields AS f-»
    «IF f.calculationFunctionName!=null && f.calculationFunctionName.length>0 -» 
    «PROTECT CSTART '/*' CEND '*/' ID 'calcul' + f.shortName »       			   	
	/**
	 * Procedure to calculate the value of the field «f.name»
	 */	
	private «EXPAND template::WebFieldUtil::entityFieldType FOR f-» «f.calculationFunctionName-»(){	
		«EXPAND template::WebFieldUtil::entityFieldType FOR f-» result = null;
		«EXPAND computeFunction FOR f -»	
		return result;
	}    	 
	«ENDPROTECT»   
    «ENDIF-»
    «ENDFOREACH»
    
    @Override
	public void relationUpdate(Object myObject) {
		«FOREACH groups.fields AS f-»
			«EXPAND setRelationBroadcastBehavior FOR f -»
		«ENDFOREACH»			
	}
	
	«EXPAND specificMethods FOR this -»
	
	
	/* ********** Callback classes ********** */
	
	/**
	 * CallBack when retrieving a «name.toFirstUpper()» entity
	 * @author Medes-IMPS	 
	 */
	private class PopulateWith«name.toFirstUpper()» implements AsyncCallback<«name.toFirstUpper()»> {

		@Override
		public void onFailure(Throwable caught) {
			Window.alert("An error occured connecting to the server.");
		}

		@Override
		public void onSuccess(«name.toFirstUpper()» result) {
			set«name.toFirstUpper()»(result);
			setPrintButton();

			«FOREACH groups.fields AS f -»
			«EXPAND populateEntityHierarchicalFilterCall FOR f -»
			«ENDFOREACH -»
		}
	}	
	
	/**
	 * CallBack when no result is expected
	 * @author Medes-IMPS	 
	 */	
	private class NoResultCallback implements AsyncCallback<Void>{

		@Override
		public void onFailure(Throwable caught) {
			Window.alert("An error occured when saving the «name.toFirstUpper()» entity");
		}

		@Override
		public void onSuccess(Void result) {
			/* behavior if form should not be closed after save action */
			«FOREACH groups.fields AS f-»
			 «EXPAND postSaveAffectation FOR f-»
			«ENDFOREACH-»
			//set«name.toFirstUpper()»(entity);
			//setPrintButton();
			//setEditable(false);
			if(isNew){
				RelationUpdateManager.get().relationUdpate(entity);
				isNew = false;
			}
			/* behavior if form should be closed after save action */
			closeForm();
		}		
	}
		
}
	«ENDLET -»		
	«ENDLET -»	
«ENDFILE»
«ENDDEFINE»

«DEFINE callValidate FOR FieldEntity -»
	if(!«name.toFirstLower()».validate())
		valid = valid && false;
«ENDDEFINE»
«DEFINE callValidate FOR RelationFieldEntity -»
	«IF cardinality==1 -»
	if(!«name.toFirstLower()».validate())
			valid = valid && false;
	«ENDIF -»
«ENDDEFINE»

«REM» --------------- FIELD PROPERTIES ----------------- «ENDREM»

«REM»	«ENDREM»
«DEFINE allPropertiesPackage FOR FieldEntity -»
	«EXPAND addValueChangeHandler FOR this -»
	«EXPAND isVisibleDependent FOR this -»
	«EXPAND isMandatory FOR this -»
	«EXPAND isVisible FOR this -»
	«EXPAND defaultValue FOR this -»
«ENDDEFINE»

«REM» Add value change handler to field «ENDREM»
«DEFINE addValueChangeHandler FOR FieldEntity -»
«name.toFirstLower()».addFieldValueChangeHandler(this);
«ENDDEFINE»

«REM» Set if the field visibility is dependent «ENDREM»
«DEFINE isVisibleDependent FOR FieldEntity -»
«IF fieldDependentVisibility!=null && !fieldDependentVisibility.isEmpty && !hidden-»
«name.toFirstLower()».setVisibleDependent(true);
«ENDIF-»
«ENDDEFINE»

«REM» Set if the field is mandatory «ENDREM»
«DEFINE isMandatory FOR FieldEntity -»
«IF required -»
«name.toFirstLower()».setMandatory(true);
«ENDIF -»
«ENDDEFINE»

«REM» Set if the field is visible or hidden «ENDREM»
«DEFINE isVisible FOR FieldEntity -»
«IF hidden -»
«name.toFirstLower()».setVisible(false);
«ENDIF -»
«ENDDEFINE»
	
«REM» ------------------- DEFAULT VALUES --------------- «ENDREM»
«REM» Set the default value «ENDREM»
«DEFINE defaultValue FOR FieldEntity-»«ENDDEFINE»
«DEFINE defaultValue FOR IntegerField-»
	«IF defaultValue!=null && defaultValue.matches("[0-9]+") -»
		«name.toFirstLower()».setValue(«defaultValue»);
	«ENDIF-»
«ENDDEFINE»
«DEFINE defaultValue FOR EnumField-»
	«IF defaultValue!=null»
		«name.toFirstLower()».setValue("«defaultValue»");
	«ENDIF-»
«ENDDEFINE»
«DEFINE defaultValue FOR TimeField-»
	«IF defaultValue!=null && defaultValue.matches("now") -»
		«name.toFirstLower()».setValue(new Date());
	«ENDIF -»
«ENDDEFINE»
«DEFINE defaultValue FOR DateField-»
	«IF defaultValue!=null && defaultValue.matches("now") -»
		«name.toFirstLower()».setValue(new Date());
	«ENDIF -»
«ENDDEFINE»
«DEFINE defaultValue FOR BooleanField-»
	«IF defaultValue!=null && (defaultValue.matches("true")||defaultValue.matches("false") ) -»
		«name.toFirstLower()».setValue(«defaultValue»);
	«ENDIF -»
«ENDDEFINE»

«REM» --------------------- CREATE THE FIELD VIEWS ----------- «ENDREM»
«REM» 
	create the field view and set the label
	when constructing the layout «ENDREM»
«DEFINE createFieldView(String entityName) FOR FieldEntity -»
	«name.toFirstLower()» = new ImogTextBox();		
	«EXPAND allPropertiesPackage FOR this -»
	«name.toFirstLower()».setLabel(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());	
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR IntegerField -»
	«name.toFirstLower()» = new ImogIntegerField();	
	«EXPAND allPropertiesPackage FOR this -»
	«name.toFirstLower()».setLabel(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«name.toFirstLower()».setUnit("«unit»");
	«IF this.min != "" -»
		«name.toFirstLower()».setMinimum(«min»);
	«ENDIF -»
	«IF this.max != "" -»
		«name.toFirstLower()».setMaximum(«max»);
	«ENDIF -»	
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR FloatField -»
	«name.toFirstLower()» = new ImogFloatField();	
	«EXPAND allPropertiesPackage FOR this -»
	«name.toFirstLower()».setLabel(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());	
	«name.toFirstLower()».setUnit("«unit»");
	«IF this.min != "" -»
		«name.toFirstLower()».setMinimum(«min»);
	«ENDIF -»
	«IF this.max != "" -»
		«name.toFirstLower()».setMaximum(«max»);
	«ENDIF -»
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR TextField -»
	«IF this.translatable-»
	«name.toFirstLower()» =  new ImogLocalizedTextBox(locales, NLS.constants().locale());	
	«ELSE-»
	«name.toFirstLower()» = new ImogTextBox();	
	«ENDIF-»
	«EXPAND allPropertiesPackage FOR this -»
	«name.toFirstLower()».setLabel(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«FOREACH this.validationRules AS r ITERATOR i -»
	«name.toFirstLower()».addRule(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»_rule_«i.counter0-»(), "«r.validationRegularExpression»");
	«ENDFOREACH-» 
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR TextAreaField -»
	«IF this.translatable-»
	«name.toFirstLower()» =  new ImogLocalizedTextAreaBox(locales, NLS.constants().locale());	
	«ELSE-»
	«name.toFirstLower()» = new ImogTextArea();
	«ENDIF-»
	«EXPAND allPropertiesPackage FOR this -»
	«name.toFirstLower()».setLabel(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«FOREACH this.validationRules AS r ITERATOR i-»
	«name.toFirstLower()».addRule(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»_rule_«i.counter0-»(), "«r.validationRegularExpression»");	
	«ENDFOREACH-»	
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR GeoField -»
	«name.toFirstLower()» = new ImogGeoField();
	«EXPAND allPropertiesPackage FOR this -»
	«name.toFirstLower()».setLabel(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());	
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR PhotoField -»
	«name.toFirstLower()» = new ImogPhotoField(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«EXPAND allPropertiesPackage FOR this -»
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR SoundField -»
	«name.toFirstLower()» = new ImogAudioField(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«EXPAND allPropertiesPackage FOR this -»
«ENDDEFINE»
«DEFINE createFieldView(String entityName) FOR AddressField -»
	«name.toFirstLower()» = new ImogAddressField();
	«EXPAND allPropertiesPackage FOR this -»
	«name.toFirstLower()».setLabel(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());	
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR BinaryField -»
	«name.toFirstLower()» = new ImogBinaryField(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR BooleanField -»
	«name.toFirstLower()» = new ImogBooleanField(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«EXPAND allPropertiesPackage FOR this -»
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR EmailField -»
	«name.toFirstLower()» = new ImogEmailField(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«EXPAND allPropertiesPackage FOR this -»
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR VideoField -»
	«name.toFirstLower()» = new ImogVideoField(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«EXPAND allPropertiesPackage FOR this -»
«ENDDEFINE»
«DEFINE createFieldView(String entityName) FOR DateField -»
	«name.toFirstLower()» = new ImogDateField(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());	
	«EXPAND allPropertiesPackage FOR this -»	
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR DateTimeField -»
	«name.toFirstLower()» = new ImogDateTimeField(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«EXPAND allPropertiesPackage FOR this -»	
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR TimeField -»
	«name.toFirstLower()» = new ImogTimeField();		
	«EXPAND allPropertiesPackage FOR this -»
	«name.toFirstLower()».setLabel(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());	
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR EnumField -»
	«name.toFirstLower()» = new ImogEnumField(«multipleSelection», true, NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	«FOREACH enumValues AS ev-»
	«name.toFirstLower()».addItem(NLS.constants().«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«ev.name.toFirstLower()»_option(), "«ev.value»");
	«ENDFOREACH-»		
	«EXPAND allPropertiesPackage FOR this -»
«ENDDEFINE»

«DEFINE createFieldView(String entityName) FOR RelationFieldEntity -»
«IF cardinality == 1 -»
	«IF getOppositeCardinality(this)==1 -»
	
		«IF oppositeRelationField==null -»
	if (AccessManager.canCreateForm("«entity.name.toLowerCase()»") && AccessManager.canEditForm("«entity.name.toLowerCase()»"))
		«name.toFirstLower()» = new ImogRelationField<«entity.name.toFirstUpper()»>(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»());
	else
		«name.toFirstLower()» = new ImogRelationField<«entity.name.toFirstUpper()»>(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»(), false);
		«ELSE -»
	if (AccessManager.canCreateForm("«entity.name.toLowerCase()»") && AccessManager.canEditForm("«entity.name.toLowerCase()»"))
		«name.toFirstLower()» = new ImogPaginatedRelationBox<«entity.name.toFirstUpper()»>(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»() );
	else
		«name.toFirstLower()» = new ImogPaginatedRelationBox<«entity.name.toFirstUpper()»>(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»() , false);
			«IF MainRelationFieldEntity.isAssignableFrom(this.metaType)-»
	«name.toFirstLower()».setDataProvider(new «entity.name.toFirstUpper()»SelectionListBoxDataProvider("«EXPAND template::CommonFieldUtil::propertyName FOR this.oppositeRelationField»", false, true), MainFieldsUtilImpl.get());		
			«ELSE -»
	«name.toFirstLower()».setDataProvider(new «entity.name.toFirstUpper()»SelectionListBoxDataProvider("«EXPAND template::CommonFieldUtil::propertyName FOR this.oppositeRelationField»"), MainFieldsUtilImpl.get());		
			«ENDIF -»
		«ENDIF -»		
	«ELSE -»
	if (AccessManager.canCreateForm("«entity.name.toLowerCase()»") && AccessManager.canEditForm("«entity.name.toLowerCase()»"))
		«name.toFirstLower()» = new ImogPaginatedRelationBox<«entity.name.toFirstUpper()»>(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»() );
	else
		«name.toFirstLower()» = new ImogPaginatedRelationBox<«entity.name.toFirstUpper()»>(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»() , false);	
		«IF this.relationHierarchicalFilter==null || this.relationHierarchicalFilter.size!=2 -»
	«name.toFirstLower()».setDataProvider(new «entity.name.toFirstUpper()»SelectionListBoxDataProvider(), MainFieldsUtilImpl.get());
		«ELSE-»
	«name.toFirstLower()».setDataProvider(new «entity.name.toFirstUpper()»SelectionListBoxDataProvider(true), MainFieldsUtilImpl.get());
		«ENDIF-»	
	«ENDIF -»	
«ELSE -»
  «IF getOppositeCardinality(this)==1 && oppositeRelationField!=null-»
	«IF this.relationHierarchicalFilter==null || this.relationHierarchicalFilter.size!=2 -»
«name.toFirstLower()»SelectionBox = new ImogRelationPaginatedSelectionBox<«entity.name.toFirstUpper()»>("«entity.name.toLowerCase()»", new «entity.name.toFirstUpper()»SelectionListBoxDataProvider("«EXPAND template::CommonFieldUtil::propertyName FOR oppositeRelationField»"), MainFieldsUtilImpl.get());
	«ELSE-»
«name.toFirstLower()»SelectionBox = new ImogRelationPaginatedSelectionBox<«entity.name.toFirstUpper()»>("«entity.name.toLowerCase()»", new «entity.name.toFirstUpper()»SelectionListBoxDataProvider("«EXPAND template::CommonFieldUtil::propertyName FOR oppositeRelationField»", true), MainFieldsUtilImpl.get());	
	«ENDIF-»
«name.toFirstLower()»SelectionBox.setTitle(NLS.constants().«entity.name.toFirstLower()»_select_title());
  «ELSE-»
	«IF this.relationHierarchicalFilter==null || this.relationHierarchicalFilter.size!=2 -»
«name.toFirstLower()»SelectionBox = new ImogRelationPaginatedSelectionBox<«entity.name.toFirstUpper()»>("«entity.name.toLowerCase()»", new «entity.name.toFirstUpper()»SelectionListBoxDataProvider(), MainFieldsUtilImpl.get());
	«ELSE-»
«name.toFirstLower()»SelectionBox = new ImogRelationPaginatedSelectionBox<«entity.name.toFirstUpper()»>("«entity.name.toLowerCase()»", new «entity.name.toFirstUpper()»SelectionListBoxDataProvider(true), MainFieldsUtilImpl.get());	
	«ENDIF-»
«name.toFirstLower()»SelectionBox.setTitle(NLS.constants().«entity.name.toFirstLower()»_select_title());
  «ENDIF-»
	if (AccessManager.canCreateForm("«entity.name.toLowerCase()»") && AccessManager.canEditForm("«entity.name.toLowerCase()»"))
		«name.toFirstLower()» = new ImogPaginatedRelationList<«entity.name.toFirstUpper()»>(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»() , «name.toFirstLower()»SelectionBox, MainFieldsUtilImpl.get());
	else
		«name.toFirstLower()» = new ImogPaginatedRelationList<«entity.name.toFirstUpper()»>(NLS.constants().«entityName.toFirstLower()»_field_«name.toFirstLower()»() , «name.toFirstLower()»SelectionBox, MainFieldsUtilImpl.get(),false);	
  
		/* 'Add' button for field «name.toFirstUpper()» */
		«name.toFirstLower()».setNewButtonHandler(new ListButtonClickHandler() {
			@Override
			public void onClick(ImogPaginatedRelationList<?> source, String entityId) {
				«entity.name.toFirstUpper()»FormComposite form = new «entity.name.toFirstUpper()»FormComposite();
				form.setCloseable(true);
				form.setFormContainer(container);
				«IF getOppositeCardinality(this)==1 && oppositeRelationField!=null-»
				if(entity!=null)
					form.set«oppositeRelationField.name.toFirstUpper()»(entity);
				else
					form.set«oppositeRelationField.name.toFirstUpper()»(null);				
				«ENDIF-»

				«IF this.relationHierarchicalFilter!=null && this.relationHierarchicalFilter.size==2 -»
				/* injection of selection list values for related entity */
					«IF relationHierarchicalFilter.get(0).cardinality==1 -»
				«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» parent = «relationHierarchicalFilter.get(0).name.toFirstLower()».getValue();
				if(parent!=null) {
					Set<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> parents = new HashSet<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»>();
					parents.add(parent);
					form.set«relationHierarchicalFilter.get(1).name.toFirstUpper()»SelectionList(parents);
				}				
					«ELSE -»
				Set<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> «relationHierarchicalFilter.get(0).name.toFirstLower()»List = «relationHierarchicalFilter.get(0).name.toFirstLower()».getValue();
				if («relationHierarchicalFilter.get(0).name.toFirstLower()»List!=null)
					form.set«relationHierarchicalFilter.get(1).name.toFirstUpper()»SelectionList(«relationHierarchicalFilter.get(0).name.toFirstLower()»List);					
					«ENDIF -»							
				«ENDIF -»
			
				/* common fields */
				«FOREACH commonFields AS c ITERATOR iter-»				
				«IF (modulo(iter.counter0+2,2)==0) && iter.counter0<=(commonFields.size-2)-»				
				if(«EXPAND template::CommonFieldUtil::propertyName FOR commonFields.get(iter.counter0)».getValue() != null)
					form.set«commonFields.get(iter.counter0+1).name.toFirstUpper()»(«EXPAND template::CommonFieldUtil::propertyName FOR commonFields.get(iter.counter0)».getValue());								
				«ENDIF-»
				«ENDFOREACH-»		
				
				container.addForm(form);
				lastEventParent=«name.toFirstLower()»;
			}
		});
		/* 'View' button for field «name.toFirstUpper()» */
		«name.toFirstLower()».setViewButtonHandler(new ListButtonClickHandler() {
			@Override
			public void onClick(ImogPaginatedRelationList<?> source, String entityId) {
				if (!entityId.equals("")) {
					«entity.name.toFirstUpper()»FormComposite form = new «entity.name.toFirstUpper()»FormComposite(entityId);
					form.setCloseable(true);
					form.setFormContainer(container);					
					container.addForm(form);
					
					«IF this.relationHierarchicalFilter!=null && this.relationHierarchicalFilter.size==2 -»
					/* injection of selection list values for related entity */
						«IF relationHierarchicalFilter.get(0).cardinality==1 -»
					«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» parent = «relationHierarchicalFilter.get(0).name.toFirstLower()».getValue();
					if(parent!=null) {
						Set<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> parents = new HashSet<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»>();
						parents.add(parent);
						form.set«relationHierarchicalFilter.get(1).name.toFirstUpper()»SelectionList(parents);
					}				
						«ELSE -»
					Set<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> «relationHierarchicalFilter.get(0).name.toFirstLower()»List = «relationHierarchicalFilter.get(0).name.toFirstLower()».getValue();
					if («relationHierarchicalFilter.get(0).name.toFirstLower()»List!=null)
						form.set«relationHierarchicalFilter.get(1).name.toFirstUpper()»SelectionList(«relationHierarchicalFilter.get(0).name.toFirstLower()»List);					
						«ENDIF -»												
					«ENDIF -»					
				}
			}
		});
«ENDIF-»
«EXPAND allPropertiesPackage FOR this -»
«ENDDEFINE»

«REM» Affect the value of the loaded entity to the view fields «ENDREM»
«DEFINE affectValueToView FOR FieldEntity -»
	«name.toFirstLower()».setValue(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»());
«ENDDEFINE»
«DEFINE affectValueToView FOR TextField -»
	«IF this.translatable -»
	«name.toFirstLower()».setValue(entity.getLocalizedFieldMap().getFieldI18nValues(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»()));
	«ELSE -»
	«name.toFirstLower()».setValue(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»());
	«ENDIF -»
«ENDDEFINE»
«DEFINE affectValueToView FOR GeoField -»
	if (entity.«EXPAND template::CommonFieldUtil::getterName FOR this»Latitude()!=null && entity.«EXPAND template::CommonFieldUtil::getterName FOR this»Longitude()!=null)
		«name.toFirstLower()».setValue(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»Latitude() + ";" + entity.«EXPAND template::CommonFieldUtil::getterName FOR this»Longitude());
	else
		«name.toFirstLower()».setValue("");
«ENDDEFINE»
«DEFINE affectValueToView FOR RelationFieldEntity -»
«IF cardinality==1 -»
	«IF getOppositeCardinality(this)==1 -»
		«IF oppositeRelationField==null -»
	«name.toFirstLower()».setValue(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»(),MainFieldsUtilImpl.get().getDisplayValue(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»()));	
		«ELSE -»
	«name.toFirstLower()».setValue(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»());	
		«ENDIF -»
	«ELSE -»
	«name.toFirstLower()».setValue(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»());
	«ENDIF -»
«ELSE -»
	«name.toFirstLower()».setValue(entity.«EXPAND template::CommonFieldUtil::getterName FOR this»());
«ENDIF -»
«ENDDEFINE»

«REM» Affect the value contained in the field view to the entity «ENDREM»
«DEFINE affectValueToEntity FOR FieldEntity -»
    «IF calculationFunctionName!=null && calculationFunctionName.length>0 -»
	entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«calculationFunctionName»());
	«ELSE-»
	entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«name.toFirstLower()».getValue());
	«ENDIF-»	
«ENDDEFINE»

«DEFINE affectValueToEntity FOR TextField -»
	«IF this.translatable -»
	entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«name.toFirstLower()».getValue());
	localizedTextsToSave.addAll(«name.toFirstLower()».getLocalizedTextsToSave());
	«ELSE -»
	    «IF calculationFunctionName!=null && calculationFunctionName.length>0 -»
	entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«calculationFunctionName»());
		«ELSE-»
	entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«name.toFirstLower()».getValue());
		«ENDIF-»	
	«ENDIF -»
«ENDDEFINE»

«DEFINE affectValueToEntity FOR GeoField -»
	String «name.toFirstLower()»Value = «name.toFirstLower()».getValue();
	if («name.toFirstLower()»Value!=null) {
		String[] «name.toFirstLower()»Values = «name.toFirstLower()»Value.split(";");
		if («name.toFirstLower()»Values.length==2) {
			entity.«EXPAND template::CommonFieldUtil::setterName FOR this»Latitude(Double.valueOf(«name.toFirstLower()»Values[0]));
			entity.«EXPAND template::CommonFieldUtil::setterName FOR this»Longitude(Double.valueOf(«name.toFirstLower()»Values[1]));

		}
		else {
			entity.«EXPAND template::CommonFieldUtil::setterName FOR this»Latitude(null);
			entity.«EXPAND template::CommonFieldUtil::setterName FOR this»Longitude(null);
		}
	}
	else {
		entity.«EXPAND template::CommonFieldUtil::setterName FOR this»Latitude(null);
		entity.«EXPAND template::CommonFieldUtil::setterName FOR this»Longitude(null);
	}
«ENDDEFINE»

«DEFINE affectValueToEntity FOR RelationFieldEntity -»
	«IF calculationFunctionName!=null && calculationFunctionName.length>0 -»
	entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«calculationFunctionName»());
	«ELSE-»
	entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«name.toFirstLower()».getValue());
	«ENDIF-»	
«ENDDEFINE»
«DEFINE affectValueToEntity FOR ReverseRelationFieldEntity -»
	«IF cardinality==1 && oppositeRelationField.cardinality==1-»
	// can't set a one-to-one value from the opposite side («EXPAND template::CommonFieldUtil::setterName FOR this»)
	«ELSE-»
	  «IF calculationFunctionName!=null && calculationFunctionName.length>0 -»
	  entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«calculationFunctionName»());
	  «ELSE-»
	  entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«name.toFirstLower()».getValue());
	  «ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«REM» Uploading test for binary field «ENDREM»
«DEFINE uploadingTest FOR FieldEntity -»«ENDDEFINE»
«DEFINE uploadingTest FOR BinaryField -»
	if(«name.toFirstLower()».isUploading())
			return true;
«ENDDEFINE»

«REM» Add section representing a multi relation field «ENDREM»
«DEFINE addMultiFieldsSection FOR FieldEntity»«ENDDEFINE»
«DEFINE addMultiFieldsSection FOR RelationFieldEntity -»
«IF cardinality>1 || cardinality == -1 -»
	addSection(«name.toFirstLower()»);
«ENDIF -»
«ENDDEFINE»

«REM» Add fields to a section«ENDREM»
«DEFINE addFieldToSection(String sectionName) FOR FieldEntity-»
«sectionName»Section.addField(«name.toFirstLower()»);
«ENDDEFINE»


«REM» Add imports implied by the relation fields «ENDREM»
«DEFINE importForRelation(String packageName) FOR FieldEntity -»«ENDDEFINE»
«DEFINE importForRelation(String packageName) FOR RelationFieldEntity -»
«IF cardinality==1 -»
import «packageName».«entity.name.toFirstUpper()»ServiceFacade;
«ELSE -»
import org.imogene.web.gwt.client.ui.field.ImogPaginatedRelationList.ListButtonClickHandler;
«ENDIF-»
«ENDDEFINE»


«REM» Embedded relation button behavior «ENDREM»
«DEFINE relationButtonBehavior FOR FieldEntity -»«ENDDEFINE»
«DEFINE relationButtonBehavior FOR RelationFieldEntity -»
«IF cardinality == 1 -»
/** Field «this.name.toFirstUpper()» */

	/* 'Add' button for field «name.toFirstUpper()» */
	«name.toFirstLower()».setAddClickHandler(new ClickHandler(){
			@Override
			public void onClick(ClickEvent event) {
				if(container!=null){
					«entity.name.toFirstUpper()»FormComposite composite = new «entity.name.toFirstUpper()»FormComposite();
					composite.setFormContainer(container);
					composite.setCloseable(true);
					container.addForm(composite);
					lastEventParent=«name.toFirstLower()»;
					«IF getOppositeCardinality(this)==1 && oppositeRelationField!=null-»
					if(entity!=null)
						composite.set«oppositeRelationField.name.toFirstUpper()»(entity);
					else
						composite.set«oppositeRelationField.name.toFirstUpper()»(null);							
					«ENDIF-»
					
					«IF this.relationHierarchicalFilter!=null && this.relationHierarchicalFilter.size==2 -»
					/* injection of selection list values for related entity */
						«IF relationHierarchicalFilter.get(0).cardinality==1 -»
					«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» parent = «relationHierarchicalFilter.get(0).name.toFirstLower()».getValue();
					if(parent!=null) {
						Set<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> parents = new HashSet<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»>();
						parents.add(parent);
						composite.set«relationHierarchicalFilter.get(1).name.toFirstUpper()»SelectionList(parents);
					}				
						«ELSE -»
					Set<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> «relationHierarchicalFilter.get(0).name.toFirstLower()»List = «relationHierarchicalFilter.get(0).name.toFirstLower()».getValue();
					if («relationHierarchicalFilter.get(0).name.toFirstLower()»List!=null)
						composite.set«relationHierarchicalFilter.get(1).name.toFirstUpper()»SelectionList(«relationHierarchicalFilter.get(0).name.toFirstLower()»List);					
						«ENDIF -»										
					«ENDIF -»
				
					/* common fields */
					«FOREACH commonFields AS c ITERATOR iter-»		
						«IF (modulo(iter.counter0+2,2)==0) && iter.counter0<=(commonFields.size-2)-»
					if(«EXPAND template::CommonFieldUtil::propertyName FOR commonFields.get(iter.counter0)».getValue() != null)
						composite.set«commonFields.get(iter.counter0+1).name.toFirstUpper()»(«EXPAND template::CommonFieldUtil::propertyName FOR commonFields.get(iter.counter0)».getValue());																					
						«ENDIF-»
					«ENDFOREACH-»
				}
				else{
					throw new RuntimeException("No container defined");
				}			
			}
		});

	/* 'Information' button for field «name.toFirstUpper()» */
	«name.toFirstLower()».setViewClickHandler(new ClickHandler(){
			@Override
			public void onClick(ClickEvent event) {
				if(container!=null){
					if(«name.toFirstLower()».getValue()!=null){					
						«entity.name.toFirstUpper()»FormComposite composite = new «entity.name.toFirstUpper()»FormComposite(«name.toFirstLower()».getValue().getId());
						composite.setFormContainer(container);
						composite.setCloseable(true);
						container.addForm(composite);
						
					«IF this.relationHierarchicalFilter!=null && this.relationHierarchicalFilter.size==2 -»
					/* injection of selection list values for related entity */
						«IF relationHierarchicalFilter.get(0).cardinality==1 -»
					«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» parent = «relationHierarchicalFilter.get(0).name.toFirstLower()».getValue();
					if(parent!=null) {
						Set<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> parents = new HashSet<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»>();
						parents.add(parent);
						composite.set«relationHierarchicalFilter.get(1).name.toFirstUpper()»SelectionList(parents);
					}				
						«ELSE -»
					Set<«relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> «relationHierarchicalFilter.get(0).name.toFirstLower()»List = «relationHierarchicalFilter.get(0).name.toFirstLower()».getValue();
					if («relationHierarchicalFilter.get(0).name.toFirstLower()»List!=null)
						composite.set«relationHierarchicalFilter.get(1).name.toFirstUpper()»SelectionList(«relationHierarchicalFilter.get(0).name.toFirstLower()»List);					
						«ENDIF -»											
					«ENDIF -»						
					}
				}
				else{
					throw new RuntimeException("No container defined");
				}
			}
		});
«ENDIF»
«ENDDEFINE»

«REM» setters for relation with cardinality 1 «ENDREM»
«DEFINE setterForRelation FOR FieldEntity -»«ENDDEFINE»
«DEFINE setterForRelation FOR RelationFieldEntity -»
«IF cardinality == 1 »
	/** Injection for field «name.toFirstUpper()» */
	«IF getOppositeCardinality(this)==1 -»
		«IF oppositeRelationField==null -»
	public void set«name.toFirstUpper()»(«entity.name.toFirstUpper()» entity){
		«name.toFirstLower()».setValue(entity, MainFieldsUtilImpl.get().getDisplayValue(entity));
		«name.toFirstLower()».setLocked(true);
	}		
		«ELSE -»
	public void set«this.name.toFirstUpper()»(«this.entity.name.toFirstUpper()» value) {
		«name.toFirstLower()».setValue(value);
		«name.toFirstLower()».setLocked(true);	
	}		
		«ENDIF -»
	«ELSE -»
	public void set«this.name.toFirstUpper()»(«this.entity.name.toFirstUpper()» value) {
		«IF getHierarchicalFilterChilds(this, this.parentGroup.parentCard.groups.fields).isEmpty -»
		«name.toFirstLower()».setValue(value);
		«name.toFirstLower()».setLocked(true);
		«ELSE -»
		// The value of «name.toFirstLower()» affects other fields
		«name.toFirstLower()».setValue(value,true);
		«name.toFirstLower()».setLocked(true);
		«ENDIF -»		
		«FOREACH getHierarchicalFilterChilds(this, this.parentGroup.parentCard.groups.fields) AS f -»
		// Field «f.name.toFirstUpper()» depends on the value of field «f.relationHierarchicalFilter.get(0).name.toFirstLower()»
			get«f.name.toFirstUpper()»FilteredBy«f.relationHierarchicalFilter.get(0).name.toFirstUpper()»(value);
		«ENDFOREACH -»
	}
	
	/** Injection for the selection list box of field «name.toFirstUpper()» */
	public void set«name.toFirstUpper()»SelectionList(Set<«entity.name.toFirstUpper()»> entities) {
		if(entities!=null) {
			«name.toFirstLower()».clear();
			for («entity.name.toFirstUpper()»  current : entities) {
				«name.toFirstLower()».addItem(MainFieldsUtilImpl.get().getDisplayValue(current), current.getId(), current);
			}
		}
	}	
	«ENDIF -»
	
	/** Widget update for field «name.toFirstUpper()» */
	«IF getOppositeCardinality(this)!=1 -»	
		«IF this.relationHierarchicalFilter != null && this.relationHierarchicalFilter.size==2  -»
	private void clear«name.toFirstUpper()»Widget() {
		«name.toFirstLower()».clear();	
		«FOREACH getHierarchicalFilterChilds(this, this.parentGroup.parentCard.groups.fields) AS f -»
		clear«f.name.toFirstUpper()»Widget();
		«ENDFOREACH -»	
	}	
		«ENDIF -»
	«ENDIF -»
«ELSE -»
	/** Injection for field «name.toFirstUpper()» */
	public void set«name.toFirstUpper()»(Set<«entity.name.toFirstUpper()»> entities){
		«name.toFirstLower()».setValue(entities);
	}
«ENDIF -»
«ENDDEFINE»

«REM» Behavior for fields dependent visibility «ENDREM»
«DEFINE fieldDependantVisibility FOR FieldEntity -»
	«IF fieldDependentVisibility!=null && !fieldDependentVisibility.isEmpty && !hidden-»	
	if(allValidation ||
	«FOREACH fieldDependentVisibility AS fdv ITERATOR iter -»
	source.equals(«fdv.dependencyField.name.toFirstLower()»)
	«IF iter.counter0 < fieldDependentVisibility.size-1 -»||«ENDIF -»
	«ENDFOREACH -»
	){
		if(
		«FOREACH fieldDependentVisibility AS fdv2 ITERATOR iter2 -»
			«EXPAND expandTestForVisibility(fdv2.dependencyFieldValue) FOR fdv2.dependencyField-»
			«IF iter2.counter0 < fieldDependentVisibility.size-1 -»&&«ENDIF -»
		«ENDFOREACH -»
		){
			«name.toFirstLower()».setVisible(true);
		}else{
			«name.toFirstLower()».setVisible(false);
		}
	}
	«ENDIF»
«ENDDEFINE»

«REM» Test value for field denpendent visibility «ENDREM»
«DEFINE expandTestForVisibility(String value) FOR FieldEntity-»«ENDDEFINE»
«DEFINE expandTestForVisibility(String value) FOR TextField-»
	«IF this.translatable -»
	(«name.toFirstLower()».getValue()!=null && «name.toFirstLower()».matches("«value»"))
	«ELSE -»
	(«name.toFirstLower()».getValue()!=null && «name.toFirstLower()».getValue().matches("«value»"))
	«ENDIF -»

«ENDDEFINE»
«DEFINE expandTestForVisibility(String value) FOR IntegerField-»
	(«name.toFirstLower()».getValue()!=null && NumericUtil.numberMatches("«value»",«name.toFirstLower()».getValue().intValue()))	
«ENDDEFINE»
«DEFINE expandTestForVisibility(String value) FOR FloatField-»
	(«name.toFirstLower()».getValue()!= null && NumericUtil.numberMatches("«value»",«name.toFirstLower()».getValue().floatValue()))
«ENDDEFINE»
«DEFINE expandTestForVisibility(String value) FOR DateField-»
	(«name.toFirstLower()».getValue()!= null && DateUtil.matchesDate("«value»",«name.toFirstLower()».getValue()))
«ENDDEFINE»
«DEFINE expandTestForVisibility(String value) FOR DateTimeField-»
	(«name.toFirstLower()».getValue()!= null && DateUtil.matchesDateTime("«value»",«name.toFirstLower()».getValue()))
«ENDDEFINE»
«DEFINE expandTestForVisibility(String value) FOR TimeField-»
	(«name.toFirstLower()».getValue()!= null && DateUtil.matchesTime("«value»",«name.toFirstLower()».getValue()))
«ENDDEFINE»

«DEFINE expandTestForVisibility(String value) FOR BooleanField-»
	«IF value.matches("true") -»
		(«name.toFirstLower()».getValue()!=null && «name.toFirstLower()».getValue())
	«ELSE -»
		(«name.toFirstLower()».getValue()!=null && !«name.toFirstLower()».getValue())
	«ENDIF -»	
«ENDDEFINE»
«DEFINE expandTestForVisibility(String value) FOR EnumField -»
	(«name.toFirstLower()».getValue()!=null && «name.toFirstLower()».getValue().matches("«value»"))
«ENDDEFINE»

«REM» Add the behavior when receiving a relation broadcast message «ENDREM»
«DEFINE setRelationBroadcastBehavior FOR FieldEntity»«ENDDEFINE» 
«DEFINE setRelationBroadcastBehavior FOR RelationFieldEntity»
	«IF cardinality == 1 -»
		«IF getOppositeCardinality(this)==1 -»
			«IF oppositeRelationField==null -»
		if(myObject instanceof «entity.name.toFirstUpper()» && «name.toFirstLower()».equals(lastEventParent)){
			«entity.name.toFirstUpper()» «name.toFirstLower()»Tmp = ((«entity.name.toFirstUpper()»)myObject);		
			«name.toFirstLower()».setValue(«name.toFirstLower()»Tmp, MainFieldsUtilImpl.get().getDisplayValue(«name.toFirstLower()»Tmp));
			lastEventParent=null;			
			«ELSE -»
		if(myObject instanceof «entity.name.toFirstUpper()»){
			if(«name.toFirstLower()».equals(lastEventParent)){
				«entity.name.toFirstUpper()» «name.toFirstLower()»Tmp = ((«entity.name.toFirstUpper()»)myObject);
				«name.toFirstLower()».setValue(«name.toFirstLower()»Tmp);
			}				
			«ENDIF-»
		«ELSE -»	
		if(myObject instanceof «entity.name.toFirstUpper()»){
			if(«name.toFirstLower()».equals(lastEventParent)){
				«entity.name.toFirstUpper()» «name.toFirstLower()»Tmp = ((«entity.name.toFirstUpper()»)myObject);
				«name.toFirstLower()».setValue(«name.toFirstLower()»Tmp);
			}			
		«ENDIF-»
		}			
	«ELSE -»
		if(myObject instanceof «entity.name.toFirstUpper()» && «name.toFirstLower()».equals(lastEventParent)){
			«entity.name.toFirstUpper()» center = («entity.name.toFirstUpper()»)myObject;
			«name.toFirstLower()».addValue(MainFieldsUtilImpl.get().getDisplayValue(center), center);
			lastEventParent=null;
		}
	«ENDIF -»
«ENDDEFINE» 

«REM»«ENDREM»
«DEFINE fieldAssociatedObject FOR FieldEntity-»«ENDDEFINE»
«DEFINE fieldAssociatedObject FOR RelationFieldEntity-»
«IF cardinality==-1 || cardinality>1-»
private ImogRelationPaginatedSelectionBox<«entity.name.toFirstUpper()»> «name.toFirstLower()»SelectionBox;
«ENDIF-»
«ENDDEFINE»

«REM» Set the enable state of a field regarding its type «ENDREM»
«DEFINE setEditable FOR FieldEntity-»
«name.toFirstLower()».setEnabled(is«parentGroup.name.toFirstUpper()»Editable);
«ENDDEFINE»
«DEFINE setEditable FOR GeoField-»
«name.toFirstLower()».setEnabled(is«parentGroup.name.toFirstUpper()»Editable);
«ENDDEFINE»
«DEFINE setEditable FOR ReverseRelationFieldEntity-»
«IF cardinality==1 && oppositeRelationField.cardinality==1-»
«name.toFirstLower()».setEnabled(false);
«ELSE-»
«name.toFirstLower()».setEnabled(is«parentGroup.name.toFirstUpper()»Editable);
«ENDIF-»
«ENDDEFINE»

«REM»
   Specific function for relation 1<->1 on the reverse side, that permit to set the relation value after the save operation 
   to workaround a problem with the use of Hibernate. «ENDREM»
«DEFINE postSaveAffectation FOR FieldEntity -»«ENDDEFINE»
«DEFINE postSaveAffectation FOR ReverseRelationFieldEntity -»
  «IF cardinality==1 && oppositeRelationField.cardinality==1-»	
	//entity.«EXPAND template::CommonFieldUtil::setterName FOR this»(«name.toFirstLower()».getValue());
  «ENDIF-»
«ENDDEFINE»



«DEFINE getLocales FOR Project -»«FOREACH this.languages AS lang SEPARATOR ','»"«lang.isoCode.toLowerCase()»"«ENDFOREACH»«ENDDEFINE»




«REM» -------------------------- RelationField Hierarchical Filtering behavior  -------------------- «ENDREM»

«REM»«ENDREM»
«DEFINE onFieldValueChangeHierarchicalFilterCall FOR FieldEntity-»«ENDDEFINE» 
«DEFINE onFieldValueChangeHierarchicalFilterCall FOR RelationFieldEntity-»
	«IF this.relationHierarchicalFilter!=null && this.relationHierarchicalFilter.size==2 -»
	«IF !(cardinality == 1 && getOppositeCardinality(this)==1) && !(cardinality != 1 && getOppositeCardinality(this)==1 && oppositeRelationField!=null) -»
		/* «name» list content depends on the value of field «this.relationHierarchicalFilter.get(0).name» */
		if (source.equals(«this.relationHierarchicalFilter.get(0).name.toFirstLower()»)) {
			«IF (cardinality==-1 || cardinality>1) && this.relationHierarchicalFilter.get(0).cardinality==1-»
			«name.toFirstLower()».emptyList();
			«ELSEIF cardinality == 1-»
			clear«name.toFirstUpper()»Widget();
			«ENDIF -»
			get«name.toFirstUpper()»FilteredBy«this.relationHierarchicalFilter.get(0).name.toFirstUpper()»(«this.relationHierarchicalFilter.get(0).name.toFirstLower()».getValue());		
		}		
	«ENDIF -»
	«ENDIF -»
«ENDDEFINE»


«REM»«ENDREM»
«DEFINE populateEntityHierarchicalFilterCall FOR FieldEntity-»«ENDDEFINE» 
«DEFINE populateEntityHierarchicalFilterCall FOR RelationFieldEntity-»
	«IF this.relationHierarchicalFilter!=null && this.relationHierarchicalFilter.size==2 -»
	«IF !(cardinality == 1 && getOppositeCardinality(this)==1) && !(cardinality != 1 && getOppositeCardinality(this)==1 && oppositeRelationField!=null) -»	
		get«name.toFirstUpper()»FilteredBy«this.relationHierarchicalFilter.get(0).name.toFirstUpper()»(result.«EXPAND template::CommonFieldUtil::getterName FOR this.relationHierarchicalFilter.get(0)»());		
	«ENDIF -»
	«ENDIF -»
«ENDDEFINE» 

«REM»«ENDREM»
«DEFINE setRelationFieldHierarchicalFilterBehavior FOR FieldEntity»«ENDDEFINE» 
«DEFINE setRelationFieldHierarchicalFilterBehavior FOR RelationFieldEntity»
	«IF this.relationHierarchicalFilter!=null && this.relationHierarchicalFilter.size==2 -»
		«IF this.relationHierarchicalFilter.get(0).cardinality == 1 -» «REM» filtered by field with card = 1 «ENDREM»
			«IF cardinality == 1-» «REM» filtered field has card = 1 «ENDREM»
				«IF getOppositeCardinality(this)!=1 -»
			/**
			 * Filters the content of the RelationField «name» by the value of 
			 * the RelationField «this.relationHierarchicalFilter.get(0).name»
			 * @param «this.relationHierarchicalFilter.get(0).name.toFirstLower()» the value of 
			 * the RelationField «this.relationHierarchicalFilter.get(0).name» 
			 */
			private void get«name.toFirstUpper()»FilteredBy«this.relationHierarchicalFilter.get(0).name.toFirstUpper()»(«this.relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()») {
					
				if (p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()»!=null) {
					ImogJunction criterion = new ImogConjunction();
		
					BasicCriteria criteria = new BasicCriteria();
					criteria.setOperation(CriteriaConstants.RELATIONFIELD_OPERATOR_EQUAL);
					criteria.setValue(p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()».getId());
					criteria.setField("«EXPAND template::CommonFieldUtil::propertyName FOR this.relationHierarchicalFilter.get(1)».id");
					criterion.add(criteria);
					
					«name.toFirstLower()».setFilterParameters(criterion);
				}
				else
					«name.toFirstLower()».setFilterParameters(null);
			}			
				«ENDIF-»
			«ELSE-» «REM» filtered field has card = n «ENDREM»
				«REM»«IF !(getOppositeCardinality(this)==1 && oppositeRelationField!=null) -»«ENDREM»
			/**
			 * Filters the content of the RelationField «name» by the value of 
			 * the RelationField «this.relationHierarchicalFilter.get(0).name»
			 * @param «this.relationHierarchicalFilter.get(0).name.toFirstLower()» the value of 
			 * the RelationField «this.relationHierarchicalFilter.get(0).name» 
			 */
			private void get«name.toFirstUpper()»FilteredBy«this.relationHierarchicalFilter.get(0).name.toFirstUpper()»(«this.relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()») {
				
				if (p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()»!=null) {
					
					ImogJunction criterion = new ImogConjunction();
		
					BasicCriteria criteria = new BasicCriteria();
					criteria.setOperation(CriteriaConstants.RELATIONFIELD_OPERATOR_EQUAL);
					criteria.setValue(p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()».getId());
					criteria.setField("«EXPAND template::CommonFieldUtil::propertyName FOR this.relationHierarchicalFilter.get(1)».id");
					criterion.add(criteria);
					
					«name.toFirstLower()»SelectionBox.setFilterParameters(criterion);		
				} 
				else
					«name.toFirstLower()»SelectionBox.setFilterParameters(null);
			}		
				«REM» «ENDIF-»«ENDREM»
			«ENDIF-»		
		
		«ELSE -» «REM» filtered by field with card = n «ENDREM»
		
			«IF cardinality == 1-» «REM» filtered field has card = 1 «ENDREM»
				«IF getOppositeCardinality(this)!=1 -»				
			/**
			 * Filters the content of the RelationField «name» by the values of 
			 * the RelationField «this.relationHierarchicalFilter.get(0).name»
			 * @param «this.relationHierarchicalFilter.get(0).name.toFirstLower()» the values of 
			 * the RelationField «this.relationHierarchicalFilter.get(0).name» 
			 */
			private void get«name.toFirstUpper()»FilteredBy«this.relationHierarchicalFilter.get(0).name.toFirstUpper()»(Set<«this.relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()») {
							
				// check existing values in field according to criterias
				«this.entity.name.toFirstUpper()» existing = «name.toFirstLower()».getValue();	

				boolean isPartOf= false;
				if(existing!=null && existing.«EXPAND template::CommonFieldUtil::getterName FOR this.relationHierarchicalFilter.get(1)»()!=null) {
					for(«this.relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» filter:p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()») {
						if (existing.«EXPAND template::CommonFieldUtil::getterName FOR this.relationHierarchicalFilter.get(1)»().getId().equals(filter.getId())) {
							isPartOf = true;
							break;
						}
					}
				}
				if(!isPartOf)
					clear«name.toFirstUpper()»Widget();
			
				// filter values in selection box
				if (p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()» != null) {
					ImogJunction criterion = new ImogDisjunction();
					
					for(«this.relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» filter:p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()») {
		
						BasicCriteria criteria = new BasicCriteria();
						criteria.setOperation(CriteriaConstants.RELATIONFIELD_OPERATOR_EQUAL);
						criteria.setValue(filter.getId());
						criteria.setField("«EXPAND template::CommonFieldUtil::propertyName FOR this.relationHierarchicalFilter.get(1)».id");
						criterion.add(criteria);
					}			
					«entity.name.toFirstUpper()»ServiceFacade.getInstance().list«entity.name.toFirstUpper()»(0, -1, criterion, null, true, new Populate«name.toFirstUpper()»With«entity.name.toFirstUpper()»());
				}				
			}							
				«ENDIF-»
			«ELSE-» «REM» filtered field has card = n «ENDREM»
				«IF !(getOppositeCardinality(this)==1 && oppositeRelationField!=null) -»
			/**
			 * Filters the content of the RelationField «name» by the values of 
			 * the RelationField «this.relationHierarchicalFilter.get(0).name»
			 * @param «this.relationHierarchicalFilter.get(0).name.toFirstLower()» the values of 
			 * the RelationField «this.relationHierarchicalFilter.get(0).name» 
			 */
			private void get«name.toFirstUpper()»FilteredBy«this.relationHierarchicalFilter.get(0).name.toFirstUpper()»(Set<«this.relationHierarchicalFilter.get(0).entity.name.toFirstUpper()»> p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()») {
							
				// check existing values in field according to criterias
				Set<«this.entity.name.toFirstUpper()»> existings = «name.toFirstLower()».getValue();	
				for («this.entity.name.toFirstUpper()» existing:existings) {
					boolean isPartOf= false;
					if(existing.«EXPAND template::CommonFieldUtil::getterName FOR this.relationHierarchicalFilter.get(1)»()!=null) {
						for(«this.relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» filter:p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()») {
							if (existing.«EXPAND template::CommonFieldUtil::getterName FOR this.relationHierarchicalFilter.get(1)»().getId().equals(filter.getId())) {
								isPartOf = true;
								break;
							}
						}
					}
					if(!isPartOf)
						«name.toFirstLower()».removeValue(existing);
				}
				
				// filter values in selection box
				«name.toFirstLower()»SelectionBox.setFilterParameters(null);
				if (p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()» != null) {
					ImogJunction criterion = new ImogDisjunction();
					
					for(«this.relationHierarchicalFilter.get(0).entity.name.toFirstUpper()» filter:p«this.relationHierarchicalFilter.get(0).name.toFirstUpper()») {
		
						BasicCriteria criteria = new BasicCriteria();
						criteria.setOperation(CriteriaConstants.RELATIONFIELD_OPERATOR_EQUAL);
						criteria.setValue(filter.getId());
						criteria.setField("«EXPAND template::CommonFieldUtil::propertyName FOR this.relationHierarchicalFilter.get(1)».id");
						criterion.add(criteria);
					}			
					«name.toFirstLower()»SelectionBox.setFilterParameters(criterion);
				}				
			}		
				«ENDIF-»
			«ENDIF-»						
		«ENDIF -»
	«ENDIF-»
«ENDDEFINE»
«REM» --------------------------------------------------------------------------- «ENDREM»



«REM» -------------------------- AOP anchor -------------------- «ENDREM»

«REM» Anchor for computed field function «ENDREM»
«DEFINE computeFunction FOR FieldEntity»«ENDDEFINE»

«REM» Specific methods set by AOP «ENDREM»
«DEFINE specificMethods FOR CardEntity»«ENDDEFINE»