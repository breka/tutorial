«IMPORT core»
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR CardEntity»
«FILE projectName.toLowerCase()+ "/client/entity/" + this.name.toFirstUpper() + "ListComposite.java"»
package org.imogene.«projectName.toLowerCase()».client.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Command;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTMLTable.Cell;

import org.imogene.gwt.widgets.client.dynaTable.ColumnHeader;
import org.imogene.gwt.widgets.client.dynaTable.DynaTableDataProvider;
import org.imogene.gwt.widgets.client.dynaTable.DynaTableWidget;

import org.imogene.«projectName.toLowerCase()».client.AccessManager;
import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;
import org.imogene.«projectName.toLowerCase()».client.remote.«this.name.toFirstUpper()»ServiceFacade;
import org.imogene.web.gwt.client.i18n.BaseNLS;

/**
 * Composite that displays the list of «this.name.toFirstUpper()» entities
 * @author MEDES-IMPS
 */
public class «this.name.toFirstUpper()»ListComposite extends Composite implements ClickHandler {

	private DynaTableWidget dynaTable;
	
	/* key=command label, value=command */
	private Map<String, Command> authorizedCommands = new HashMap<String, Command>();	


	/**
	 * Creates the composite that 
	 * displays entities in a table widget.
	 */
	public «name.toFirstUpper()»ListComposite() {
		this(new «name.toFirstUpper()»DataProvider());
	}

	/**
	 * Creates the composite that 
	 * displays entities in a table widget.
	 * @param provider The data provider
	 */
	public «name.toFirstUpper()»ListComposite(DynaTableDataProvider provider) {
	
		/* add allowed actions for list composite */
		if (AccessManager.canEditForm("«name.toLowerCase()»")) {		
			if (AccessManager.canDelete())
				authorizedCommands.put(BaseNLS.constants().button_delete(), createDeleteCommand());					
			authorizedCommands.put(BaseNLS.constants().button_create(), createCreateCommand());
		}
		
		/* manage column access */
		List<String[]> columnList = new Vector<String[]>();	
		
		«FOREACH columnFields AS c -»
		if (AccessManager.canReadGroup("«name.toLowerCase()».«c.parentGroup.name.toLowerCase()»")) {
			String[] columnItem = {NLS.constants().«name.toFirstLower()»_field_«c.name.toFirstLower()»(),"«EXPAND template::CommonFieldUtil::propertyName FOR c»"};
			columnList.add(columnItem);
		}
		«ENDFOREACH -»					
	
		/* create list table */
		ColumnHeader[] columns = new ColumnHeader[columnList.size()];
		String[] styles = new String[columnList.size()];
		
		int i = 0;
		for(String[] column:columnList) {
			columns[i] = new ColumnHeader(column[0], column[1]);
			styles[i] = "style1";	
			i++;
		}		
		
		/* IF YOU WANT TO USE AN AUTOREFRESH TABLE */
		/* dynaTable = new AutoRefreshDynaTableWidget(new «name.toFirstUpper()»DataProvider(), columns, styles, 15);
		   dynaTable.setResfreshPeriod(30000); */
		dynaTable = new DynaTableWidget(provider, columns,
				styles, 20);
		dynaTable.addClickHandler(this);
		initWidget(dynaTable);
		
	}
	
	/**
	 * Get the possible commands for the list composite
	 * @return a list of commands (create/delete)
	 */
	public Map<String, Command> getCommands() {
		return authorizedCommands;
	}	

	/**
	 * Method called when the composite is loaded
	 * Refreshes the enclosed dynatable
	 */
	public void onLoad() {
		dynaTable.refresh();
	}
	
	/**
	 * Creates the Create action command for the entity
	 * @return the create command
	 */
	private Command createCreateCommand() {
		
		/* action that enables to create an entity */
		Command command =  new Command() {
			public void execute() {
				History.newItem("new/«name.toLowerCase()»");
			}
		};		
		return command;		
	}	
	
	/**
	 * Creates the Delete action command for the entity
	 * @return the delete command
	 */	
	private Command createDeleteCommand() {	
		
		/* action that enables to delete selected entities */
		Command command =  new Command() {
			public void execute() {
				Set<String> selected = getSelectedRowIds();

				boolean delete;
				if (selected.size() == 0)
					delete = false;
				else if (selected.size() == 1)
					delete = Window.confirm(BaseNLS.constants().confirmation_delete());
				else
					delete = Window.confirm(BaseNLS.constants()
							.confirmation_delete_several1()
							+ selected.size()
							+ BaseNLS.constants().confirmation_delete_several2());

				if (delete) {
					«name.toFirstUpper()»ServiceFacade.getInstance().delete(
							new ArrayList<String>(selected),
							new DeleteCallback());
				}
			}
		};		
		return command;
	}	
	

	@Override
	public void onClick(ClickEvent event) {		
		Cell cell = dynaTable.getCellForEvent(event);
		if ((cell.getRowIndex() != 0 && cell.getCellIndex() != 0) || !dynaTable.isCheckable()) {
			String entityId = (String)dynaTable.getIds().get(cell.getRowIndex() - 1);
			History.newItem("view/«name.toLowerCase()»/"+entityId, true);			
		} else {
			if (cell.getRowIndex() == 0) { // first row == column headers
				dynaTable.setSortColumn(cell.getCellIndex());
				refreshTable();
			}
		}
	}		

	/**
	 * Refreshes the enclosed table
	 */
	public void refreshTable() {
		dynaTable.refresh();
	}

	/**
	 * Returns the selected entities IDs 
	 * @return Set of the selected entities IDs
	 */
	public Set<String> getSelectedRowIds() {
		return dynaTable.getSelectedRowIds();
	}

	/**
	 * Unselects the row id that presents the 
	 * entity with the specified ID.
	 *@param id The entity ID
	 */
	public void unSelect(String id) {
		dynaTable.unSelect(id);
	}
	
	
	/**
	 * Action executed when the delete action remote call has returned.
	 * @author MEDES-IMPS
	 */
	private class DeleteCallback implements AsyncCallback<List<String>> {

		public void onFailure(Throwable caught) {
			Window.alert("Error when connecting to the server");
		}

		public void onSuccess(List<String> result) {
			refreshTable();
			for (String id: result) {
				unSelect(id);
			}
		}
	}	

}
«ENDFILE»
«ENDDEFINE»