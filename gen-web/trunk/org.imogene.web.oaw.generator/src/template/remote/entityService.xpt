«IMPORT core»
«EXTENSION template::CommonFieldUtilExt» 
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR CardEntity»
«FILE projectName.toLowerCase()+"/client/remote/"+this.name.toFirstUpper() + "Service.java"»
package org.imogene.«projectName.toLowerCase()».client.remote;

import java.util.List;

import com.google.gwt.user.client.rpc.RemoteService;

import org.imogene.web.gwt.common.criteria.ImogJunction;
import org.imogene.«projectName.toLowerCase()».client.entity.«name.toFirstUpper()»;
«FOREACH groups.fields AS f -»
«EXPAND importsForRelation(projectName) FOR f -»
«ENDFOREACH -»

/**
 * «name.toFirstUpper()» Services
 * @author MEDES-IMPS
 */
public interface «name.toFirstUpper()»Service extends RemoteService {

	
	/**
	 * Loads the entity with the specified id
	 * @param entityId the entity id
	 * @return the entity or null
	 */
	public «name.toFirstUpper()» get«name.toFirstUpper()»(String entityId);	

	/**
	 * Lists all the entities of type «name.toFirstUpper()»
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»();

	/**
	 * Lists the entities of type «name.toFirstUpper()»
	 * @param i first index to retrieve
	 * @param j nb of items to retrieve
	 * @param sortProperty the property used to sort the collection
	 * @param sortOrder true for an ascendant sort
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»(int i, int j, String sortProperty, boolean sortOrder);
	
	/**
	 * Lists the entities of type «name.toFirstUpper()»
	 * @param i first index to retrieve
	 * @param j nb of items to retrieve
	 * @param criterion request criteria
	 * @param sortProperty the property used to sort the collection
	 * @param sortOrder true for an ascendant sort
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»(int i, int j, ImogJunction criterion, String property, boolean sortOrder);
	
	/**
	 * Lists the non affected entities of type «name.toFirstUpper()»	
	 * @param property the property which is not affected
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> listNonAffected«name.toFirstUpper()»(String property);
	
	/**
	 * Lists the non affected entities of type «name.toFirstUpper()»	
	 * @param i first index to retrieve
	 * @param j nb of items to retrieve
	 * @param criterion request criteria
	 * @param sortProperty the property used to sort the collection
	 * @param asc true for an ascendant sort
	 * @param property the property which is not affected
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> listNonAffected«name.toFirstUpper()»(int i, int j, ImogJunction criterion, String sortProperty, boolean asc, String property);
	
	/**
	 * Lists the non affected entities of type «name.toFirstUpper()»	
	 * @param i first index to retrieve
	 * @param j nb of items to retrieve
	 * @param sortProperty the property used to sort the collection
	 * @param asc true for an ascendant sort
	 * @param property the property which is not affected
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> listNonAffected«name.toFirstUpper()»(int i, int j, String sortProperty, boolean asc, String property);

	
	/**
	 * Counts the number of «name.toFirstLower()» entities in the database
	 * @return the count
	 */
	public int count«name.toFirstUpper()»();
	
	/**
	 * Counts the number of «name.toFirstLower()» entities in the database, 
	 * that matches the criteria
	 * @return the count
	 */
	public int count«name.toFirstUpper()»(ImogJunction criterion);
	
	/**
	 * Counts the number of non affected «name.toFirstLower()» entities in the database
	 * @param property the property which is not affected
	 * @param criterion request criteria
	 * @return the count
	 */
	public int countNonAffected«name.toFirstUpper()»(String property, ImogJunction criterion);
	
	/**
	 * Counts the number of non affected «name.toFirstLower()» entities in the database
	 * @param property the property which is not affected
	 * @return the count
	 */
	public int countNonAffected«name.toFirstUpper()»(String property);	
	
	
	/**
	 * Saves or updates the entity
	 * @param entity the entity to save or update
	 * @param isNew true if it is a new entity added for the first time.
	 */
	public void saveOrUpdate(«name.toFirstUpper()» entity, boolean isNew);
	
	/**
	 * Saves or updates the entity without modifing the upload date
	 * @param entity the entity to save or update
	 * @param isNew true if it is a new entity added for the first time.
	 */
	public void saveOrUpdateShadow(«name.toFirstUpper()» entity, boolean isNew);
	
	/**
	 * Removes the specified entity from the database 
	 * @param entity The entity to delete
	 */
	public void delete(«name.toFirstUpper()» entity);

	/**
	 * Deletes a group of entities identified by their IDs
	 * @param ids Entities to delete IDs
	 * @return The list of deleted entities IDs
	 */
	public List<String> delete(List<String> ids);	
	
	/* relation dependences */
	«FOREACH groups.fields AS f -»
		«EXPAND methodsForRelation(name.toFirstUpper()) FOR f -»
	«ENDFOREACH -»
	
	«EXPAND specificPart FOR this»
}
«ENDFILE»
«ENDDEFINE»

«REM»
	Imports implied by the relation fields «ENDREM»
«DEFINE importsForRelation(String projectName) FOR FieldEntity»«ENDDEFINE»
«DEFINE importsForRelation(String projectName) FOR RelationFieldEntity»
«IF cardinality==-1 || cardinality>1»
import org.imogene.«projectName.toLowerCase()».client.entity.«entity.name.toFirstUpper()»;
«ENDIF»
«ENDDEFINE»

«REM»
	DAO methods implied by the relation fields «ENDREM»
«DEFINE methodsForRelation(String parentEntityType) FOR FieldEntity»«ENDDEFINE»
«DEFINE methodsForRelation(String parentEntityType) FOR RelationFieldEntity»
«IF cardinality==-1 || cardinality>1 -»
«IF getOppositeCardinality(this)==1 »
/**
 * Lists the associated «entity.name.toFirstUpper()», 
 * on the field «name.toFirstLower()»
 * @param parent the parent entity
 * @return the list of the associated entities
 */
public List<«entity.name.toFirstUpper()»> list«name.toFirstUpper()»(«parentEntityType» parent);
«ELSE -»
/**
 * Lists the associated «entity.name.toFirstUpper()», 
 * on the field «name.toFirstLower()»
 * @param parentId the parent entity id
 * @return the list of the associated entities
 */
public List<«entity.name.toFirstUpper()»> list«name.toFirstUpper()»(String parentId);
«ENDIF-»
«ENDIF -»
«ENDDEFINE»

«DEFINE specificPart FOR CardEntity»«ENDDEFINE»