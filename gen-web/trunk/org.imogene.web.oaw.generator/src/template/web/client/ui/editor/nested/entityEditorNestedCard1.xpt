«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 
«EXTENSION template::CommonFieldUtilExt» 


«DEFINE generate(String packageName, String projectName) FOR CardEntity»
«IF nestedFields!=null && !nestedFields.isEmpty-»
«FILE projectName.toLowerCase()+ "/client/ui/editor/nested/" + this.name.toFirstUpper() + "EditorNestedForm.java"»
«LET (Project)this.eContainer AS project -»
package org.imogene.«projectName.toLowerCase()».client.ui.editor.nested;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.imogene.«projectName.toLowerCase()».client.AccessManager;
import org.imogene.«projectName.toLowerCase()».client.«projectName.toFirstUpper()»Renderer;
import org.imogene.«projectName.toLowerCase()».shared.«projectName.toFirstUpper()»RequestFactory;
import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;
import org.imogene.«projectName.toLowerCase()».client.ui.field.ImogLocalizedTextBox;
import org.imogene.«projectName.toLowerCase()».client.ui.field.ImogLocalizedTextAreaBox;
import org.imogene.«projectName.toLowerCase()».shared.constants.«projectName.toFirstUpper()»EnumConstants;
import org.imogene.«projectName.toLowerCase()».shared.proxy.«name.toFirstUpper()»Proxy;

import org.imogene.web.client.event.FieldValueChangeEvent;
import org.imogene.web.client.i18n.BaseNLS;
import org.imogene.web.client.ui.field.*;
import org.imogene.web.client.ui.field.binary.*;
import org.imogene.web.client.ui.field.group.FieldGroupPanel;
import org.imogene.web.client.ui.field.relation.multi.ImogMultiRelationBox;
import org.imogene.web.client.ui.field.relation.single.ImogSingleRelationBox;
import org.imogene.web.client.ui.panel.RelationPopupPanel;
import org.imogene.web.client.ui.panel.WrapperPanel;
import org.imogene.web.client.util.NumericUtil;
import org.imogene.web.client.util.DateUtil;

import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.Editor;
import com.google.gwt.editor.client.EditorDelegate;
import com.google.gwt.editor.client.EditorError;
import com.google.gwt.editor.client.HasEditorDelegate;
import com.google.gwt.editor.client.HasEditorErrors;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.client.ui.CheckBox;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.Widget;
import com.google.web.bindery.event.shared.HandlerRegistration;

«FOREACH nestedFields AS e -»
«EXPAND template::web::client::ui::editor::entityEditor::importsForRelation(projectName) FOR e-»
«ENDFOREACH -»

/**
 * Editor that provides the UI components that allow a «name.toFirstUpper()»Proxy to be viewed and edited
 * as a Nested Form
 * @author MEDES-IMPS
 */
public class «name.toFirstUpper()»EditorNestedForm extends Composite implements Editor<«name.toFirstUpper()»Proxy>, HasEditorDelegate<«name.toFirstUpper()»Proxy>, HasEditorErrors<«name.toFirstUpper()»Proxy> {

	interface Binder extends UiBinder<Widget, «name.toFirstUpper()»EditorNestedForm> {
	}

	private static final Binder BINDER = GWT.create(Binder.class);

	protected final «projectName.toFirstUpper()»RequestFactory requestFactory;	
	private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>();
	private EditorDelegate<«name.toFirstUpper()»Proxy> delegate;
	
	private boolean hideButtons = false;
	private int index = 0;
	private boolean isNewProxy = false;
	private boolean isClearImageActive = false;
	«IF isTranslatableFieldPresent(nestedFields)-»
	private List<String> locales = Arrays.asList(«EXPAND template::web::client::ui::editor::entityEditor::getLocales FOR project-»);	
	«ENDIF -»
	
	@UiField
	Image clearImage;
	
	@UiField @Ignore FieldGroupPanel «name.toFirstLower()»Section;	
	«FOREACH nestedFields AS f -»
	«EXPAND template::web::WebFieldUtil::formFieldTypeDec FOR f» «EXPAND template::web::WebFieldUtil::formFieldType FOR f» «EXPAND template::CommonFieldUtil::propertyName FOR f»;
	«EXPAND template::web::client::ui::editor::entityEditor::setDataProvider FOR f-»
	«ENDFOREACH -»			

	

	/**
	 * Constructor
	 * @param factory the application request factory
	 * @param hideButtons true if the relation field buttons shall be hidden
	 */
	public «name.toFirstUpper()»EditorNestedForm(«projectName.toFirstUpper()»RequestFactory factory, boolean hideButtons) {
		
		this.requestFactory = factory;
		this.hideButtons = hideButtons;
		
		«IF isSimpleRelationFieldPresent(nestedFields) || isMultiRelationFieldPresent(nestedFields) -»
		setRelationFields();
		«ENDIF -»		
					
		«EXPAND template::web::client::ui::editor::entityEditor::instanciateField FOREACH nestedFields -»			
					
		initWidget(BINDER.createAndBindUi(this));
		
		clearImage.setTitle(BaseNLS.constants().button_remove());
		clearImage.setUrl(GWT.getModuleBaseURL()+ "images/relation_remove.png");
			
		properties();
	}

	/**
	 * Constructor
	 * @param factory the application request factory
	 */
	public «name.toFirstUpper()»EditorNestedForm(«projectName.toFirstUpper()»RequestFactory factory) {		
		this(factory, false);
	}
	
	/**
	 * Sets the properties of the fields
	 */	
	public void properties() {
	
		«name.toFirstLower()»Section.setGroupTitle(NLS.constants().«name.toFirstLower()»_name());
		«name.toFirstLower()»Section.setLabelFontSize("12px");

		«FOREACH nestedFields AS f -»
		«EXPAND template::web::client::ui::editor::entityEditor::setLabel FOR f-»
		«EXPAND template::web::client::ui::editor::entityEditor::configureFieldOptions(projectName) FOR f-»
		«IF f.hidden==true-»
		// hidden field
		«EXPAND template::CommonFieldUtil::propertyName FOR f».setVisible(false);
		«ENDIF -»
		«IF hasChildsWithVisibilityDependent(f, nestedFields)==true-»
		// the value of «EXPAND template::CommonFieldUtil::propertyName FOR f» affects the visibility of other fields
		«EXPAND template::CommonFieldUtil::propertyName FOR f».notifyChanges(requestFactory.getEventBus());
		«ENDIF -»
		«IF f.fieldDependentVisibility!=null && !f.fieldDependentVisibility.isEmpty && !f.hidden-»		
		// the visibility of «EXPAND template::CommonFieldUtil::propertyName FOR f» depends on the value of other fields
		«EXPAND template::CommonFieldUtil::propertyName FOR f».addStyleName("dependentVisibility");
		«ENDIF -»		
		«ENDFOREACH -»	
	}	
		
	
	«IF isSimpleRelationFieldPresent(nestedFields) || isMultiRelationFieldPresent(nestedFields) -»
	/**
	 * Configures the widgets that manage relation fields
	 */	
	public void setRelationFields() {
	
		«EXPAND template::web::client::ui::editor::entityEditor::setRelationFields(projectName) FOREACH nestedFields»
	}
	«ENDIF -»		

	/**
	 * Sets the edition mode
	 * @param isEdited true to enable the edition of the form
	 */
	public void setEdited(boolean isEdited) {
	
		if(isClearImageActive)
			clearImage.setVisible(isEdited);
		else
			clearImage.setVisible(false);
	
		if(isEdited)
			setFieldEditAccess();
		else
			setFieldReadAccess();	
	
		«EXPAND template::web::client::ui::editor::entityEditor::setEditable FOREACH nestedFields -»	
	}
	
	/**
	 * Configures the visibility of the fields 
	 * in view mode depending on the user privileges
	 */
	public void setFieldReadAccess() {
	
		«FOREACH nestedFields AS f»
		if (!AccessManager.canReadGroup("«name.toLowerCase()».«f.parentGroup.name.toLowerCase()»"))		
			«EXPAND template::CommonFieldUtil::propertyName FOR f».setVisible(false);
		«ENDFOREACH»		
	}
	
	/**
	 * Configures the visibility of the fields 
	 * in edit mode depending on the user privileges
	 */
	public void setFieldEditAccess() {
	
		«FOREACH nestedFields AS f»
		if (!AccessManager.canEditGroup("«name.toLowerCase()».«f.parentGroup.name.toLowerCase()»"))	
			«EXPAND template::CommonFieldUtil::propertyName FOR f».setVisible(false);
		«ENDFOREACH»	
	}	
	
	/**
	 * Manages editor updates when a field value changes
	 */
	private void setFieldValueChangeHandler() {
		
		registrations.add(requestFactory.getEventBus().addHandler(FieldValueChangeEvent.TYPE,
				new FieldValueChangeEvent.Handler() {
					@Override
					public void onValueChange(ImogField<?> field) {
						
						// field dependent visibility management
						computeVisibility(field, false);
						
						«FOREACH nestedFields AS f-»
							«EXPAND template::web::client::ui::editor::entityEditor::onFieldValueChangeHierarchicalFilterCall FOR f -»
						«ENDFOREACH-»						
					}
				}));
	}	
	
	/**
	 * Computes the field visibility
	 */
	public void computeVisibility(ImogField<?> source, boolean allValidation){
		«EXPAND template::web::client::ui::editor::entityEditor::fieldDependantVisibility FOREACH nestedFields -»
	}
	
	«FOREACH nestedFields AS f-»
		«EXPAND template::web::client::ui::editor::entityEditor::setRelationFieldHierarchicalFilterBehavior FOR f -»
	«ENDFOREACH»
	
	public void setDeleteClickHandler(ClickHandler handler){
		//registrations.add(clearImage.addClickHandler(handler));
		clearImage.addClickHandler(handler);
		isClearImageActive = true;
	}
	
	«EXPAND template::web::client::ui::editor::nested::entityEditorNestedCardN::setterForRelation FOREACH nestedFields-»		
	
	
	«IF isSimpleRelationFieldPresent(nestedFields) || isMultiRelationFieldPresent(nestedFields) -»
	/**
	 * Configures the handlers of the widgets that manage relation fields
	 */	
	private void setRelationHandlers() {
	
		«EXPAND template::web::client::ui::editor::entityEditor::setHandlers(projectName) FOREACH nestedFields»
	}
	«ENDIF -»
	
	public void setIndex(int newIndex) {
		this.index = newIndex;
	}

	public int getIndex() {
		return index;
	}
	
	public boolean isNewProxy() {
		return isNewProxy;
	}

	public void setNewProxy(boolean isNewProxy) {
		this.isNewProxy = isNewProxy;
	}
	
	«IF isBinaryFieldPresent(nestedFields)-»
	/**
	 * Checks if a binary is being uploaded by the editor
	 * @return true if the editor is uploading a binary
	 */
	public boolean isUploading() {
		boolean result = false;
		«EXPAND template::web::client::ui::editor::entityEditor::uploadingTest FOREACH nestedFields -»
		return result;
	}	
	«ENDIF-»	

	/**
	 * Validate fields values
	 */
	public void validateFields() {
	
		«FOREACH nestedFields AS f-»
			«EXPAND template::web::client::ui::editor::entityEditor::requiredField FOR f -»
			«EXPAND template::web::client::ui::editor::entityEditor::validationAnnotation FOR f -»		
		«ENDFOREACH-»
	}

	@Override
	public void setDelegate(EditorDelegate<«name.toFirstUpper()»Proxy> delegate) {
		this.delegate = delegate;
	}

	@Override
	public void showErrors(List<EditorError> errors) {
		if(errors!=null && errors.size()>0) {
		
			«EXPAND template::web::client::ui::editor::entityEditor::setErrorList FOREACH nestedFields -»
			
			for (EditorError error : errors) {			
				Object userData = error.getUserData();
				if(userData!=null && userData instanceof String) {				
					String field = (String)userData;
					
					«EXPAND template::web::client::ui::editor::entityEditor::addError FOREACH nestedFields -»					
				}
			}		
			«EXPAND template::web::client::ui::editor::entityEditor::showErrors FOREACH nestedFields -»
		}
	}

	@Override
	protected void onUnload() {
		for(HandlerRegistration r : registrations)
			r.removeHandler();
		registrations.clear();
		super.onUnload();
	}
	
	@Override
	protected void onLoad() {
		«IF isSimpleRelationFieldPresent(nestedFields) || isMultiRelationFieldPresent(nestedFields) -»
		setRelationHandlers();
		«ENDIF -»
		setFieldValueChangeHandler();
		super.onLoad();
	}
}
«ENDLET-»
«ENDFILE»
«ENDIF-»
«ENDDEFINE»