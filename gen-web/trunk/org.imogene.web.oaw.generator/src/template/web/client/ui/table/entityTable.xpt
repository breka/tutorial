«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 


«DEFINE generate(String packageName, String projectName, String applicationType) FOR CardEntity»
«FILE projectName.toLowerCase()+ "/client/ui/table/" + this.name.toFirstUpper() + "DynaTable.java"»
«LET "admin" AS adminType-»
package org.imogene.«projectName.toLowerCase()».client.ui.table;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.imogene.«projectName.toLowerCase()».client.AccessManager;
import org.imogene.«projectName.toLowerCase()».client.event.create.Create«name.toFirstUpper()»Event;
import org.imogene.«projectName.toLowerCase()».client.event.list.List«name.toFirstUpper()»Event;
import org.imogene.«projectName.toLowerCase()».client.event.view.View«name.toFirstUpper()»Event;
import org.imogene.«projectName.toLowerCase()».client.«projectName.toFirstUpper()»Renderer;
import org.imogene.«projectName.toLowerCase()».client.ui.filter.«name.toFirstUpper()»FilterPanel;
import org.imogene.«projectName.toLowerCase()».shared.«projectName.toFirstUpper()»RequestFactory;
import org.imogene.«projectName.toLowerCase()».shared.proxy.«name.toFirstUpper()»Proxy;
import org.imogene.«projectName.toLowerCase()».shared.proxy.LocalizedTextProxy;
import org.imogene.«projectName.toLowerCase()».shared.request.«name.toFirstUpper()»Request;
import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;
import org.imogene.web.client.event.SelectionChangedInTableEvent;
import org.imogene.web.client.i18n.BaseNLS;
import org.imogene.web.client.ui.table.ImogBeanDataProvider;
import org.imogene.web.client.ui.table.ImogColumn;
import org.imogene.web.client.ui.table.ImogDynaTable;
import org.imogene.web.client.ui.table.filter.ImogFilterPanel;
import org.imogene.web.client.util.BooleanUtil;
import org.imogene.web.client.util.DateUtil;
import org.imogene.«projectName.toLowerCase()».shared.constants.«projectName.toFirstUpper()»BirtConstants;

import com.google.gwt.cell.client.TextCell;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.web.bindery.event.shared.EventBus;
import com.google.web.bindery.event.shared.HandlerRegistration;
import com.google.gwt.event.shared.GwtEvent;
import com.google.gwt.user.cellview.client.Column;
import com.google.gwt.user.client.Command;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.PushButton;
import com.google.web.bindery.requestfactory.shared.Receiver;
import com.google.web.bindery.requestfactory.shared.Request;
import com.google.web.bindery.requestfactory.shared.ServerFailure;
«IF applicationType.matches(adminType) && Actor.isAssignableFrom(metaType)-»
import org.imogene.admin.client.i18n.AdminNLS;
import org.imogene.web.client.util.ImogRoleUtil;
«ENDIF-»



/**
 * Composite that displays the list of «name.toFirstUpper()» entries
 * @author MEDES-IMPS
 */
public class «name.toFirstUpper()»DynaTable extends ImogDynaTable<«name.toFirstUpper()»Proxy> {

	private List<HandlerRegistration> registrations = new ArrayList<HandlerRegistration>();
	
	private PushButton deleteButton;

	public «name.toFirstUpper()»DynaTable(«projectName.toFirstUpper()»RequestFactory requestFactory,
			ImogBeanDataProvider<«name.toFirstUpper()»Proxy> provider,
			boolean checkBoxesVisible) {
		super(requestFactory, provider, checkBoxesVisible);
	}

	public ImogFilterPanel getFilterPanel() {
		ImogFilterPanel filterPanel = new «name.toFirstUpper()»FilterPanel();
		super.configureFilterPanel(filterPanel);
		return filterPanel;
	}

	/**
	 * 
	 */
	@Override
	protected void setColumns() {
	
		«FOREACH columnFields.union(mainFields) AS c-»
		if (AccessManager.canReadGroup("«name.toLowerCase()».«c.parentGroup.name.toLowerCase()»")) {		
			Column<«name.toFirstUpper()»Proxy, String> «c.name.toFirstLower()»Column = new «c.name.toFirstUpper()»Column();
			«c.name.toFirstLower()»Column.setSortable(true);
			table.addColumn(«c.name.toFirstLower()»Column, NLS.constants().«name.toFirstLower()»_field_s_«c.name.toFirstLower()»());			
		}
		«ENDFOREACH -»
		
		«IF applicationType.matches(adminType) && Actor.isAssignableFrom(metaType)-»
		if (ImogRoleUtil.isAdmin()) {
			Column<«name.toFirstUpper()»Proxy, String> loginColumn = new LoginColumn();
			loginColumn.setSortable(true);
			table.addColumn(loginColumn, AdminNLS.constants().imogActor_field_s_login());
		}
		«ENDIF-»
	}

	@Override
	protected GwtEvent<?> getViewEvent(«name.toFirstUpper()»Proxy value) {
		return new View«name.toFirstUpper()»Event(value.getId());
	}
	
	@Override
	protected String getDefaultSortProperty() {
		return "«EXPAND template::CommonFieldUtil::getFirstSortField FOR this»";
	}

	@Override
	protected boolean getDefaultSortPropertyOrder() {
		return «EXPAND template::CommonFieldUtil::getFirstSortFieldOrderDirection FOR this»;
	}	

	/**
	 * Creates the Create action command for the entity
	 * @return the create command
	 */
	public Command getCreateCommand() {
	
		if (AccessManager.canCreateForm("«name.toLowerCase()»") && AccessManager.canEditForm("«name.toLowerCase()»")) {
			Command command = new Command() {
				public void execute() {
					requestFactory.getEventBus().fireEvent(new Create«name.toFirstUpper()»Event());
				}
			};
			return command;
		} else
			return null;
	}

	/**
	 * Creates the Delete action command for the entity
	 * @return the delete command
	 */
	public PushButton getDeleteButton() {

		if (AccessManager.canDelete() && AccessManager.canEditForm("«name.toLowerCase()»")) {
			deleteButton = new PushButton(BaseNLS.constants().button_delete());
			deleteButton.setStyleName(imogResources.imogStyle().imogButton());
			deleteButton.addStyleName("Dynatable-Button");
			deleteButton.setVisible(false);
			return deleteButton;
		}
		
		return null;
	}
	
	/**
	 * Creates the Handlers linked to the delete button
	 */
	private void setDeleteButtonHandlers () {
		
		if (AccessManager.canDelete() && AccessManager.canEditForm("«name.toLowerCase()»")) {
			
			// Click handler
			registrations.add(deleteButton.addClickHandler(new ClickHandler() {
				@Override
				public void onClick(ClickEvent event) {
	
					Set<«name.toFirstUpper()»Proxy> selectedEntities = selectionModel.getSelectedSet();
	
					int count = selectedEntities.size();
					if (count > 0) {
	
						«projectName.toFirstUpper()»Renderer renderer = «projectName.toFirstUpper()»Renderer.get();
	
						StringBuffer msg = new StringBuffer();
						msg.append(BaseNLS.constants().confirmation_delete_several1() + " " + NLS.constants().«name.toFirstLower()»_name() + " " + BaseNLS.constants().confirmation_delete_several2() + ": ");
						int i = 0;
						for («name.toFirstUpper()»Proxy entity : selectedEntities) {
							if (count == 1 || i == count - 1)
								msg.append("'" + renderer.getDisplayValue(entity) + "' ?");
							else
								msg.append("'" + renderer.getDisplayValue(entity) + "', ");
							i = i + 1;
						}
	
						boolean toDelete = Window.confirm(msg.toString());
						if (toDelete) {
	
							Request<Void> deleteRequest = get«name.toFirstUpper()»Request().delete(selectedEntities);
							deleteRequest.fire(new Receiver<Void>() {
								@Override
								public void onSuccess(Void response) {
									//Window.alert("The selected «name.toFirstUpper()» entries have been deleted");
									requestFactory.getEventBus().fireEvent(new List«name.toFirstUpper()»Event());
								}
	
								@Override
								public void onFailure(ServerFailure error) {
									Window.alert("Error deleting the «name.toFirstUpper()» entries");
									super.onFailure(error);
								}
							});
						}
					}
	
				}
			}));
	
			// Selection changed handler	
			registrations.add(requestFactory.getEventBus().addHandler(
					SelectionChangedInTableEvent.TYPE,
					new SelectionChangedInTableEvent.Handler() {
						@Override
						public void noticeSelectionChange(int selectedItems) {
							if (selectedItems > 0)
								deleteButton.setVisible(true);
							else
								deleteButton.setVisible(false);
						}
					}));
		}		
	}	

	/**
	 * Creates the action command that enables to export the «name.toFirstUpper()»
	 * entries in a csv file
	 * @return the command
	 */
	public Command getCsvExportButton() {
			
		if (AccessManager.canExport()) {
			
			Command command = new Command() {
				public void execute() {
					
					String url = GWT.getHostPageBaseURL() 
							+ «projectName.toFirstUpper()»BirtConstants.«shortName.toUpperCase()»_CSV_KEY 
							+ "?" + «projectName.toFirstUpper()»BirtConstants.REPORT_NAME + "=«name.toFirstLower()»_csv"
							+ "&" + «projectName.toFirstUpper()»BirtConstants.REPORT_LOCALE + "=" + NLS.constants().locale()	
							+ "&" + «projectName.toFirstUpper()»BirtConstants.REPORT_FORMAT + "=" + «projectName.toFirstUpper()»BirtConstants.CSV;
					
					if(beanDataProvider.getSearchCriterions()!=null)
						url = url + getDataProviderCriteria();
									
					Window.open(url, "_blank", "");				
				}
			};
			return command;

		} else
			return null;
	}

	private «name.toFirstUpper()»Request get«name.toFirstUpper()»Request() {
		«projectName.toFirstUpper()»RequestFactory «projectName.toFirstLower()»RequestFactory = («projectName.toFirstUpper()»RequestFactory) requestFactory;
		return «projectName.toFirstLower()»RequestFactory.«name.toFirstLower()»Request();
	}

	@Override
	protected void onUnload() {
		for (HandlerRegistration r : registrations)
			r.removeHandler();
		registrations.clear();
		super.onUnload();
	}
	
	@Override
	protected void onLoad() {
		setDeleteButtonHandlers ();
		super.onLoad();
	}

	/**
	 * --------------------- * Internal classes * ----------------------
	 */
	 
		«FOREACH columnFields.union(mainFields) AS c»
	/**
	 * Column for field «c.name.toFirstUpper()»
	 * @author MEDES-IMPS
	 */
	private class «c.name.toFirstUpper()»Column extends ImogColumn<«name.toFirstUpper()»Proxy, String> {
		
		«EXPAND getRenderer(projectName) FOR c»
		
		public «c.name.toFirstUpper()»Column() {
			super(new TextCell());
		}

		@Override
		public String getValue(«name.toFirstUpper()»Proxy object) {
			String value = null;
			«EXPAND getColumnValue FOR c»
			return value;
		}

		public String getPropertyName() {		
			«EXPAND getLocalizedTextSortProperty((Project)this.eContainer) FOR c-»		
			return "«EXPAND template::CommonFieldUtil::propertyName FOR c-»";
		}
	}
		«ENDFOREACH -»	 
		
		«IF applicationType.matches(adminType) && Actor.isAssignableFrom(metaType)-»
		/**
		 * Column for field Login
		 * @author MEDES-IMPS
		 */
		private class LoginColumn extends ImogColumn<«name.toFirstUpper()»Proxy, String> {
	
			public LoginColumn() {
				super(new TextCell());
			}
	
			@Override
			public String getValue(«name.toFirstUpper()»Proxy object) {
				String value = null;
				if (object.getLogin() == null)
					value = "";
				else
					value = object.getLogin();
	
				return value;
			}
	
			public String getPropertyName() {
				return "login";
			}
		}
		«ENDIF-»

}
«ENDLET-»
«ENDFILE»
«ENDDEFINE»



«REM» Get the renderer for column «ENDREM»
«DEFINE getRenderer(String projectName) FOR FieldEntity-»«ENDDEFINE»
«DEFINE getRenderer(String projectName) FOR TextField-»
	«IF translatable -»
private «projectName.toFirstUpper()»Renderer renderer = «projectName.toFirstUpper()»Renderer.get();
	«ENDIF -»
«ENDDEFINE»
«DEFINE getRenderer(String projectName) FOR EnumField-»private «projectName.toFirstUpper()»Renderer renderer = «projectName.toFirstUpper()»Renderer.get();«ENDDEFINE»
«DEFINE getRenderer(String projectName) FOR RelationFieldEntity-»
	«IF cardinality == 1 -»
private «projectName.toFirstUpper()»Renderer renderer = «projectName.toFirstUpper()»Renderer.get();
	«ENDIF -»
«ENDDEFINE»


«REM» Get the renderer for localized text column «ENDREM»
«DEFINE getLocalizedTextSortProperty(Project p) FOR FieldEntity-»«ENDDEFINE»
«DEFINE getLocalizedTextSortProperty(Project p) FOR TextField-»
	«IF translatable-»	
			String locale = NLS.constants().locale();			
			«FOREACH p.languages AS l-»
			if (locale.equals("«l.isoCode»"))
				return "«EXPAND template::CommonFieldUtil::propertyName FOR this».«l.name.toFirstLower()»";			
			«ENDFOREACH-»
	«ENDIF-»
«ENDDEFINE»


«REM» Get value for column «ENDREM»
«DEFINE getColumnValue FOR FieldEntity-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = object.«EXPAND template::CommonFieldUtil::getterName FOR this»();
«ENDDEFINE»
«DEFINE getColumnValue FOR TextField-»
	«IF translatable-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = renderer.getLocalizedText(object.«EXPAND template::CommonFieldUtil::getterName FOR this»());
	«ELSE-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = object.«EXPAND template::CommonFieldUtil::getterName FOR this»();
	«ENDIF-»
«ENDDEFINE»
«DEFINE getColumnValue FOR IntegerField-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = object.«EXPAND template::CommonFieldUtil::getterName FOR this»().toString();
«ENDDEFINE»
«DEFINE getColumnValue FOR FloatField-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = object.«EXPAND template::CommonFieldUtil::getterName FOR this»().toString();
«ENDDEFINE»
«DEFINE getColumnValue FOR BooleanField-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = BooleanUtil.getBooleanDisplayValue(object.«EXPAND template::CommonFieldUtil::getterName FOR this»());
«ENDDEFINE»
«DEFINE getColumnValue FOR DateField-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = DateUtil.getFormatedDate(object.«EXPAND template::CommonFieldUtil::getterName FOR this»());
«ENDDEFINE»
«DEFINE getColumnValue FOR TimeField-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = DateUtil.getFormatedTime(object.«EXPAND template::CommonFieldUtil::getterName FOR this»());
«ENDDEFINE»
«DEFINE getColumnValue FOR DateTimeField-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = DateUtil.getFormatedDateTime(object.«EXPAND template::CommonFieldUtil::getterName FOR this»());
«ENDDEFINE»
«DEFINE getColumnValue FOR EnumField-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = renderer.getEnumDisplayValue(«parentGroup.parentCard.name.toFirstUpper()»Proxy.class, "«EXPAND template::CommonFieldUtil::propertyName FOR this»", object.«EXPAND template::CommonFieldUtil::getterName FOR this»());
«ENDDEFINE»
«DEFINE getColumnValue FOR RelationFieldEntity-»
	«IF cardinality == 1 -»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = renderer.getDisplayValue(object.«EXPAND template::CommonFieldUtil::getterName FOR this»());
	«ENDIF -»
«ENDDEFINE»
«DEFINE getColumnValue FOR BinaryField-»
		if (object.«EXPAND template::CommonFieldUtil::getterName FOR this»() == null)
			value = "";
		else
			value = BaseNLS.constants().boolean_true();
«ENDDEFINE»
