«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 
«DEFINE generate(String projectName) FOR Project»
«FILE projectName.toLowerCase()+"/server/security/Imog" + projectName.toFirstUpper() + "Policy.java"»
package org.imogene.«projectName.toLowerCase()».server.security;

import java.util.HashSet;
import java.util.Set;

import javax.servlet.http.HttpSession;


import org.imogene.lib.common.entity.ImogActor;
import org.imogene.lib.common.notification.Notification;
import org.imogene.lib.common.role.ImogRole;
import org.imogene.lib.common.sync.entity.SynchronizableEntity;
import org.imogene.lib.common.user.DefaultUser;
«FOREACH entities AS e-»
import org.imogene.«projectName.toLowerCase()».domain.entity.«e.name.toFirstUpper()»;
«ENDFOREACH-»
import org.imogene.«projectName.toLowerCase()».shared.constants.«projectName.toFirstUpper()»RoleConstants;
import org.imogene.web.server.security.ImogSecurityPolicy;
import org.imogene.web.server.util.HttpSessionUtil;
import org.imogene.web.server.util.ServerConstants;



/**
 * This class tells if the current user can access the properties of the model
 * objects in read and in update mode 
 * @author MEDES-IMPS
 */
public class Imog«projectName.toFirstUpper()»Policy implements ImogSecurityPolicy {	
		
	/**
	 * Constructor
	 */
	public Imog«projectName.toFirstUpper()»Policy() {
	}
	

	/**
	 * Tells if the current user can access a domain object property
	 * @param bean the object whose property access has to be checked
	 * @param property the property whose access has to be checked
	 * @return true if the current user can access an Object property
	 */
	public boolean canAccessProperty(Object bean, String property) {
		if(!property.equals("password") && hasRole(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR))
			return true;
			
		«FOREACH entities AS e»
		if (bean instanceof «e.name.toFirstUpper()»)
			return canAccess«e.name.toFirstUpper()»Property(property);
		«ENDFOREACH»

		if (bean instanceof Notification)
			return canAccessNotificationProperty(property);
		
		if (bean instanceof DefaultUser)
			return canAccessDefaultUserProperty(property);			
		
		return true;
	}
	
	
	/**
	 * Tells if the current user can update a domain object property
	 * @param bean the object whose property update privilege has to be checked
	 * @param property the property whose update privilege has to be checked
	 * @return true if the current user can update an Object property
	 */
	public boolean canUpdateProperty(Object bean, String property) {
		if(hasRole(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR))
			return true;

		«FOREACH entities AS e»
		if (bean instanceof «e.name.toFirstUpper()»)
			return canUpdate«e.name.toFirstUpper()»Property(property);	
		«ENDFOREACH»		
		
		if (bean instanceof ImogRole)
			return false;

		if (bean instanceof SynchronizableEntity)
			return false;

		if (bean instanceof Notification)
			return canUpdateNotificationProperty(property);
		
		if (bean instanceof DefaultUser)
			return canUpdateDefaultUserProperty(property);
	
		return true;
	}
	
	
	«FOREACH entities AS e»
	/* Privileges check for entity «e.name.toFirstUpper()» */
	
	/**
	 * Tells if the current user can access a «e.name.toFirstUpper()» property
	 * @param property the property whose access has to be checked
	 * @return true if the current user can access a «e.name.toFirstUpper()» property
	 */
	private boolean canAccess«e.name.toFirstUpper()»Property(String property) {
	
		«FOREACH e.groups AS g»
		/* «g.name.toFirstUpper()» field group */
		
		Set<String> «g.name.toFirstLower()»GroupReader = new HashSet<String>();
		«FOREACH g.readers AS r-»
		«g.name.toFirstLower()»GroupReader.add(«projectName.toFirstUpper()»RoleConstants.«r.name.toUpperCase()»_ROLE);
		«ENDFOREACH-»
		
		«FOREACH g.fields AS f-»
		if(property.equals("«EXPAND template::CommonFieldUtil::propertyName FOR f»")) {
			if («g.name.toFirstLower()»GroupReader.isEmpty())
				return true;
			else
				return hasRole(«g.name.toFirstLower()»GroupReader);
		}
		«ENDFOREACH-»			
		«ENDFOREACH»
		
		«IF Actor.isAssignableFrom(e.metaType)-»
		/* Administration field group */

		if (property.equals("login"))
			return true;
		if (property.equals("password"))
			return false;
		if (property.equals("roleList"))
			return true;

		/* Synchronization field group */

		Set<String> synchronizationGroupReader = new HashSet<String>();
		synchronizationGroupReader.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);

		if (property.equals("synchronizableList"))
				return hasRole(synchronizationGroupReader);
		
		«IF ((Actor)e).filters!=null && ((Actor)e).filters.size>0-»
		/* FilterFields field group */

		Set<String> filterFieldsGroupReader = new HashSet<String>();
		filterFieldsGroupReader.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);
			«FOREACH ((Actor)e).filters AS fil-»
		if (property.equals("«EXPAND template::CommonFieldUtil::propertyName FOR fil»List"))
				return hasRole(filterFieldsGroupReader);					
			«ENDFOREACH-»
		«ENDIF-»
		«ENDIF-»

		return true;
	}	
	
	
	/**
	 * Tells if the current user can update a «e.name.toFirstUpper()» property
	 * @param property the property whose update privilege has to be checked
	 * @return true if the current user can update a «e.name.toFirstUpper()» property
	 */
	private boolean canUpdate«e.name.toFirstUpper()»Property(String property) {
	
		«FOREACH e.groups AS g»
		/* «g.name.toFirstUpper()» field group */
		
		Set<String> «g.name.toFirstLower()»GroupWriter = new HashSet<String>();
		«FOREACH g.writers AS r-»
		«g.name.toFirstLower()»GroupWriter.add(«projectName.toFirstUpper()»RoleConstants.«r.name.toUpperCase()»_ROLE);
		«ENDFOREACH-»
		
		«FOREACH g.fields AS f-»
		if(property.equals("«EXPAND template::CommonFieldUtil::propertyName FOR f»")) {
			if («g.name.toFirstLower()»GroupWriter.isEmpty())
				return true;
			else
				return hasRole(«g.name.toFirstLower()»GroupWriter);
		}
		«ENDFOREACH-»			
		«ENDFOREACH»
		
		«IF Actor.isAssignableFrom(e.metaType)-»
		/* Administration field group */

		Set<String> administrationGroupWriter = new HashSet<String>();
		administrationGroupWriter.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);

		if (property.equals("login"))
				return hasRole(administrationGroupWriter);
		if (property.equals("password"))
				return hasRole(administrationGroupWriter);
		if (property.equals("roleList"))
				return hasRole(administrationGroupWriter);

		/* Synchronization field group */

		Set<String> synchronizationGroupWriter = new HashSet<String>();
		synchronizationGroupWriter.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);

		if (property.equals("synchronizableList"))
				return hasRole(synchronizationGroupWriter);
		
		«IF ((Actor)e).filters!=null && ((Actor)e).filters.size>0-»
		/* FilterFields field group */

		Set<String> filterFieldsGroupWriter = new HashSet<String>();
		filterFieldsGroupWriter.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);
			«FOREACH ((Actor)e).filters AS fil-»
		if (property.equals("«EXPAND template::CommonFieldUtil::propertyName FOR fil»List"))
				return hasRole(filterFieldsGroupWriter);					
			«ENDFOREACH-»
		«ENDIF-»
		«ENDIF-»

		return true;
	}	
	«ENDFOREACH»

	/* Privileges check for entity Notification */

	/**
	 * Tells if the current user can access a Notification property
	 * @param property the property whose access has to be checked
	 * @return true if the current user can access a Notification property
	 */
	private boolean canAccessNotificationProperty(String property) {

		/* Description field group */

		Set<String> descriptionGroupReader = new HashSet<String>();
		descriptionGroupReader.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);

		if (property.equals("name"))
				return hasRole(descriptionGroupReader);
		if (property.equals("method"))
				return hasRole(descriptionGroupReader);
		if (property.equals("title"))
				return hasRole(descriptionGroupReader);
		if (property.equals("formType"))
				return hasRole(descriptionGroupReader);
		if (property.equals("operation"))
				return hasRole(descriptionGroupReader);
		if (property.equals("message"))
				return hasRole(descriptionGroupReader);

		/* Recipients field group */

		Set<String> recipientsGroupReader = new HashSet<String>();
		recipientsGroupReader.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);

		if (property.equals("actorRecipients"))
				return hasRole(recipientsGroupReader);
		if (property.equals("roleRecipients"))
				return hasRole(recipientsGroupReader);

		return true;
	}

	/**
	 * Tells if the current user can update a Notification property
	 * @param property the property whose update privilege has to be checked
	 * @return true if the current user can update a Notification property
	 */
	private boolean canUpdateNotificationProperty(String property) {

		/* Description field group */

		Set<String> descriptionGroupWriter = new HashSet<String>();
		descriptionGroupWriter.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);

		if (property.equals("name"))
				return hasRole(descriptionGroupWriter);
		if (property.equals("method"))
				return hasRole(descriptionGroupWriter);
		if (property.equals("title"))
				return hasRole(descriptionGroupWriter);
		if (property.equals("formType"))
				return hasRole(descriptionGroupWriter);
		if (property.equals("operation"))
				return hasRole(descriptionGroupWriter);
		if (property.equals("message"))
				return hasRole(descriptionGroupWriter);

		/* Recipients field group */

		Set<String> recipientsGroupWriter = new HashSet<String>();
		recipientsGroupWriter.add(«projectName.toFirstUpper()»RoleConstants.ADMINISTRATOR);

		if (property.equals("actorRecipients"))
				return hasRole(recipientsGroupWriter);
		if (property.equals("roleRecipients"))
				return hasRole(recipientsGroupWriter);

		return true;
	}
	
	/* Privileges check for entity DefaultUser */

	/**
	 * Tells if the current user can access a DefaultUser property
	 * @param property the property whose access has to be checked
	 * @return true if the current user can access a DefaultUser property
	 */
	private boolean canAccessDefaultUserProperty(String property) {

		if (property.equals("login"))
			return true;
		if (property.equals("password"))
			return false;
		if (property.equals("roleList"))
			return true;

		if (property.equals("synchronizableList"))
			return false;

		return true;
	}

	/**
	 * Tells if the current user can update a DefaultUser property
	 * @param property the property whose update privilege has to be checked
	 * @return true if the current user can update a DefaultUser property
	 */
	private boolean canUpdateDefaultUserProperty(String property) {
		return false;
	}
	
	
	/**
	 * Checks if the current user has a given role
	 * @param roleId the role to be checked
	 * @return true if the current user has a given role
	 */
	private boolean hasRole(String roleId) {
		
		Set<ImogRole> roles = getCurrentActorRoles();
		if (roles != null) {
			for (ImogRole role : roles) {
				if (role.getId().equals(roleId))
					return true;
			}
		}
		return false;
	}

	/**
	 * Checks if the current user has one of a set of roles
	 * @param roleIds the set of roles to be checked
	 * @return true if the current user has one of a set of roles
	 */
	private boolean hasRole(Set<String> roleIds) {

		for (String role : roleIds) {
			if (hasRole(role))
				return true;
		}
		return false;
	}

	/**
	 * Gets the current actor roles
	 */
	private Set<ImogRole> getCurrentActorRoles() {

		HttpSession session = HttpSessionUtil.getHttpSession();
		if (session != null) {
			ImogActor actor = (ImogActor) session.getAttribute(ServerConstants.SESSION_USER);
			return actor.getRoles();
		}
		return null;
	}
}
«ENDFILE»
«ENDDEFINE»
