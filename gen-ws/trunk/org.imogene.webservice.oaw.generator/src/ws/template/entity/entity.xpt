«IMPORT core»
«EXTENSION template::CommonFieldUtilExt» 
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String packageName, String projectName) FOR CardEntity»
«FILE packageName.toLowerCase()+ "/entity/" + this.name.toFirstUpper() + ".java"»
package org.imogene.«projectName.toLowerCase()».entity;

import java.util.Date;
import java.util.Set;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.imogene.ws.entity.MedooBean;
import org.imogene.ws.serializer.xml.DateAdapter;
«FOREACH groups.fields AS f -»
	«EXPAND RelationEntityDeclaration(projectName) FOR f-»
«ENDFOREACH -»	
«IF this.georeferenced!=null -»
import org.imogene.ws.entity.IsGeoreferenced;
«ENDIF»
«IF isTranslatableFieldPresent(this.groups.fields)-»
import javax.xml.bind.annotation.XmlTransient;
import org.imogene.ws.entity.LocalizedField;
«ENDIF»	


/**
 * MedooBean implementation for the entity «name.toFirstUpper()»
 * @author MEDES-IMPS
 */
«IF !Actor.isAssignableFrom(this.metaType)-»
@XmlRootElement(name="«name.toLowerCase()»")
«ENDIF-»
@XmlType( propOrder={«EXPAND setOrder FOREACH this.groups.fields SEPARATOR ","-», "creationDate", "lastModificationDate", "uploadDate", "creator", "modifier", "modifiedFrom"} )
public class «name.toFirstUpper()» implements MedooBean {

	/* Medoo bean fields */
	private String id;	
	private Date creationDate;
	private Date lastModificationDate;	
	private Date uploadDate;
	private String creator;
	private String modifier;
	private String modifiedFrom;
	
	/* Entity fields */
	
	«FOREACH groups AS g-»
	/* «g.name.toFirstUpper()» group fields */
	«FOREACH g.fields AS f -»
	«EXPAND fieldDeclaration FOR f-»
	«ENDFOREACH -»	
	«ENDFOREACH»	
	
	
	public «name.toFirstUpper()»(){
	}
	
	/* Getters for Medoo bean fields */
	
	@XmlJavaTypeAdapter(value=DateAdapter.class)
	@XmlElement(name="creationdate")
	public Date getCreationDate() {		
		return creationDate;
	}	

	public String getCreator() {		
		return creator;
	}

	@XmlAttribute
	public String getId() {		
		return id;
	}

	@XmlJavaTypeAdapter(value=DateAdapter.class)
	@XmlElement(name="lastmodificationdate")
	public Date getLastModificationDate() {		
		return lastModificationDate;
	}

	@XmlElement(name="modifiedfrom")
	public String getModifiedFrom() {		
		return modifiedFrom;
	}

	public String getModifier() {		
		return modifier;
	}

	@XmlJavaTypeAdapter(value=DateAdapter.class)
	@XmlElement(name="uploaddate")
	public Date getUploadDate() {		
		return uploadDate;
	}
	
	/* Setters for Medoo bean fields */

	public void setCreationDate(Date date) {		
		creationDate = date;
	}

	public void setCreator(String pCreator) {
		creator =pCreator;		
	}

	public void setId(String pId) {		
		id = pId;
	}

	public void setLastModificationDate(Date date) {
		lastModificationDate = date;		
	}

	public void setModifiedFrom(String terminal) {
		modifiedFrom = terminal;		
	}

	public void setModifier(String pModifier) {
		modifier = pModifier;		
	}

	public void setUploadDate(Date date) {		
		uploadDate = date;
	}
	
	/* Getters and Setters for Entity fields */
	
	«FOREACH groups AS g-»
	/* Getters and Setters for «g.name.toFirstUpper()» group fields */
	«FOREACH g.fields AS f -»
	«EXPAND ws::template::WsFieldUtil::getterDeclarationForField FOR f»
	«EXPAND ws::template::WsFieldUtil::setterDeclarationForField FOR f»	
	«REM»
	When a property has a lowercase first char and an upper case second char,
	some bean introspectors need getter/setter with type getXxxx
	and some other need getter/setter with type getxxx
	«ENDREM»
	«IF isPropertyWithLowerUpperCaseFirstTwoChar(f.name)-»
	/* second set of getter/setter because of property has first char with lowercase and second char with uppercase 
	   and bean introspectors do not use same naming conventions */
	«EXPAND ws::template::WsFieldUtil::getterDeclarationForFieldWithLowerUpperCaseFirstTwoChar FOR f»
	«EXPAND ws::template::WsFieldUtil::setterDeclarationForFieldWithLowerUpperCaseFirstTwoChar FOR f-»
	/* ----------------------------------------------------------------------------------------------------------- */
	«ENDIF-»
	
	«IF RelationFieldEntity.isAssignableFrom(f.metaType) && (((RelationFieldEntity)f).cardinality != 1)-»
	/**
	 * @param param the «((RelationFieldEntity)f).entity.name-» to add to the «EXPAND template::CommonFieldUtil::propertyName FOR f-» collection
	 */
	public void addTo«EXPAND template::CommonFieldUtil::propertyName FOR f-»(«((RelationFieldEntity)f).entity.name.toFirstUpper()-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR f-».add(param);
	}	
	
	/**
	 * @param param the «((RelationFieldEntity)f).entity.name-» to remove from the «EXPAND template::CommonFieldUtil::propertyName FOR f-» collection
	 */
	public void removeFrom«EXPAND template::CommonFieldUtil::propertyName FOR f-»(«((RelationFieldEntity)f).entity.name.toFirstUpper()-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR f-».remove(param);
	}	
	«ENDIF-»	
	
	
	«ENDFOREACH -»	
	«ENDFOREACH»	
	
	«IF this.georeferenced!=null -»
	public Double getLatitude() {
		return «EXPAND template::CommonFieldUtil::propertyName FOR this.georeferenced»Latitude;
	}
	public Double getLongitude() {
		return «EXPAND template::CommonFieldUtil::propertyName FOR this.georeferenced»Longitude;
	}
	«ENDIF»	
	
	public String getDisplayValue() {		
		StringBuffer buffer = new StringBuffer();
		«FOREACH this.mainFields AS m -»
		//TODO Compute main fields
		«ENDFOREACH -»
		return buffer.toString();
	}	
}
«ENDFILE»
«ENDDEFINE»

«DEFINE fieldDeclaration FOR FieldEntity-»
	private «EXPAND ws::template::WsFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»; 
«ENDDEFINE»

«DEFINE fieldDeclaration FOR TextField-»
	private «EXPAND ws::template::WsFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»;
	«IF this.translatable -»
	private LocalizedField «EXPAND template::CommonFieldUtil::propertyName FOR this»LocalizedField;
	«ENDIF -»
«ENDDEFINE»

«DEFINE fieldDeclaration FOR GeoField-»
	private «EXPAND ws::template::WsFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»Latitude; 
	private «EXPAND ws::template::WsFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»Longitude; 
«ENDDEFINE»

«DEFINE RelationEntityDeclaration(String projectName) FOR FieldEntity-»«ENDDEFINE»
«DEFINE RelationEntityDeclaration(String projectName) FOR RelationFieldEntity-»
	«IF this.cardinality == 1 -»
import org.imogene.«projectName.toLowerCase()».entity.serializer.xml.«entity.name.toFirstUpper()»Adapter;
	«ELSE -»
import org.imogene.«projectName.toLowerCase()».entity.serializer.xml.«entity.name.toFirstUpper()»ListAdapter;
	«ENDIF -»
«ENDDEFINE»

«DEFINE setOrder FOR FieldEntity»"«EXPAND template::CommonFieldUtil::propertyName FOR this»"«ENDDEFINE»
«DEFINE setOrder FOR TextField»«IF this.translatable»"«EXPAND template::CommonFieldUtil::propertyName FOR this»LocalizedField"«ELSE»"«EXPAND template::CommonFieldUtil::propertyName FOR this»"«ENDIF»«ENDDEFINE»
«DEFINE setOrder FOR GeoField»"«EXPAND template::CommonFieldUtil::propertyName FOR this»Latitude","«EXPAND template::CommonFieldUtil::propertyName FOR this»Longitude"«ENDDEFINE»


