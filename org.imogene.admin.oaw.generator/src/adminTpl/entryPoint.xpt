«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR Project»
«FILE projectName.toLowerCase()+"/client/Admin"+projectName.toFirstUpper() + "EntryPoint.java"»
package org.imogene.«projectName.toLowerCase()».client;

import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;

import org.imogene.web.gwt.client.LocalSession;
import org.imogene.web.gwt.client.ui.menu.MenuList;
import org.imogene.web.gwt.client.ui.menu.MenuListEntity;
import org.imogene.web.gwt.client.ui.panel.BottomBannerPanel;
import org.imogene.web.gwt.client.ui.panel.MainContentPanel;
import org.imogene.web.gwt.common.entity.ImogActor;
import org.imogene.web.gwt.common.entity.SessionInfo;
import org.imogene.web.gwt.remote.AuthenticationServiceAsyncFacade;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;


/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Admin«projectName.toFirstUpper()»EntryPoint implements EntryPoint, ValueChangeHandler<String> {
	
	private MainContentPanel content;
	private TopBannerPanel bc;
	private HandlerRegistration registration;
	
	
	/**
	 * The message displayed to the user when the server cannot be reached or
	 * returns an error.
	 */
	private static final String SERVER_ERROR = "An error occurred while "
			+ "attempting to contact the server. Please check your network "
			+ "connection and try again.";

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {	
		
		AuthenticationServiceAsyncFacade.getInstance().current(new AsyncCallback<SessionInfo>() {

			@Override
			public void onFailure(Throwable arg0) {				
				Window.alert(SERVER_ERROR);
			}

			@Override
			public void onSuccess(SessionInfo info) {
				if(info.getActor()!=null){
					LocalSession.get().setCurrentUser(info.getActor());
					displayApplication(LocalSession.get().getCurrentUser());
				}
			}	
		});
	}
	
	private void displayApplication(ImogActor actor){
		registration = History.addValueChangeHandler(this);
		RootPanel.get("topBanner").clear();
		bc = new TopBannerPanel(GWT.getModuleBaseURL()+ "/images/logo_admin.png");
		bc.setActor(actor);
		RootPanel.get("topBanner").add(bc);
		content = new MainContentPanel();	
		populateMenu(content);
		RootPanel.get("contentContainer").add(content);	
		RootPanel.get("bottomBanner").add(new BottomBannerPanel());
		History.fireCurrentHistoryState();
	}

	@Override
	public void onValueChange(ValueChangeEvent<String> event) {
	
		String token = event.getValue();
		if(token.equals("")){		
		«LET getFirstActorName(this.entities) AS actorName  -» 
		History.newItem("list/«actorName.toLowerCase()»");	
		«ENDLET-»
		}		
		else if(token.equals("logout")){
			logout();
			return;
		}
		else if(token.equals("back")){			
			History.back();			
			History.back();	
			return;
		}
		
		if (!token.equals("") && content!=null) {
			Widget tokenView = TokenHandler.getViewForToken(token);
			if (tokenView != null)
				content.setContent(tokenView);
		}	
	}

	/**
	 * Populates the menu list on the left side of the main content panel
	 * @param mc the main content panel of the application
	 */		
	public void populateMenu(MainContentPanel mc){
		MenuList menu = mc.getMenuList();
		MenuListEntity menuListEntity = new MenuListEntity();
		
		«EXPAND specificMenuItem FOR this -»
		«FOREACH entities AS e -»
			«IF Actor.isAssignableFrom(e.metaType)-»			
		menuListEntity.addItem(NLS.constants().«e.name.toFirstLower()»_title(), "list/«e.name.toLowerCase()»", "«e.name.toLowerCase()»");
			«ENDIF-»
		«ENDFOREACH -»	
		menuListEntity.addItem("Notifications", "list/notif", "notif");	
		
		menu.addItem(menuListEntity);
	}
	
	
	/**
	 * Logouts the user from the application
	 * @param hasBeenDeconnected true if user has been disconnected
	 */	
	private void logout() {	

		/* clean local data */
		LocalSession.get().setCurrentUser(null);
		
		/* disconnect from the server */
		AuthenticationServiceAsyncFacade.getInstance().disconnect(
				new AsyncCallback<Void>() {

					@Override
					public void onFailure(Throwable arg0) {
						clearModule();
					}

					@Override
					public void onSuccess(Void arg0) {						
						clearModule();
					}					
				});
	}
	
	/**
	 * Clears the module from its panels
	 */
	private void clearModule(){
		RootPanel.get("topBanner").clear();		
		RootPanel.get("contentContainer").clear();
		RootPanel.get("bottomBanner").clear();
		bc = null;
		content = null;
		registration.removeHandler();
		String href = GWT.getHostPageBaseURL() + "logout";
		Window.Location.assign(href);
	}	
	
	
		
}
«ENDFILE-»
«ENDDEFINE»

«REM» specific part AOP hook for menu item «ENDREM»
«DEFINE specificMenuItem FOR Project»«ENDDEFINE»



