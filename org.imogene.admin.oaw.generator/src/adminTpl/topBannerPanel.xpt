«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 
«DEFINE generate(String packageName, String projectName) FOR Project»
«FILE projectName.toLowerCase()+"/client/TopBannerPanel.java"»

package org.imogene.«projectName.toLowerCase()».client;

import java.util.Date;

import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;
import org.imogene.web.gwt.client.Constants;
import org.imogene.web.gwt.client.i18n.BaseNLS;
import org.imogene.web.gwt.client.ui.panel.MessagePanel;
import org.imogene.web.gwt.common.entity.ImogActor;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HasAlignment;
import com.google.gwt.user.client.ui.HasVerticalAlignment;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Hyperlink;
import com.google.gwt.user.client.ui.Image;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.VerticalPanel;


/**
 * Application user interface Top Banner Panel
 * @author MEDES-IMPS
 */
public class TopBannerPanel extends Composite {	
	
	private static final String DEFAULT_LOGO = GWT.getModuleBaseURL()+ "/images/logo_medoo.png";

	private VerticalPanel layout;	
	private HorizontalPanel topPanel;	
	private HorizontalPanel logoPanel;	
	private MessagePanel messagePanel;	
	private HTML lastConnection;	
	private Image logo = new Image(GWT.getModuleBaseURL()+ "/images/logo_medoo.png");		
	private Hyperlink logout;
	private ListBox locBox;
	
	
	
	public TopBannerPanel(){		
		this(DEFAULT_LOGO);
	}
	
	public TopBannerPanel(String pLogoUrl){
		logo = new Image(pLogoUrl);	
		layout();
		properties();
	}
	
	/**
	 */
	private void layout(){
		layout = new VerticalPanel();
		topPanel = new HorizontalPanel();	
		
		locBox = new ListBox();
		setLocaleList();
		topPanel.add(locBox);
		
		lastConnection = new HTML();
		messagePanel = new MessagePanel();		
		topPanel.add(lastConnection);
		
		logout = new Hyperlink(BaseNLS.constants().disconnect(),"logout");	
		topPanel.add(logout);
		
		logoPanel = new HorizontalPanel();
		logoPanel.add(logo);		
		logoPanel.add(messagePanel);
		
		layout.add(topPanel);
		layout.add(logoPanel);
		initWidget(layout);
	}
	
	/**
	 */
	private void properties(){		
		topPanel.setSpacing(5);
		topPanel.setHorizontalAlignment(HasAlignment.ALIGN_RIGHT);
		topPanel.setVerticalAlignment(HasAlignment.ALIGN_MIDDLE);
		
		topPanel.setCellHorizontalAlignment(lastConnection, HorizontalPanel.ALIGN_RIGHT);
		topPanel.setCellVerticalAlignment(lastConnection, HasVerticalAlignment.ALIGN_MIDDLE);
		
		topPanel.setCellHorizontalAlignment(logout, HorizontalPanel.ALIGN_RIGHT);
		topPanel.setCellVerticalAlignment(logout, HasVerticalAlignment.ALIGN_MIDDLE);
		
		topPanel.setCellHorizontalAlignment(locBox, HorizontalPanel.ALIGN_RIGHT);
		topPanel.setCellVerticalAlignment(locBox, HasVerticalAlignment.ALIGN_MIDDLE);	
		topPanel.setCellWidth(locBox, "100%");
		
		topPanel.setStylePrimaryName("imogene-MainHeader");	
		
		logoPanel.setSpacing(0);
		logoPanel.setStylePrimaryName("imogene-Logo");
		logoPanel.setWidth("100%");
		messagePanel.setWidth("300px");		
		logoPanel.setCellVerticalAlignment(messagePanel, HorizontalPanel.ALIGN_MIDDLE);
		logoPanel.setCellHorizontalAlignment(messagePanel, HorizontalPanel.ALIGN_LEFT);
		layout.setWidth("100%");
		logout.setStyleName("imogene-logout");
		lastConnection.setStyleName("imogene-lastConnection");
		locBox.setStyleName("imogene-locBox");
	}
	
	/**
	 * Set panel information relative to the actor 
	 * @param actor the current actor
	 */
	public void setActor(ImogActor actor){
		Date cDate = actor.getLastLoginDate();
		if(cDate == null) cDate = new Date();
		//String lastLoginDate = TextFormatUtil.getDateTime(cDate);
		String metadata = BaseNLS.messages().form_metadata_current_user(actor.getLogin());
		lastConnection.setHTML(metadata);
	}
	
	/**
	 * Sets the list of available locales for the application
	 */
	private void setLocaleList() {

		«FOREACH languages AS l-»
		locBox.addItem("«l.name.toFirstUpper()»", "«l.isoCode»");
		«ENDFOREACH-»		
		
		String locale = NLS.constants().locale();
		if(locale!=null && !locale.equals(""))
			selectLocale(locale);	 
		
		locBox.addChangeHandler(new LocaleHandler());	
	}
	
	/**
	 * Selects the item matching the selected locale 
	 * @param loc the selected locale value
	 */
	private void selectLocale(String loc){
		for(int i=0; i<locBox.getItemCount(); i++){
			String value= locBox.getValue(i);
			if(value.equals(loc)){
				locBox.setSelectedIndex(i);
				return;
			}
		}
	}	
	
	/**
	 * Class that manages the locale changes
	 * @author MEDES-IMPS
	 */
	private class LocaleHandler implements ChangeHandler {
			
		public LocaleHandler() {
		}

		@Override
		public void onChange(ChangeEvent arg0) {
			String locale = locBox.getValue(locBox.getSelectedIndex());			
			String url = GWT.getModuleBaseURL() + Constants.RPC_URL_BASE + "?locale=" + locale + "#" + History.getToken();			
			Window.Location.assign(url);
		}
	}
}
«ENDFILE-»
«ENDDEFINE»
