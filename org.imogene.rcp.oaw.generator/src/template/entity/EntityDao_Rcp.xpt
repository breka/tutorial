«IMPORT core»

«DEFINE generate(String moduleName) FOR CardEntity»
«FILE moduleName.toLowerCase()+ "/dao/hibernate/" + this.name.toFirstUpper() + "Dao.java"-»
package org.imogene.«moduleName.toLowerCase()».dao.hibernate;

import java.util.Date;
import java.util.List;
import java.util.Vector;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import org.imogene.common.dao.EntityDao;
import org.imogene.common.dao.criteria.BasicCriteria;
import org.imogene.common.dao.criteria.CriteriaConstants;
import org.imogene.common.dao.criteria.ImogConjunction;
import org.imogene.common.dao.criteria.ImogJunction;
import org.imogene.common.data.Synchronizable;
import org.imogene.sync.client.EntityListener;
import org.imogene.sync.client.HibernateUtil;
import org.imogene.sync.client.dao.sqlite.HibernateGenericDao;
import org.imogene.sync.SyncConstants;

import org.imogene.«moduleName.toLowerCase()».entity.«this.name.toFirstUpper()»;
«IF this.topLevel == true -»
import org.imogene.«moduleName.toLowerCase()».entity.list.«this.name.toFirstUpper()»ForList;
import org.imogene.«moduleName.toLowerCase()».util.EntityForListUpdater;
«ENDIF -»


/**
 * «this.name» Dao Implementation
 * @author Medes-IMPS
 */
public class «this.name.toFirstUpper()»Dao implements EntityDao {		
		
	private static List<EntityListener> listeners = new Vector<EntityListener>();
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#load(java.lang.String)
	 */
	public Synchronizable loadEntity(String entityId) {
		return («this.name.toFirstUpper()»)HibernateGenericDao.loadEntity(«this.name.toFirstUpper()».class, entityId);						
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#delete(java.lang.String)
	 */
	public void delete(String entityId){
		Synchronizable entity = HibernateGenericDao.loadEntity(«this.name.toFirstUpper()».class, entityId);
		HibernateGenericDao.delete(entity);			
	}
	
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#delete(org.imogene.data.Synchronizable)
	 */
	public void delete(Synchronizable toDelete){
		HibernateGenericDao.delete(toDelete);
	}			
	
	/* (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#loadModified(java.util.Date, org.imogene.dao.criteria.ImogJunction, java.lang.String)
	 */
	public Synchronizable loadModified(Date date, ImogJunction criterions, String entityId) {
		return HibernateGenericDao.loadModified(«this.name.toFirstUpper()».class, date, criterions, entityId);
	}

	/* (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#loadModified(java.util.Date)
	 */
	public List<Synchronizable> loadModified(Date date) {	
		return HibernateGenericDao.loadModified(«this.name.toFirstUpper()».class, date);
	}

	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#deleteEntities()
	 */
	public void deleteEntities(){
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = session.beginTransaction();
		String hsql = "delete from «this.name.toFirstUpper()»";
	    Query query = session.createQuery(hsql);
	    query.executeUpdate();	
		tx.commit();
		session.close();		
	}
	
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#countAll()
	 */
	public int countAll(){
	
		/* remove entities created by system */
		ImogJunction junction = new ImogConjunction();	
		junction.add(removeEntitiesCreatedBySystem());
			
		return HibernateGenericDao.countAll(«this.name.toFirstUpper()».class, junction);				
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#loadEntities(org.imogene.dao.criteria.ImogJunction)
	 */
	public List<Synchronizable> loadEntities(ImogJunction junction){
		return HibernateGenericDao.loadEntities(«this.name.toFirstUpper()».class, junction);	
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.data.EntityHandler#loadEntities()
	 */
	public List<Synchronizable> loadEntities() {
	
		/* remove entities created by system */
		ImogJunction junction = new ImogConjunction();	
		junction.add(removeEntitiesCreatedBySystem());
			
		return HibernateGenericDao.loadEntities(«this.name.toFirstUpper()».class, junction, "«EXPAND template::ImogRcpFieldUtil::getFirstSortField FOR this-»", «EXPAND template::ImogRcpFieldUtil::getFirstSortFieldOrderDirection FOR this-»);				
	}
	
«IF this.topLevel == true -»
	/**
	 * Used to get «this.name.toFirstUpper()»ForList entities by pages
	 * @param startRow page start row
	 * @param maxRows page max number of rows
	 * @param sortProperty property used for entity list sorting
	 * @param sortOrder true if ascending
	 * @param user
	 * @return «this.name.toFirstUpper()»ForList entities between startRow and (startRow + maxRows)
	 */
	public List<Synchronizable> loadEntities(int startRow, int maxRows, String sortProperty, boolean sortOrder) {

		/* remove entities created by system */
		ImogJunction junction = new ImogConjunction();
		junction.add(removeEntitiesCreatedBySystem());	

		return HibernateGenericDao.loadEntities(«this.name.toFirstUpper()»ForList.class, junction, startRow, maxRows, sortProperty, sortOrder);
	}	
«ELSE -»
	/*
	 * (non-Javadoc)
	 * @see org.imogene.common.dao.EntityDao#loadEntities(int, int, java.lang.String, boolean)
	 */
	public List<Synchronizable> loadEntities(int startRow, int maxRows, String sortProperty, boolean sortOrder) {

		/* remove entities created by system */
		ImogJunction junction = new ImogConjunction();
		junction.add(removeEntitiesCreatedBySystem());	

		return HibernateGenericDao.loadEntities(«this.name.toFirstUpper()».class, junction, startRow, maxRows, sortProperty, sortOrder);
	}	
«ENDIF -»
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#loadModified(java.util.Date, java.lang.String)
	 */
	public Synchronizable loadModified(Date date, String entityId){
		return HibernateGenericDao.loadModified(«this.name.toFirstUpper()».class, date, entityId);			
	}
	
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#loadModified(java.lang.String, java.util.Date, org.imogene.dao.criteria.ImogJunction)
	 */
	public List<Synchronizable> loadModified(String modifiedBy, Date date, ImogJunction criterions){
		return HibernateGenericDao.loadModified(«this.name.toFirstUpper()».class, modifiedBy, date, criterions);
	}
	
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.data.EntityHandler#loadEntities()
	 */
	public List<Synchronizable> loadModified(Date date, ImogJunction criterions) {
	
		if (criterions==null)
			criterions = new ImogConjunction();
		
		/* remove entities created by system */
		criterions.add(removeEntitiesCreatedBySystem());
					
		return HibernateGenericDao.loadModified(«this.name.toFirstUpper()».class, date, criterions);		
	}			
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#merge(org.imogene.data.Synchronizable)
	 */
	public void merge(Synchronizable object){
		HibernateGenericDao.merge(object);
		«IF topLevel-»
			EntityForListUpdater.entityMergedSavedOrUpdated(object);
		«ENDIF-»
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#clear()
	 */
	public void clear(){
		// Nothing to do with this implementation
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.dao.EntityDao#flush()
	 */
	public void flush(){
		// Noting to do with this implementation
	}			
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.data.EntityHandler#saveOrUpdate(java.lang.Object)
	 */
	public void saveOrUpdate(Synchronizable object){
		HibernateGenericDao.saveOrUpdate(object);
		«FOREACH groups.fields AS field-» 
			«EXPAND refreshRelationField FOR field-»
		«ENDFOREACH-»
		«IF topLevel-»
			EntityForListUpdater.entityMergedSavedOrUpdated(object);
		«ENDIF-»
	}			
	
	/**
	 * add a listener notified when data are saved
	 * @param listener the listener to add
	 */
	public synchronized void addListener(EntityListener listener){
		listeners.add(listener);
	}
	
	/**
	 * remove a listener
	 * @param listener the listener to remove
	 */
	public synchronized void removeListener(EntityListener listener){
		listeners.remove(listener);
	}
	

	/**
	 * Removes the entities that have been created by the system
	 */	
	private BasicCriteria removeEntitiesCreatedBySystem() {
		
		BasicCriteria criteria = new BasicCriteria();
		criteria.setOperation(CriteriaConstants.STRING_OPERATOR_DIFF);
		criteria.setField("createdBy");
		criteria.setValue(SyncConstants.SYNC_ID_SYS);
		return criteria;
	}
	
}
«ENDFILE»
«ENDDEFINE»



«DEFINE refreshRelationField FOR FieldEntity-»«ENDDEFINE»
«DEFINE refreshRelationField FOR RelationFieldEntity-»
	«IF (this.cardinality == 1) && this.oppositeRelationField!=null -»
		if(((«this.parentGroup.parentCard.name.toFirstUpper()»)object).«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null)
			HibernateGenericDao.refresh(((«this.parentGroup.parentCard.name.toFirstUpper()»)object).«EXPAND template::CommonFieldUtil::getterName FOR this-»());		
	«ENDIF -»
«ENDDEFINE»