«IMPORT core»
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR CardEntity»«REM»«ENDDEFINE»
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR Actor»«ENDREM»
«FILE projectName.toLowerCase()+"/client/remote/"+this.name.toFirstUpper() + "Service.java"»
package org.imogene.«projectName.toLowerCase()».client.remote;

import java.util.List;

import com.google.gwt.user.client.rpc.RemoteService;

import org.imogene.web.gwt.common.criteria.ImogJunction;
import org.imogene.«projectName.toLowerCase()».client.entity.«name.toFirstUpper()»;
«FOREACH groups.fields AS f -»
«EXPAND importsForRelation(projectName) FOR f -»
«ENDFOREACH -»

/**
 * «name.toFirstUpper()» Services
 * @author MEDES-IMPS
 */
public interface «name.toFirstUpper()»Service extends RemoteService {

	/* «name.toFirstLower()» services */
	
	/**
	 * Load the entity with the specified id
	 * @param entityId the entity id
	 * @return the entity or null
	 */
	public «name.toFirstUpper()» get«name.toFirstUpper()»(String entityId);	

	/**
	 * Lists entities of type «name.toFirstUpper()»
	 * @param i first index to retrieve
	 * @param j nb of items to retrieve
	 * @param sortProperty the property used to sort the collection
	 * @param sortOrder true for an ascendant sort
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»(int i, int j, String sortProperty, boolean sortOrder);
	
	/**
	 * Lists the entities of type «name.toFirstUpper()»
	 * @param i first index to retrieve
	 * @param j nb of items to retrieve
	 * @prama criterion request criteria
	 * @param sortProperty the property used to sort the collection
	 * @param sortOrder true for an ascendant sort
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»(int i, int j, ImogJunction criterion, String property, boolean sortOrder);
	
	/**
	 * Lists all the entities of type «name.toFirstUpper()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»();
	
	/**
	 * Counts number of «name.toFirstLower()» in the database
	 * @return the count
	 */
	public int count«name.toFirstUpper()»();
	
	/**
	 * Counts number of «name.toFirstLower()» in the database, 
	 * that matches the criteria
	 * @return the count
	 */
	public int count«name.toFirstUpper()»(ImogJunction criterion);
	
	/**
	 * Saves or updates the entity
	 * @param entity the entity to save or update
	 * @param isNew true if it is a new entity added for the first time.
	 */
	public void saveOrUpdate(«name.toFirstUpper()» entity, boolean isNew);
	
	/**
	 * Saves or updates the entity without modifing the upload date
	 * @param entity the entity to save or update
	 * @param isNew true if it is a new entity added for the first time.
	 */
	public void saveOrUpdateShadow(«name.toFirstUpper()» entity, boolean isNew);
	
	/* relation dependences */
	«FOREACH groups.fields AS f -»
		«EXPAND methodsForRelation(name.toFirstUpper()) FOR f -»
	«ENDFOREACH -»
	
	«EXPAND specificPart FOR this»
}
«ENDFILE»
«ENDDEFINE»

«REM»
	Imports implied by the relation fields «ENDREM»
«DEFINE importsForRelation(String projectName) FOR FieldEntity»«ENDDEFINE»
«DEFINE importsForRelation(String projectName) FOR RelationFieldEntity»
«IF cardinality==-1 || cardinality>1»
import org.imogene.«projectName.toLowerCase()».client.entity.«entity.name.toFirstUpper()»;
«ENDIF»
«ENDDEFINE»

«REM»
	DAO methods implied by the relation fields «ENDREM»
«DEFINE methodsForRelation(String parentEntityType) FOR FieldEntity»«ENDDEFINE»
«DEFINE methodsForRelation(String parentEntityType) FOR RelationFieldEntity»
«IF cardinality==-1 || cardinality>1 -»
/**
 * Lists the associated «entity.name.toFirstUpper()», 
 * on the field «name.toFirstLower()»
 * @param parent the parent entity
 * @return the list of the associated entities
 */
public List<«entity.name.toFirstUpper()»> list«entity.name.toFirstUpper()»(«parentEntityType» parent);
«ENDIF -»
«ENDDEFINE»

«DEFINE specificPart FOR CardEntity»«ENDDEFINE»