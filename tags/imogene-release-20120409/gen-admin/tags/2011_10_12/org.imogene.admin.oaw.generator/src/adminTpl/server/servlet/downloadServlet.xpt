«IMPORT core»
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR Project»
«FILE projectName.toLowerCase()+"/server/servlet/BinaryDownloadServlet.java"»
package org.imogene.«projectName.toLowerCase()».server.servlet;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import org.imogene.web.server.binary.Binary;
import org.imogene.web.server.binary.BinaryDao;

/**
 * Servlet that permits to access to a binary file for download.
 * @author Medes-IMPS 
 */
public class BinaryDownloadServlet extends HttpServlet {
	
	/** serial version */
	private static final long serialVersionUID = 3593916311143354739L;	
		
	private static final String DEFAULT_DIRECTORY = "/binaries/";	
	private static final String PATH_PARAM = "binaryPath";	
	private String binaryPath;	
	
	/* dao part */
	private BinaryDao binaryDao;
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(config.getServletContext());		
		binaryDao = (BinaryDao)wac.getBean("binaryDao");	
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		String paramId = req.getParameter("binaryId");
		String flvId = req.getParameter("flvId");
		String mp3Id = req.getParameter("mp3Id");
		String thumbId = req.getParameter("thumbId");
		
		if (paramId != null) {
			Binary binary = binaryDao.getBinary(paramId);
			if (binary != null) {
				resp.setHeader("Content-Disposition", "attachment; filename=\""
						+ binary.getFileName() + "\"");
				resp.setContentType(binary.getContentType());
				resp.setContentLength((int) binary.getLength());
				copy(new FileInputStream(getLocalFile(binary)), resp
						.getOutputStream());
			} else {
				resp.sendError(404);
			}
		}else if (flvId != null) {
			Binary binary = binaryDao.getBinary(flvId);
			if (binary != null) {
				File flvFile = getLocalFileAsFlv(binary);
				resp.setHeader("Content-Disposition", "attachment; filename=\""
						+ binary.getFileName()+".flv" + "\"");
				resp.setContentType("x-flash-video");
				resp.setContentLength((int) flvFile.length());
				copy(new FileInputStream(flvFile), resp
						.getOutputStream());
			} else {
				resp.sendError(404);
			}
		}else if(mp3Id != null){
			Binary binary = binaryDao.getBinary(mp3Id);
			if (binary != null) {
				File mp3File = getLocalFileAsMp3(binary);
				resp.setHeader("Content-Disposition", "attachment; filename=\""
						+ binary.getFileName()+".mp3" + "\"");
				resp.setContentType("audio/mp3");
				resp.setContentLength((int) mp3File.length());
				copy(new FileInputStream(mp3File), resp
						.getOutputStream());
			} else {
				resp.sendError(404);
			}
		} else if(thumbId != null){
			Binary binary = binaryDao.getBinary(thumbId);
			if (binary != null) {
				File thumbFile = getLocalThumbnail(binary);
				resp.setHeader("Content-Disposition", "attachment; filename=\""
						+ binary.getFileName() + "\"");
				resp.setContentType(binary.getContentType());
				resp.setContentLength((int)thumbFile.length());
				copy(new FileInputStream(thumbFile), resp
						.getOutputStream());
			} else {
				resp.sendError(404);
			}	
		}else{
			resp.sendError(404);
		}
	}
	
	/**
	 * Set the binary path form the context param
	 */
	private void setBinaryPath() {
		if (getServletConfig().getServletContext().getInitParameter(PATH_PARAM) != null) {
			binaryPath = getServletConfig().getServletContext().getInitParameter(PATH_PARAM);
			if (!binaryPath.endsWith("/"))
				binaryPath = binaryPath + "/";	
		}else{
			binaryPath = DEFAULT_DIRECTORY;
		}
	}
	
	/**
	 * Get the local file where copy the FileItem
	 * @param remoteName the remote name 
	 * @return the corresponding file.
	 */
	private File getLocalFile(Binary binary) {
		setBinaryPath();
		return new File(binaryPath+binary.getId()+"-"+binary.getFileName());		
	}

	/**
	 * Get the local file where copy the FileItem
	 * @param remoteName the remote name 
	 * @return the corresponding file.
	 */
	private File getLocalFileAsFlv(Binary binary) {
		setBinaryPath();
		return new File(binaryPath+"flv/" + binary.getId() + "-"
				+ binary.getFileName()+".flv");
	}
	
	/**
	 * Get the local thumbnail
	 * @param remoteName the remote name 
	 * @return the corresponding file.
	 */
	private File getLocalThumbnail(Binary binary) {
		setBinaryPath();
		return new File(binaryPath + "/thumb_" + binary.getId() + "-"
				+ binary.getFileName());
	}
	
	/**
	 * Get the local mp3 copy
	 * @param binary the binary
	 * @return the mp3 file copy
	 */
	private File getLocalFileAsMp3(Binary binary){
		setBinaryPath();
		return new File(binaryPath + "mp3/" + binary.getId() + "-"
				+ binary.getFileName() + ".mp3");
	}

	/**
	 * Copy the binary file to the http response output stream
	 * @param in input stream
	 * @param out output stream
	 * @throws IOException
	 */
	private static void copy(InputStream in, OutputStream out) throws IOException {
		try {
			byte[] buffer = new byte[1024];
			int nrOfBytes = -1;
			while ((nrOfBytes = in.read(buffer)) != -1) {
				out.write(buffer, 0, nrOfBytes);
			}
			out.flush();
		} finally {
			try {
				in.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
			try {
				out.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
	}	
}
«ENDFILE»
«ENDDEFINE»