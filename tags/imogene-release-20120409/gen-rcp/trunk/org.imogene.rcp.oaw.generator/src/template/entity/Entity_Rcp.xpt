«IMPORT core»
«EXTENSION template::CommonFieldUtilExt» 
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String moduleName) FOR CardEntity»
«FILE moduleName.toLowerCase() + "/entity/" + name.toFirstUpper() + ".java"»
package org.imogene.«moduleName.toLowerCase()».entity;

import java.util.Date;
«IF Actor.isAssignableFrom(this.metaType)-»
import java.util.HashSet;
import java.util.Set;
«ENDIF-»
«EXPAND template::ImogRcpFieldUtil::generateImportsForFields FOR this-»
«IF !Actor.isAssignableFrom(this.metaType)-»
import org.imogene.common.data.Synchronizable;
«ELSE-»
import org.imogene.common.data.SynchronizableUser;
import org.imogene.uao.role.Role;
import org.imogene.uao.synchronizable.SynchronizableEntity;
«ENDIF-»
import org.imogene.«moduleName.toLowerCase()».wrapper.DisplayValueWrapper;

/**
 * «this.name» Bean Implementation
 * @author Medes-IMPS
 */
«IF !Actor.isAssignableFrom(this.metaType)-»
public class «this.name.toFirstUpper()» implements Synchronizable {
«ELSE-»
public class «this.name.toFirstUpper()» implements SynchronizableUser {
«ENDIF-»

	/* Synchronizable properties */
	private String id;	
	private Date modified;	
	private Date uploadDate;
	private String modifiedBy;	
	private String modifiedFrom;
	private Date created;
	private String createdBy;
	
	«IF Actor.isAssignableFrom(this.metaType)-»	
	/* SynchronizableUser properties */
	private String login;
	private String password;
	private Set<Role> assignedRoles = new HashSet<Role>();
	private Set<SynchronizableEntity> assignedSynchronizables = new HashSet<SynchronizableEntity>();
	«ENDIF-»	
	
	/* Entity properties */
	«FOREACH groups.fields AS field-» 
	private «EXPAND template::ImogRcpFieldUtil::fieldType FOR field-» «EXPAND template::CommonFieldUtil::propertyName FOR field-»;
	«ENDFOREACH-»	
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	/* For localized fields */
	private LocalizedFieldMap translations;
	«ENDIF-»		
				
	
	public «this.name.toFirstUpper()»() {
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
		translations = new LocalizedFieldMap();
	«ENDIF»	
	
   // Add the ENABLED keyword before 'START' to protect this area 
    «PROTECT CSTART '/*' CEND '*/' ID 'init'+ this.shortName DISABLE »		
	«FOREACH groups.fields AS field-» 
		«EXPAND propertyInit FOR field-»
	«ENDFOREACH-»
	«ENDPROTECT»	
	
	}
		
	
	/* Entity getters and setters */

	«FOREACH groups.fields AS field-»
	
	public «EXPAND template::ImogRcpFieldUtil::fieldType FOR field-» «EXPAND template::CommonFieldUtil::getterName FOR field-»()
	{
		return «EXPAND template::CommonFieldUtil::propertyName FOR field-»;
	}
   
	public void «EXPAND template::CommonFieldUtil::setterName FOR field-»(«EXPAND template::ImogRcpFieldUtil::fieldType FOR field-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR field-» = param;
	}
	
	
	«REM»
	When a property has a lowercase first char and an upper case second char,
	some bean introspectors need getter/setter with type getXxxx
	and some other need getter/setter with type getxxx
	«ENDREM»
	«IF isPropertyWithLowerUpperCaseFirstTwoChar(field.name)-»
	/* second set of getter/setter because of property has first char with lowercase and second char with uppercase 
	   and bean introspectors do not use same naming conventions */
	public «EXPAND template::ImogRcpFieldUtil::fieldType FOR field-» «EXPAND template::CommonFieldUtil::getterNameForPropertyWithLowerUpperCaseFirstTwoChar FOR field-»()
	{
		return «EXPAND template::CommonFieldUtil::propertyName FOR field-»;
	}
   
	public void «EXPAND template::CommonFieldUtil::setterNameForPropertyWithLowerUpperCaseFirstTwoChar FOR field-»(«EXPAND template::ImogRcpFieldUtil::fieldType FOR field-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR field-» = param;
	}
	/* ----------------------------------------------------------------------------------------------------------- */
	«ENDIF-»	
	
	«IF RelationFieldEntity.isAssignableFrom(field.metaType) && (((RelationFieldEntity)field).cardinality != 1)-»
	/**
	 * @param param the «((RelationFieldEntity)field).entity.name-» to add to the «EXPAND template::CommonFieldUtil::propertyName FOR field-» collection
	 */
	public void addTo«EXPAND template::CommonFieldUtil::propertyName FOR field-»(«((RelationFieldEntity)field).entity.name.toFirstUpper()-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR field-».add(param);
	}	
	
	/**
	 * @param param the «((RelationFieldEntity)field).entity.name-» to remove from the «EXPAND template::CommonFieldUtil::propertyName FOR field-» collection
	 */
	public void removeFrom«EXPAND template::CommonFieldUtil::propertyName FOR field-»(«((RelationFieldEntity)field).entity.name.toFirstUpper()-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR field-».remove(param);
	}	
	«ENDIF-»
	
	«ENDFOREACH-»
	
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	public LocalizedFieldMap getLocalizedFieldMap() {
		return translations;
	}

	public void setLocalizedFieldMap(LocalizedFieldMap localizedFieldMap) {
		this.translations = localizedFieldMap;
	}
	«ENDIF»		

	/* Synchronizable getters and setters */
	
	public String getId() {		
		return id;
	}

	public void setId(String pId) {
		id = pId;
	}	

	public Date getModified() {
		return modified;
	}

	public void setModified(Date pModified) {
		modified = pModified;
	}	
	
	public Date getUploadDate() {
		return uploadDate;
	}
	
	public void setUploadDate(Date date) {
		uploadDate = date;
	}

	public String getModifiedBy() {
		return modifiedBy;
	}

	public void setModifiedBy(String id) {
		modifiedBy = id;
	}
	
	public String getModifiedFrom() {
		return modifiedFrom;
	}

	public void setModifiedFrom(String modifiedFrom) {
		this.modifiedFrom = modifiedFrom;
	}
	
	public Date getCreated() {
		return created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}	
	
	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}	
	
	
	/* other getters and setters */
	
	public void setEntity(«this.name.toFirstUpper()» entity) {
		this.setId(entity.getId());
		this.setModified(entity.getModified());
		this.setModifiedBy(entity.getModifiedBy());
		this.setCreated(entity.getCreated());
		this.setCreatedBy(entity.getCreatedBy());		
		«FOREACH groups.fields AS field-» 
		this.«EXPAND template::CommonFieldUtil::setterName FOR field-»(entity.«EXPAND template::CommonFieldUtil::getterName FOR field-»());
		«ENDFOREACH-»
	}
	
	
	public String getDisplayValue() {		
		return DisplayValueWrapper.getDisplayValue(this);
	}
	
	«IF Actor.isAssignableFrom(this.metaType)-»	
	/* SynchronizableUser getters and setters */

	public String getLogin() {
		return login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Set<Role> getRoles() {
		return assignedRoles;
	}

	public void setRoles(Set<Role> roles) {
		this.assignedRoles = roles;
	}

	public void addRole(Role role) {
		this.assignedRoles.add(role);
	}

	public Set<SynchronizableEntity> getSynchronizables() {
		return assignedSynchronizables;
	}

	public void setSynchronizables(Set<SynchronizableEntity> synchronizables) {
		this.assignedSynchronizables = synchronizables;
	}

	public void addSynchronizable(SynchronizableEntity synchronizable) {
		assignedSynchronizables.add(synchronizable);
	}
	«ENDIF-»
	
		
}
«ENDFILE»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»



«REM» Define pour gerer l'initialisation du champs dans le bean «ENDREM» 
«DEFINE propertyInit FOR FieldEntity-»
	«IF (defaultValue!=null) && (defaultValue.length >0)-»
		«EXPAND template::CommonFieldUtil::propertyName FOR this-»= "«defaultValue»";
	«ENDIF-»
«ENDDEFINE»

«DEFINE propertyInit FOR BooleanField-»
	«IF (defaultValue!=null) && (defaultValue.length >0) -»
		«EXPAND template::CommonFieldUtil::propertyName FOR this-» = new Boolean(«defaultValue.toLowerCase()»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE propertyInit FOR IntegerField-»
	«IF (defaultValue!=null) && (defaultValue.length >0)-»
		«EXPAND template::CommonFieldUtil::propertyName FOR this-» = new Integer(«defaultValue»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE propertyInit FOR FloatField-»
	«IF (defaultValue!=null) && (defaultValue.length >0)-»
	«EXPAND template::CommonFieldUtil::propertyName FOR this-» = new Float(«defaultValue»f);
	«ENDIF-»
«ENDDEFINE»

«REM» Define pour gerer l'initialisation d'un enum «ENDREM» 
«DEFINE propertyInit FOR EnumField-»
	«IF (!this.multipleSelection) && (defaultValue!=null) && (defaultValue.length >0)-»
		«EXPAND template::CommonFieldUtil::propertyName FOR this-» = "«defaultValue»";
	«ENDIF-»
«ENDDEFINE»

«REM» Define pour gerer l'initialisation d'une date avec le now «ENDREM» 
«DEFINE propertyInit FOR DatesField-»
	«IF (defaultValue!=null) && (defaultValue.toLowerCase().startsWith("now"))-»
		«EXPAND template::CommonFieldUtil::propertyName FOR this-» = new java.util.Date();
	«ENDIF-»
«ENDDEFINE»

«DEFINE propertyInit FOR BinaryField»«ENDDEFINE»

«REM» Define pour gerer l'initialisation d'une relation via HashSet«ENDREM» 
«DEFINE propertyInit FOR RelationFieldEntity-»
	«IF (cardinality >1) || (cardinality == -1)-»
		«EXPAND template::CommonFieldUtil::propertyName FOR this-» = new java.util.HashSet<«entity.name.toFirstUpper()-»>();
	«ENDIF-»
«ENDDEFINE»


«REM» ------------------------------------------------«ENDREM»
«DEFINE getDisplay FOR FieldEntity-»
	if (this.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null)
		displayValue.append(this.«EXPAND template::CommonFieldUtil::getterName FOR this-»()).append(" ");
«ENDDEFINE»
«DEFINE toString FOR DateField-»
	if (this.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null)
		displayValue.append(DateHelper.toString(this.«EXPAND template::CommonFieldUtil::getterName FOR this-»())).append(" ");	
«ENDDEFINE»
«DEFINE toString FOR TimeField-»
	if (this.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null)
		displayValue.append(DateHelper.toStringTime(this.«EXPAND template::CommonFieldUtil::getterName FOR this-»())).append(" ");
«ENDDEFINE»
«DEFINE toString FOR DateTimeField-»
	if (this.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null)
		displayValue.append(DateHelper.toStringDateTime(this.«EXPAND template::CommonFieldUtil::getterName FOR this-»())).append(" ");
«ENDDEFINE»
«DEFINE stringRepresentation FOR EnumField»
	String «name.toFirstLower()» = this.«EXPAND template::CommonFieldUtil::getterName FOR this-»();
	if ( «name.toFirstLower()»!=null)
	{	
	«IF this.multipleSelection==true-»		
		String[] indexesStr = «name.toFirstLower()».split(",");
		String result = new String();
		for(int j=0; j< indexesStr.length; j++){				
		«FOREACH enumValues AS enumValue ITERATOR iter-»
		«IF iter.counter1==1 -»
			if (indexesStr[j].equals("«enumValue.value»")) {
				if(j==0)
					result = result + "«enumValue.name»";
				else
					result = result + ", " + "«enumValue.name»";											
			}				
        «ELSE -»
			else if (indexesStr[j].equals("«enumValue.value»")) {
				if(j==0)
					result = result + "«enumValue.name»";
				else
					result = result + ", " + "«enumValue.name»";											
			}			
		«ENDIF -»
		«ENDFOREACH -»									
		}				
		displayValue.append(result).append(" ");		
	«ELSE-»
		«FOREACH enumValues AS enumValue ITERATOR iter-»		
			«IF iter.counter1==1 -»
        if («name.toFirstLower()».equals("«enumValue.value»") )
        	displayValue.append("«enumValue.name»".append(" ");
        	«ELSE -»
        else if («name.toFirstLower()».equals("«enumValue.value»") )
        	 displayValue.append("«enumValue.name»".append(" ");		
			«ENDIF -»
		«ENDFOREACH -»	
	«ENDIF-»	
	}
«ENDDEFINE»
«DEFINE getDisplay FOR RelationFieldEntity -»
	«IF (this.cardinality == 1)-»
		if (this.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null)
			displayValue.append(this.«EXPAND template::CommonFieldUtil::getterName FOR this-»().getDisplayValue()).append(" ");	
	«ENDIF -»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»


