«IMPORT core»
«DEFINE generate(String moduleName) FOR Project»
«FILE moduleName.toLowerCase() + "/serializer/xml/LocalizedFieldMapConverter.java"»

package org.imogene.«moduleName.toLowerCase()».serializer.xml;

import java.util.Date;
import java.util.List;
import java.util.Vector;

import org.imogene.«moduleName.toLowerCase()».entity.LocalizedFieldMap;
import org.imogene.sync.localizedtext.LocalizedText;

import com.thoughtworks.xstream.converters.Converter;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;



/**
 * XStream converter for the translatable fields.
 * @author MEDES-IMPS
 */
public class LocalizedFieldMapConverter implements Converter {

	
	/*
	 * (non-Javadoc)
	 * @see com.thoughtworks.xstream.converters.Converter#marshal(java.lang.Object, com.thoughtworks.xstream.io.HierarchicalStreamWriter, com.thoughtworks.xstream.converters.MarshallingContext)
	 */
	public void marshal(Object value, HierarchicalStreamWriter writer, MarshallingContext context) {
		
		LocalizedFieldMap localizedFieldMap = (LocalizedFieldMap) value;
			
			// get corresponding translations
			List<LocalizedText> texts = localizedFieldMap.getI18nValues();
			
			for (LocalizedText text:texts) {
				
				writer.startNode("LocalizedText");
				writer.addAttribute("id",text.getId());
				
				// fieldId
				writer.startNode("fieldId");
				writer.setValue(text.getFieldId());
				writer.endNode();
				
				// locale
				writer.startNode("locale");
				writer.setValue(text.getLocale());
				writer.endNode();
				
				// value
				writer.startNode("value");
				if(text.getValue()!=null)
					writer.setValue(text.getValue());
				writer.endNode();
				
				// originalValue
				writer.startNode("originalValue");
				if(text.getOriginalValue()!=null)
					writer.setValue(text.getOriginalValue().toString());
				writer.endNode();
				
				// potentialyWrong
				writer.startNode("potentialyWrong");
				if(text.getPotentialyWrong()!=null)
					writer.setValue(text.getPotentialyWrong().toString());
				writer.endNode();
				
				// modified
				writer.startNode("modified");
				writer.setValue(String.valueOf(text.getModified().getTime()));
				writer.endNode();
				
				// modifiedBy
				writer.startNode("modifiedBy");
				writer.setValue(text.getModifiedBy());
				writer.endNode();
				
				// modifiedFrom
				writer.startNode("modifiedFrom");
				writer.setValue(text.getModifiedFrom());
				writer.endNode();
				
				// created
				writer.startNode("created");
				writer.setValue(String.valueOf(text.getCreated().getTime()));
				writer.endNode();
				
				// createdBy
				writer.startNode("createdBy");
				writer.setValue(text.getCreatedBy());
				writer.endNode();
								
				writer.endNode();				
			}
	}

	/*
	 * (non-Javadoc)
	 * @see com.thoughtworks.xstream.converters.Converter#unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader, com.thoughtworks.xstream.converters.UnmarshallingContext)
	 */
	public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
			
		LocalizedFieldMap localizedFieldMap = new LocalizedFieldMap();
		
		List<LocalizedText> texts = new Vector<LocalizedText>();
		
		// Localized Texts
		while (reader.hasMoreChildren()) {	
			
			reader.moveDown();
			
			LocalizedText text = new LocalizedText();
			text.setId(reader.getAttribute("id"));
			
			// fieldId
			reader.moveDown();
			text.setFieldId(reader.getValue());
			reader.moveUp();

			// locale
			reader.moveDown();
			text.setLocale(reader.getValue());
			reader.moveUp();
			
			// value
			reader.moveDown();
			text.setValue(reader.getValue());
			reader.moveUp();
			
			// originalValue
			reader.moveDown();
			text.setOriginalValue(Boolean.valueOf(reader.getValue()));
			reader.moveUp();
			
			// potentialyWrong
			reader.moveDown();
			text.setPotentialyWrong(Boolean.valueOf(reader.getValue()));
			reader.moveUp();
			
			// modified
			reader.moveDown();
			String modified = reader.getValue();
			if(modified!=null && !modified.equals(""))
				text.setModified(new Date(Long.parseLong(modified)));	
			reader.moveUp();
			
			// modifiedBy
			reader.moveDown();
			text.setModifiedBy(reader.getValue());
			reader.moveUp();
			
			// modifiedFrom
			reader.moveDown();
			text.setModifiedFrom(reader.getValue());
			reader.moveUp();
			
			// created
			reader.moveDown();
			String created = reader.getValue();
			if(created!=null && !created.equals(""))
				text.setCreated(new Date(Long.parseLong(created)));	
			reader.moveUp();
			
			// createdBy
			reader.moveDown();
			text.setCreatedBy(reader.getValue());
			reader.moveUp();
			
			texts.add(text);
			
			reader.moveUp();			
		}		
		
		localizedFieldMap.addI18nValues(texts);
		return localizedFieldMap;
	}

	/*
	 * (non-Javadoc)
	 * @see com.thoughtworks.xstream.converters.ConverterMatcher#canConvert(java.lang.Class)
	 */
	@SuppressWarnings("unchecked")
	public boolean canConvert(Class toConvert) {		
		if (toConvert.equals(LocalizedFieldMap.class))
			return true;
		else
			return false;
	}
}
«ENDFILE»
«ENDDEFINE»
