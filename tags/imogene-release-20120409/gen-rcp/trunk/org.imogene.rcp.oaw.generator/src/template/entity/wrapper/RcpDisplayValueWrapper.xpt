«IMPORT core»
«EXTENSION template::CommonFieldUtilExt»

«DEFINE generate(String moduleName) FOR Project»
«FILE moduleName.toLowerCase() + "/wrapper/DisplayValueWrapper.java"»

package org.imogene.«moduleName.toLowerCase()».wrapper;

import java.util.Locale;

«FOREACH entities AS e-»
import org.imogene.«moduleName.toLowerCase()».entity.«e.name.toFirstUpper()»;
«IF e.topLevel == true -» 
import org.imogene.«moduleName.toLowerCase()».entity.list.«e.name.toFirstUpper()»ForList;
	«IF e.columnFields.isEmpty -»
		«EXPAND getOneToOneRelationsForImport(moduleName.toLowerCase(), e.mainFields) FOR e-»		
	«ELSE -»
		«EXPAND getOneToOneRelationsForImport(moduleName.toLowerCase(), e.columnFields) FOR e-»
	«ENDIF- »
«ENDIF- »	
«ENDFOREACH-»
import org.imogene.common.data.Synchronizable;
import org.imogene.rcp.core.tools.DateHelper;
import org.imogene.rcp.core.wrapper.CoreMessages;

/**
 *
 */
public class DisplayValueWrapper {

	public static String ENTITY_DISPLAY = "entity_display";
	public static String ENTITY_DESCRIPTION = "entity_desc";
	public static String ACTION_LIST_ALL = "action_list_all";
	public static String ACTION_CREATE = "action_create";
	public static String ACTION_SEARCH = "search_all";
	


    /**
     * Get display representation for a Synchronizable Entity
     *
     * @param bean a Synchronizable Entity
     * @return string representation for IHM display
     */
	public static String getDisplayValue(Synchronizable bean){

		«FOREACH entities AS e»
		if(bean instanceof «e.name.toFirstUpper()»){
			return getDisplayValue((«e.name.toFirstUpper()») bean);
		}
			«IF e.topLevel == true -» 
		if(bean instanceof «e.name.toFirstUpper()»ForList){
			return getDisplayValue((«e.name.toFirstUpper()»ForList) bean);
		}			
				«IF e.columnFields.isEmpty -»
					«EXPAND getOneToOneRelationsForSearch(moduleName, e.mainFields.addAll(e.secondaryFields)) FOR e-»		
				«ELSE -»
					«EXPAND getOneToOneRelationsForSearch(moduleName, e.columnFields) FOR e-»
				«ENDIF- »			
			«ENDIF -»
				
		«ENDFOREACH-»
		return "";
	}
			
	
	«FOREACH entities AS e»
	/**
	 * String representation of entity «e.name»
	 */
	private static String getDisplayValue(«e.name.toFirstUpper()» bean){
		String value = new String();

		«IF !(e.mainFields==null) && !e.mainFields.isEmpty-»
		«FOREACH e.mainFields AS f-»
			«EXPAND stringRepresentation FOR f-»
		«ENDFOREACH-»				
		«ELSE-»
		value = Messages.getString("no_display_value_text");
		«ENDIF-»
		
		return value.trim();				
	}
	
	«IF e.topLevel == true -» 
	/**
	 * String representation of entity «e.name»ForList
	 */
	private static String getDisplayValue(«e.name.toFirstUpper()»ForList bean){
		String value = new String();
		 
		«IF !(e.mainFields==null) && !e.mainFields.isEmpty-»
		«FOREACH e.mainFields AS f-»
			«EXPAND stringRepresentation FOR f-»
		«ENDFOREACH-»				
		«ELSE-»
		value = Messages.getString("no_display_value_text");
		«ENDIF-»
		
		return value.trim();			
	}		
		«IF e.columnFields.isEmpty -»
			«EXPAND getOneToOneRelationsForMethod(moduleName, e.mainFields.addAll(e.secondaryFields)) FOR e-»		
		«ELSE -»
			«EXPAND getOneToOneRelationsForMethod(moduleName, e.columnFields) FOR e-»
		«ENDIF- »		
	«ENDIF -»	
	«ENDFOREACH»
	
	
    /**
     * Get display enumeration representation for a MedanyBean type enumeration field
     *
     * @param beanClass a Synchronizable class type
     * @param fieldName the Synchronizable field name     
     * @param fieldValue the bean field value    
     * @return string representation for IHM display
     */
	public static String getEnumDisplayValue(Class<?> beanClass, String fieldName, String fieldValue){

		if (fieldValue!=null && !fieldValue.equals("")){
			«FOREACH entities AS e»
			if (beanClass.equals(«e.name.toFirstUpper()».class)) {
				return get«e.name.toFirstUpper()»EnumDisplayValue(fieldName, fieldValue);
			}		
			«ENDFOREACH-»				
		}
		return "";		
	}	
	
	«FOREACH entities AS e»
	/**
	 * String representation of enumeration fields of entity «e.name»
	 */
	private static String get«e.name.toFirstUpper()»EnumDisplayValue(String fieldName, String fieldValue){
		String value = Messages.getString("enumeration_unknown");
		«FOREACH e.groups.fields AS f»
			«EXPAND enumStringRepresentation FOR f»
		«ENDFOREACH»
		return value.trim();
	}
	«ENDFOREACH»	
	
	
	/**
	 * Gets display texts for an entity
	 * @param className entity class name
	 * @param textType type of text from wrapper constants
	 * @return display text for the entity
	 */
	public static String getEntityText(String className, String textType) {
		
		«FOREACH entities AS e»
		if (className.equals(«e.name.toFirstUpper()».class.getName())) {
		
			if (textType.equals(ENTITY_DISPLAY))
				return Messages.getString("«e.name.toFirstLower()»_name");
			if (textType.equals(ENTITY_DESCRIPTION))
				return Messages.getString("«e.name.toFirstLower()»_description");
								
			if (textType.equals(ACTION_LIST_ALL))
				return Messages.getString("«e.name.toFirstLower()»_list_all_title");
			if (textType.equals(ACTION_CREATE))
				return Messages.getString("«e.name.toFirstLower()»_create_title");
			if (textType.equals(ACTION_SEARCH))
				return Messages.getString("«e.name.toFirstLower()»_search_title");							
		}		
		«ENDFOREACH-»
		
		return "";		
	}	
	
	
	/**
	 * String representation of a Boolean value
	 * @param bool the Boolean
	 * @return a string representation of the boolean value
	 */
	public static String getBooleanDisplay(Boolean bool) {

		if (bool != null) {
			if (bool)
				return CoreMessages.getString("boolean_true");
			else
				return CoreMessages.getString("boolean_false");
		} else
			return CoreMessages.getString("boolean_unknown");
	}
	

}

«ENDFILE»
«ENDDEFINE»

«REM»Format date/time and enumeration field to current local «ENDREM»
«DEFINE stringRepresentation FOR FieldEntity»
	if (bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()!=null)
		value = value + bean.«EXPAND template::CommonFieldUtil::getterName FOR this»() + " ";
«ENDDEFINE»

«DEFINE stringRepresentation FOR TextField»
	«IF translatable»
	if (bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()!=null)
		value = value + bean.getLocalizedFieldMap().getFieldI18nValue(bean.«EXPAND template::CommonFieldUtil::getterName FOR this»(), Locale.getDefault().getLanguage()) + " ";
	«ELSE»
	if (bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()!=null)
		value = value + bean.«EXPAND template::CommonFieldUtil::getterName FOR this»() + " ";
	«ENDIF»
«ENDDEFINE»

«DEFINE stringRepresentation FOR RelationFieldEntity»
	«IF cardinality==1»
	if(bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()!=null)
		value = value + getDisplayValue(bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()) + " ";		
	«ENDIF»		
«ENDDEFINE»

«DEFINE stringRepresentation FOR DateField»
	if (bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()!=null)
		value = value +  DateHelper.toString(bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()) + " ";						
«ENDDEFINE»

«DEFINE stringRepresentation FOR DateTimeField»
	if (bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()!=null)
		value = value  +  DateHelper.toStringDateTime(bean.«EXPAND template::CommonFieldUtil::getterName FOR this»())+ " ";
«ENDDEFINE»

«DEFINE stringRepresentation FOR TimeField»
	if (bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()!=null)
		value = value +  DateHelper.toStringTime(bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()) + " ";
«ENDDEFINE»

«DEFINE stringRepresentation FOR EnumField»
	String «name.toFirstLower()» = bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»();
	if ( «name.toFirstLower()»!=null)
	{
	«IF this.multipleSelection==true-»		
		String[] indexesStr = «name.toFirstLower()».split(";");
		String result = new String();
		for(int j=0; j< indexesStr.length; j++){				
		«FOREACH enumValues AS enumValue ITERATOR iter-»
		«IF iter.counter1==1 -»
			if (indexesStr[j].equals("«enumValue.value»")) {
				if(j==0)
					result = result + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");
				else
					result = result + ", " + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");											
			}				
        «ELSE -»
			else if (indexesStr[j].equals("«enumValue.value»")) {
				if(j==0)
					result = result + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");
				else
					result = result + ", " + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");											
			}			
		«ENDIF -»
		«ENDFOREACH -»									
		}				
		value = value + result + " ";		
	«ELSE-»
		«FOREACH enumValues AS enumValue ITERATOR iter-»		
			«IF iter.counter1==1 -»
        if («name.toFirstLower()».equals("«enumValue.value»") )
        	value = value + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option") + " ";        	
        	«ELSE -»
        else if («name.toFirstLower()».equals("«enumValue.value»") )
        	value = value + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option") + " ";        	 		
			«ENDIF -»
		«ENDFOREACH -»	
	«ENDIF-»		
	}
«ENDDEFINE»

«DEFINE stringRepresentation FOR BooleanField»
	value = value +  getBooleanDisplay(bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()) + " ";
«ENDDEFINE»



«REM» Format enumeration field «ENDREM»
«DEFINE enumStringRepresentation FOR FieldEntity»«ENDDEFINE»
«DEFINE enumStringRepresentation FOR EnumField»
	if (fieldName.equals("«EXPAND template::CommonFieldUtil::propertyName FOR this-»"))
	{
	
	«IF this.multipleSelection==true-»		
		String[] indexesStr = fieldValue.split(";");
		String result = new String();
		for(int j=0; j< indexesStr.length; j++){				
		«FOREACH enumValues AS enumValue ITERATOR iter-»
		«IF iter.counter1==1 -»
			if (indexesStr[j].equals("«enumValue.value»")) {
				if(j==0)
					result = result + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");
				else
					result = result + ", " + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");											
			}				
        «ELSE -»
			else if (indexesStr[j].equals("«enumValue.value»")) {
				if(j==0)
					result = result + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");
				else
					result = result + ", " + Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");											
			}			
		«ENDIF -»
		«ENDFOREACH -»									
		}				
		value = result;		
	«ELSE-»
		«FOREACH enumValues AS enumValue ITERATOR iter-»		
			«IF iter.counter1==1 -»
        if (fieldValue.equals("«enumValue.value»") )
        	value = Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option");        	
        	«ELSE -»
        else if (fieldValue.equals("«enumValue.value»") )
        	value = Messages.getString("«parentGroup.parentCard.name.toFirstLower()»_«name.toFirstLower()»_«enumValue.name.toFirstLower()»_option") ;        	 		
			«ENDIF -»
		«ENDFOREACH -»	
	«ENDIF-»	
		
	}
«ENDDEFINE»


«REM» go through fields to identify one to one relations «ENDREM»
«DEFINE getOneToOneRelationsForSearch(String moduleName, Collection[FieldEntity] fieldList) FOR CardEntity-»
	«FOREACH fieldList AS field-» 
	«EXPAND getOneToOneRelationForSearch(moduleName) FOR field-»		
	«ENDFOREACH-»
«ENDDEFINE»

«REM» for a one to one relation, on the reverse side, generate bean and mapping of related entity «ENDREM»
«DEFINE getOneToOneRelationForSearch(String packageName) FOR FieldEntity-»«ENDDEFINE»
«DEFINE getOneToOneRelationForSearch(String packageName) FOR ReverseRelationFieldEntity-»
	«IF (this.cardinality == 1)-»
		«IF (getOppositeCardinality(this) == 1)-»
		«REM»Relation 1 <-> 1 «ENDREM»
		if(bean instanceof «this.entity.name.toFirstUpper()»For«this.oppositeRelationField.name.toFirstUpper()»List){
			return getDisplayValue((«this.entity.name»For«this.oppositeRelationField.name.toFirstUpper()»List) bean);
		}			
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»
«REM» ---------------------------------------------------- «ENDREM»


«REM» go through fields to identify one to one relations «ENDREM»
«DEFINE getOneToOneRelationsForMethod(String moduleName, Collection[FieldEntity] fieldList) FOR CardEntity-»
	«FOREACH fieldList AS field-» 
	«EXPAND getOneToOneRelationForMethod(moduleName) FOR field-»		
	«ENDFOREACH-»
«ENDDEFINE»

«REM» for a one to one relation, on the reverse side, generate bean and mapping of related entity «ENDREM»
«DEFINE getOneToOneRelationForMethod(String packageName) FOR FieldEntity-»«ENDDEFINE»
«DEFINE getOneToOneRelationForMethod(String packageName) FOR ReverseRelationFieldEntity-»
	«IF (this.cardinality == 1)-»
		«IF (getOppositeCardinality(this) == 1)-»
		«REM»Relation 1 <-> 1 «ENDREM»
	/**
	 * String representation of entity «this.entity.name»For«this.oppositeRelationField.name.toFirstUpper()»List
	 */
	private static String getDisplayValue(«this.entity.name.toFirstUpper()»For«this.oppositeRelationField.name.toFirstUpper()»List bean){
		«this.entity.name.toFirstUpper()»ForList entity = new «this.entity.name.toFirstUpper()»ForList();
		«IF !(this.entity.mainFields==null) && !this.entity.mainFields.isEmpty-»
			«FOREACH this.entity.mainFields AS f-»
			entity.«EXPAND template::CommonFieldUtil::setterName FOR f»(bean.«EXPAND template::CommonFieldUtil::getterName FOR f»());
			«ENDFOREACH-»
			return getDisplayValue(entity);					
		«ELSE-»
		return Messages.getString("no_display_value_text");
		«ENDIF-»				
	}				
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»
«REM» ---------------------------------------------------- «ENDREM»


«REM» go through fields to identify one to one relations «ENDREM»
«DEFINE getOneToOneRelationsForImport(String moduleName, List[FieldEntity] fieldList) FOR CardEntity-»
	«FOREACH fieldList AS field-» 
	«EXPAND getOneToOneRelationForImport(moduleName) FOR field-»		
	«ENDFOREACH-»
«ENDDEFINE»

«REM» for a one to one relation, on the reverse side, generate bean and mapping of related entity «ENDREM»
«DEFINE getOneToOneRelationForImport(String packageName) FOR FieldEntity-»«ENDDEFINE»
«DEFINE getOneToOneRelationForImport(String packageName) FOR ReverseRelationFieldEntity-»
	«IF (this.cardinality == 1)-»
		«IF (getOppositeCardinality(this) == 1)-»
		«REM»Relation 1 <-> 1 «ENDREM»
import org.imogene.«packageName».entity.list.«this.entity.name.toFirstUpper()»For«this.oppositeRelationField.name.toFirstUpper()»List;			
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»
«REM» ---------------------------------------------------- «ENDREM»
