«IMPORT core»

«DEFINE generate(String packageName, String packagePath, String projectName) FOR Actor»
«FILE packagePath.toLowerCase() + "/serializer/stream/" + name + "UserStreamSerializer.java"»
package «packageName.toLowerCase()».serializer.stream;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.util.HashSet;
import java.util.Set;

import org.apache.log4j.Logger;

import org.imogene.common.data.Synchronizable;
import org.imogene.data.handler.server.GenericDataHandler;
import «packageName.toLowerCase()».entity.«this.name»User;
import org.imogene.sync.serializer.ImogSerializationException;
import org.imogene.sync.serializer.SerializationConstants;
import org.imogene.sync.serializer.stream.EntityStreamSerializer;
import org.imogene.uao.role.Role;
import org.imogene.uao.synchronizable.SynchronizableEntity;

/**
 * Serialize and un-serialize a «this.name»User
 * @author Medes-IMPS
 */
public class «this.name»UserStreamSerializer implements EntityStreamSerializer {

	private Logger logger = Logger.getLogger("«packageName.toLowerCase()».serializer.stream");

	private GenericDataHandler dataHandler;
	
	/*
	 * (non-Javadoc)
	 * @see EntityStreamSerializer#deSerialize(java.io.DataInputStream)
	 */
	public Synchronizable deSerialize(DataInputStream data) throws ImogSerializationException {
		//logger.info("Un-serializing a «this.name»User");
		«this.name»User entity = null;
		try{
			entity = new «this.name»User();
			entity.setId(data.readUTF());
			
			// login
			String login = data.readUTF();
			if (!login.equals(""))
				entity.setLogin(login);		
			
			// password
			String password = data.readUTF();
			if (!password.equals(""))
				entity.setPassword(password);	
						
			// Roles
			String roleIds = data.readUTF();
			Set<Role> roles = new HashSet<Role>();
			if (!roleIds.equals("")) {
				String[] ids = roleIds.split(SerializationConstants.COLLECTION_SEPARATOR);
				if (ids.length>0) {			
					for (String id:ids) {
						Role linkedRole = (Role)dataHandler.getBean(Role.class, id);
						roles.add(linkedRole);				
					}		
				}
			}
			entity.setRoles(roles);
			
			// Synchronizable entities
			String synchronizableIds = data.readUTF();
			Set<SynchronizableEntity> synchronizables = new HashSet<SynchronizableEntity>();
			if (!synchronizableIds.equals("")) {
				String[] ids = synchronizableIds.split(SerializationConstants.COLLECTION_SEPARATOR);
				if (ids.length>0) {			
					for (String id:ids) {
						SynchronizableEntity linkedSynchronizable = (SynchronizableEntity)dataHandler.getBean(SynchronizableEntity.class, id);
						synchronizables.add(linkedSynchronizable);				
					}		
				}
			}
			entity.setSynchronizables(synchronizables);				


			//logger.info("«this.name»User with id "+ entity.getId() + " un-serialized");
		}catch(Exception ex){
			logger.error(ex.getMessage());
			throw new ImogSerializationException(ex);
		}
		return entity;
	}

	/*
	 * (non-Javadoc)
	 * @see EntityStreamSerializer#serialize(org.imogene.data.Synchronizable, java.io.DataOutputStream)
	 */
	public void serialize(Synchronizable entity, DataOutputStream data) throws ImogSerializationException {
		//logger.info("Serializing a «this.name»User");		
		try{
			«this.name»User «this.name.toFirstLower()»User = («this.name»User)entity;			

			data.writeUTF(«this.name.toFirstLower()»User.getId());
			
			if («this.name.toFirstLower()»User.getLogin()!=null)
				data.writeUTF(«this.name.toFirstLower()»User.getLogin());
			else
				data.writeUTF("");	
			
			if («this.name.toFirstLower()»User.getPassword()!=null)
				data.writeUTF(«this.name.toFirstLower()»User.getPassword());
			else
				data.writeUTF("");			
			
			// Roles
			Set<Role> roles = «this.name.toFirstLower()»User.getRoles();
			if (roles!=null && roles.size()>0){
				String srole = new String();
				for (Role role:roles){
					srole = srole + role.getId() + SerializationConstants.COLLECTION_SEPARATOR;
				}
				data.writeUTF(srole);
			}
			else
				data.writeUTF("");
			
			// Synchronizable entities
			Set<SynchronizableEntity> synchronizables = «this.name.toFirstLower()»User.getSynchronizables();
			if (synchronizables!=null && synchronizables.size()>0){
				String ssynchronizable = new String();
				for (SynchronizableEntity synchronizable:synchronizables){
					ssynchronizable = ssynchronizable + synchronizable.getId() + SerializationConstants.COLLECTION_SEPARATOR;
				}
				data.writeUTF(ssynchronizable);
			}
			else
				data.writeUTF("");			

			
			//logger.info("«this.name»User with id "+ «this.name.toFirstLower()»ser.getId() + "serialized.");
		}catch(Exception ex){
			logger.error(ex.getMessage());
			throw new ImogSerializationException(ex);
		}
	}
	
	/**
	 * Setter for bean injection
	 * @param manager
	 */
	public void setDataHandler(GenericDataHandler dataHandler) {
		this.dataHandler = dataHandler;
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE generate(String packageName, String packagePath, String projectName) FOR CardEntity»
«ENDDEFINE»




