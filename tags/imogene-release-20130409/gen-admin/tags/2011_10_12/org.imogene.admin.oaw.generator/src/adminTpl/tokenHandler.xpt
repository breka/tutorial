«IMPORT core»
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR Project»
«FILE projectName.toLowerCase()+"/client/TokenHandler.java"»
package org.imogene.«projectName.toLowerCase()».client;

import com.google.gwt.user.client.ui.Hyperlink;
import com.google.gwt.user.client.ui.Widget;

import org.imogene.web.gwt.client.TokenHelper;
import org.imogene.web.gwt.client.TokenHelper.EntityToken;
import org.imogene.web.gwt.client.i18n.BaseNLS;
import org.imogene.notif.web.gwt.client.NotificationTemplateFormComposite;
import org.imogene.notif.web.gwt.client.NotificationTemplateListComposite;
import org.imogene.web.gwt.client.ui.panel.RoundedWrapperPanel;
import org.imogene.web.gwt.client.ui.panel.TaskWrapperPanel;

import org.imogene.«projectName.toLowerCase()».client.entity.ShortNames;
import org.imogene.«projectName.toLowerCase()».client.i18n.NLS;
«FOREACH entities AS e-»
«IF Actor.isAssignableFrom(e.metaType) -»
import org.imogene.«projectName.toLowerCase()».client.entity.«e.name.toFirstUpper()»ListComposite;
import org.imogene.«projectName.toLowerCase()».client.entity.«e.name.toFirstUpper()»FormComposite;
«ENDIF -»
«ENDFOREACH -»
«EXPAND specificImports FOR this -»

/**
 * Class wich control the creation of the views
 * associated with a token handler.
 */
public class TokenHandler {

	public static String TK_LIST = "list";
	public static String TK_VIEW = "view";
	public static String TK_NEW = "new";

	/**
	 * Create and return the view to display after
	 * this token event.
	 */
	public static Widget getViewForToken(String token){
	
		EntityToken entityToken = TokenHelper.getToken(token);
		
		if (entityToken!=null) {
				
			/* Notification */
			if (entityToken.getType().equals("notif")) {
			
				/* list view for Notification */
				if (entityToken.getAction().equals(TK_LIST)) {
					Hyperlink create = new Hyperlink("New notification", "new/notif");
					return new RoundedWrapperPanel("Notification list", new NotificationTemplateListComposite(), "notif",
							new Hyperlink[]{create});
				}
				/* new notification */
				else if (entityToken.getAction().equals(TK_NEW)) {				
					TaskWrapperPanel task = new TaskWrapperPanel("New Notification", "notif", null);
					NotificationTemplateFormComposite form = new NotificationTemplateFormComposite(new ShortNames());
					task.addForm(form);
					form.setFormContainer(task);
					return task;
				}	
				/* view a notification */
				else if (entityToken.getAction().equals(TK_VIEW)) {				
					TaskWrapperPanel task = new TaskWrapperPanel("Notification", "notif", null);
					NotificationTemplateFormComposite form = new NotificationTemplateFormComposite(new ShortNames(), entityToken.getId());
					task.addForm(form);
					form.setFormContainer(task);
					return task;
				}							
			}
						
			«FOREACH entities AS e -»
			«IF Actor.isAssignableFrom(e.metaType) -»
			/* «e.name.toFirstUpper()» */		
			else if(entityToken.getType().equals("«e.name.toLowerCase()»")){
			
				/* list view for «e.name.toFirstUpper()» */	
				if(entityToken.getAction().equals(TK_LIST)){				
					Hyperlink create = new Hyperlink(NLS.constants().«e.name.toFirstLower()»_create_title(), "new/«e.name.toLowerCase()»");
					return new RoundedWrapperPanel(NLS.constants().«e.name.toFirstLower()»_table_text(), new «e.name.toFirstUpper()»ListComposite(), "«e.name.toFirstLower()»",
						 new Hyperlink[]{create});
				}
				/* new «e.name.toFirstUpper()» */
				else if(entityToken.getAction().equals(TK_NEW)){
					//Hyperlink back = new Hyperlink("<< Back", "back");
					TaskWrapperPanel task = new TaskWrapperPanel(NLS.constants().«e.name.toFirstLower()»_create_title(),
							"«e.name.toLowerCase()»", null);
					«e.name.toFirstUpper()»FormComposite form = new «e.name.toFirstUpper()»FormComposite();
					task.addForm(form);
					form.setFormContainer(task);
					return task;
				}		
				/* view for «e.name.toFirstUpper()» */
				else if(entityToken.getAction().equals(TK_VIEW)){
					//Hyperlink back = new Hyperlink("<< Back", "back");
					TaskWrapperPanel task = new TaskWrapperPanel("«e.name.toFirstUpper()»", "«e.name.toFirstLower()»", null);
					«e.name.toFirstUpper()»FormComposite form = new «e.name.toFirstUpper()»FormComposite(entityToken.getId());				
					task.addForm(form);	
					form.setFormContainer(task);
					return task;
				}									
			}
			«ENDIF-»
			«ENDFOREACH -»	
			
			«EXPAND specificTokenHandler FOR this -»
		}	
			
		return null;
	}
}
«ENDFILE»
«ENDDEFINE»

«REM»
	Hook for specific definition by AOP «ENDREM»
«DEFINE specificTokenHandler FOR Project»«ENDDEFINE»
«DEFINE specificImports FOR Project»«ENDDEFINE»