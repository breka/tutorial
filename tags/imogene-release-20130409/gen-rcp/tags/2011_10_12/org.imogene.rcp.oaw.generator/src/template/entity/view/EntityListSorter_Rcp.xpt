«IMPORT core»

«DEFINE generate(String moduleName) FOR CardEntity»
«IF this.topLevel==true-»
«FILE moduleName.toLowerCase()+ "/view/" + this.name.toLowerCase() + "/" + this.name.toFirstUpper() + "RcpListSorter.java"-»
package org.imogene.«moduleName.toLowerCase()».view.«this.name.toLowerCase()»;

import org.eclipse.jface.viewers.Viewer;

import org.imogene.rcp.core.view.EntityListSorter;
import org.imogene.«moduleName.toLowerCase()».entity.«this.name.toFirstUpper()»;


/*
  NOT USED IN GENERATED APPLICATION
*/

/**
 * Sort the columns of the table viewer that displays the 
 * «name.toFirstUpper()» entity list.
 * @author Medes-IMPS 
 */
public class «name.toFirstUpper()»RcpListSorter extends EntityListSorter {


	public «name.toFirstUpper()»RcpListSorter() {
		super();
		«REM»Define default entity sorting«ENDREM»
		«IF columnFields.isEmpty -»
			«IF this.sortFields!=null && this.sortFields.size > 0 && this.sortFields.get(0)!=null-»
				«EXPAND getDefaultSortField(this.sortFields.get(0)) FOR mainFields-»
				«EXPAND getDefaultSortOrder FOR this.sortFields.get(0)-»	
			«ELSE -»
		propertyIndex = -1;
		direction = ASCENDING;			
			«ENDIF- »	
		«ELSE -»
			«IF this.sortFields!=null && this.sortFields.size > 0 && this.sortFields.get(0)!=null-»
				«EXPAND getDefaultSortField(this.sortFields.get(0)) FOR columnFields-»	
				«EXPAND getDefaultSortOrder FOR this.sortFields.get(0)-»
			«ELSE -»
		propertyIndex = -1;
		direction = ASCENDING;			
			«ENDIF- »			
		«ENDIF- »	
	}

	@Override
	public int compare(Viewer viewer, Object o1, Object o2) {
		«this.name.toFirstUpper()» record1 = («this.name.toFirstUpper()») o1;
		«this.name.toFirstUpper()» record2 = («this.name.toFirstUpper()») o2;
		int rc = 0;
		switch (propertyIndex) {
		
		«IF columnFields.isEmpty -»
			«EXPAND sortFields FOR mainFields-»		
		«ELSE -»
			«EXPAND sortFields FOR columnFields-»
		«ENDIF- »	
		
			default:
				rc = 0;	
		}		
		
		// If descending order, flip the direction
		if (direction == DESCENDING) {
			rc = -rc;
		}
		return rc;
	}

}

«ENDFILE»
«ENDIF»
«ENDDEFINE»



«DEFINE sortFields FOR List[FieldEntity]»	
        «FOREACH this AS field ITERATOR iter»
        	«EXPAND setupFieldSort(iter.counter0) FOR field-»
		«ENDFOREACH» 
«ENDDEFINE»

«DEFINE setupFieldSort(int counter) FOR FieldEntity-»
		case «counter»:
			if(record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
				if(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
					rc = record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»().toLowerCase().compareTo(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»().toLowerCase());
				}else{
					rc=1;
				}
			}else{
				rc = -1;
			}			
			break;
«ENDDEFINE»
«DEFINE setupFieldSort(int counter) FOR NumericField-»
		case «counter»:
			if(record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
				if(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
					rc = record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»().compareTo(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
				}else{
					rc=1;
				}
			}else{
				rc = -1;
			}			
			break;
«ENDDEFINE»
«DEFINE setupFieldSort(int counter) FOR BooleanField-»
		case «counter»:
			if(record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
				if(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
					rc = record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»().compareTo(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
				}else{
					rc=1;
				}
			}else{
				rc = -1;
			}			
			break;
«ENDDEFINE»
«DEFINE setupFieldSort(int counter) FOR DatesField-»
		case «counter»:
			if(record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
				if(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
					rc = record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»().compareTo(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
				}else{
					rc=1;
				}
			}else{
				rc = -1;
			}			
			break;
«ENDDEFINE»

«DEFINE setupFieldSort(int counter) FOR BinaryField-»
		case «counter»:		
			break;
«ENDDEFINE»
«DEFINE setupFieldSort(int counter) FOR RelationFieldEntity-»
	«IF (cardinality >1) || (cardinality == -1)-»
		case «counter»:		
			if(record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
				if(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
					Integer int1 = new Integer(record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»().size());
					Integer int2 = new Integer(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»().size());				
					rc = int1.compareTo(int2);
				}else{
					rc=1;
				}
			}else{
				rc = -1;
			}			
			break;
	«ELSE-»
		case «counter»:
			if(record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
				if(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»()!=null){
					rc = record1.«EXPAND template::CommonFieldUtil::getterName FOR this-»().getDisplayValue().toLowerCase().compareTo(record2.«EXPAND template::CommonFieldUtil::getterName FOR this-»().getDisplayValue().toLowerCase());
				}else{
					rc=1;
				}
			}else{
				rc = -1;
			}			
			break;
	«ENDIF-»
«ENDDEFINE»


«REM» Retourne la sort property d'un field «ENDREM»
«DEFINE getDefaultSortField(FieldEntity defaultSortField) FOR List[FieldEntity]-»	
	        «FOREACH this AS field ITERATOR iter-»
	        	«IF defaultSortField.name==field.name-»
		propertyIndex = «iter.counter0»;	        	
				«ENDIF-»
			«ENDFOREACH-» 			
«ENDDEFINE»

«REM» Retourne le sort order d'un field «ENDREM»
«DEFINE getDefaultSortOrder FOR FieldEntity-»
		direction = ASCENDING;
«ENDDEFINE»
«DEFINE getDefaultSortOrder FOR DateField-»
		direction = DESCENDING;
«ENDDEFINE»


