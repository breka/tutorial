«IMPORT core»

«DEFINE generate(String moduleName) FOR CardEntity»
«IF this.topLevel==true-»
«FILE moduleName.toLowerCase()+ "/view/" + this.name.toLowerCase() + "/" + this.name.toFirstUpper() + "RcpList.java"-»
package org.imogene.«moduleName.toLowerCase()».view.«this.name.toLowerCase()»;

import java.util.List;
import java.util.Locale;
import java.util.Set;

import org.apache.log4j.Logger;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.DoubleClickEvent;
import org.eclipse.jface.viewers.IDoubleClickListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.ui.IViewPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.forms.widgets.Form;
import org.eclipse.ui.forms.widgets.FormToolkit;

import org.imogene.common.dao.criteria.ImogJunction;
import org.imogene.common.data.Synchronizable;
import org.imogene.rcp.core.ImogPlugin;
import org.imogene.rcp.core.tools.DateHelper;
import org.imogene.rcp.core.view.EntityListPart;
import org.imogene.rcp.core.view.IEntityForm;
import org.imogene.rcp.core.widget.table.SynchronizableTableContentProvider;
import org.imogene.rcp.core.widget.table.TableNavigationBar;
import org.imogene.«moduleName.toLowerCase()».Plugin;
import org.imogene.«moduleName.toLowerCase()».entity.«this.name.toFirstUpper()»;
import org.imogene.«moduleName.toLowerCase()».entity.list.«this.name.toFirstUpper()»ForList;
import org.imogene.«moduleName.toLowerCase()».handler.«this.name.toFirstUpper()»Handler;
import org.imogene.«moduleName.toLowerCase()».security.AccessManager;
import org.imogene.«moduleName.toLowerCase()».wrapper.*;



/**
 * RCP View to list the «name.toFirstUpper()» entities
 * @author Medes-IMPS
 */
public class «name.toFirstUpper()»RcpList extends EntityListPart {

	private Logger logger = Logger.getLogger("org.imogene.«moduleName.toLowerCase()».view.«this.name.toLowerCase()».«name.toFirstUpper()»RcpList");

	public final static String ID = "Imog.«moduleName.toFirstUpper()».«name.toFirstUpper()».List";
	
	private TableViewer tableViewer;
	private TableNavigationBar navbar;
	private Composite containerComposite;
	
	private int maxRows = 100;
	private int startRow = 0;
	private String sortProperty = "«EXPAND template::ImogRcpFieldUtil::getFirstSortField FOR this-»";
	private boolean sortOrder = «EXPAND template::ImogRcpFieldUtil::getFirstSortFieldOrderDirection FOR this-»;
	private int totalNbOfRows = 0;
	private ImogJunction searchCriterions;
	
	private «name.toFirstUpper()»Handler handler;

	
	@Override
	public void createPartControl(Composite parent) {	
	
		super.setPartName(Messages.getString("«this.name.toFirstLower()»_viewpart_list"));
		
		/* Define read and write privileges for the current user on the current form */
		Set<String> roles = ImogPlugin.getDefault().getCurrentUserIdentity().getAssignedRoles();
		«FOREACH this.groups AS group-»
		boolean is«group.name.toFirstUpper()»FieldGroupReadable = AccessManager.canReadGroup("«name.toLowerCase()».«group.name.toLowerCase()»", roles);	
		«ENDFOREACH-»			

		/* handler initialization*/
		handler = («name.toFirstUpper()»Handler) ImogPlugin.getDefault().getDataHandlerManager().getHandler(«name.toFirstUpper()».class.getName());	
		handler.addListener(this);
		
		/* form initialization */
		FormToolkit toolkit = new FormToolkit(parent.getDisplay());	
		Form form = toolkit.createForm(parent);
		containerComposite = form.getBody();	
		
		/* layout definition */
		GridLayout viewLayout = new GridLayout(1,false);
		//viewLayout.marginWidth =0;
		viewLayout.horizontalSpacing = 0;
		viewLayout.verticalSpacing = 2;	
		containerComposite.setLayout(viewLayout);
		
		/* table initialization */
		Table table = toolkit.createTable (containerComposite, SWT.FULL_SELECTION);
		table.setLinesVisible(true);
		table.setHeaderVisible(true);
		table.setLayoutData(new GridData(GridData.FILL_BOTH));
		
		/* table viewer initialization */
		tableViewer = new TableViewer(table);
		// to remove selection when clicked outside selectable row
		tableViewer.getTable().addMouseListener(new MouseAdapter() {
			public void mouseDown(MouseEvent e) {
				if( tableViewer.getTable().getItem(new Point(e.x,e.y)) == null ) {
					tableViewer.setSelection(new StructuredSelection());
				}
			}			
		});	
		tableViewer.setContentProvider(new SynchronizableTableContentProvider());	
		tableViewer.addDoubleClickListener(new IDoubleClickListener() {
			public void doubleClick(DoubleClickEvent event) {
				openSelectedEntity(event);
			}
		});					
		
		/* table column definitions */		
		«IF columnFields.isEmpty -»
			«EXPAND setupColumnFields(this.name) FOR this.mainFields.addAll(this.secondaryFields)-»		
		«ELSE -»
			«EXPAND setupColumnFields(this.name) FOR columnFields-»
		«ENDIF- »	
		
		/* navigation bar initialization */
		navbar = new TableNavigationBar(this, toolkit);
		navbar.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		

		/* table data filling */
		updateTableData(startRow, maxRows, sortProperty, sortOrder);
		packColumns();
	}
	

	/**
	 * Updates the table entity list content
	 * @param startRow page start row
	 * @param maxRows page max number of rows
	 * @param sortProperty property used for entity list sorting
	 * @param sortOrder true if ascending
	 */
	private void updateTableData(final int startRow, final int maxRows, String sortProperty, Boolean sortOrder) {
		
		this.startRow = startRow;
		List<Synchronizable> entities;
		
		/* get data */
		if (searchCriterions != null) {
			entities = (List<Synchronizable>)handler.loadEntities(startRow, maxRows, sortProperty, sortOrder, null);
			totalNbOfRows = handler.countAll();
		}		
		else {
			entities = (List<Synchronizable>)handler.loadEntities(startRow, maxRows, sortProperty, sortOrder, null);
			totalNbOfRows = handler.countAll();
		}
		
		if (entities !=null) {

				int srcRowCount = entities.size();
				
				/* push data into table */
				tableViewer.setInput(entities);

				/* update the navigation bar information */
				int totalNbOfPages = 0;
				if ((totalNbOfRows % maxRows)==0)
					totalNbOfPages = totalNbOfRows / maxRows;
				else
					totalNbOfPages = totalNbOfRows / maxRows + 1;	
				if (totalNbOfPages==0)
					totalNbOfPages=1;
										
				int currentPageNb = 0;
				if ((startRow % maxRows)==0)
					currentPageNb = (startRow / maxRows) + 1;
				else
					currentPageNb = (startRow / maxRows) + 2;							
							
				navbar.setTotalNbOfPageText(String.valueOf(totalNbOfPages));
				navbar.setPageNbText(String.valueOf(currentPageNb));	

				if (startRow==0 && srcRowCount==0)
					navbar.setRowStatusText("0 - 0");
				else
					navbar.setRowStatusText((startRow + 1) + " - " + (startRow + srcRowCount));
				
				/* synchronize the navigation bar buttons */	
				boolean isLastPage = false;
				if(currentPageNb==totalNbOfPages) isLastPage = true;
				navbar.enableGoToFirstButton(startRow > 0);
				navbar.enableGoToPrevButton(startRow > 0);
				navbar.enableGoToNextButton(!isLastPage);
				navbar.enableGoToLastButton(!isLastPage);
		
				navbar.layout(true, true);
		}
	}	

	
	/**
	 * Packs the columns
	 */
	public void packColumns() {
		for (TableColumn column: tableViewer.getTable().getColumns()) {
			column.pack();
		}
	}	

	@Override
	public void setFocus() {		
		tableViewer.getTable().setFocus();
	}
	
	@Override
	public Composite getContainerComposite() {
		return containerComposite;
	}	
	
	/**
	 * Open the «name.toFirstUpper()» selected in the table.
	 * @param event the open event
	 */
	private void openSelectedEntity(DoubleClickEvent event){
		if (event.getSelection() instanceof IStructuredSelection) {
			Object selectedObject = ((IStructuredSelection) event
					.getSelection()).getFirstElement();
						
				IWorkbenchPage page = Plugin.getDefault()
						.getWorkbench().getActiveWorkbenchWindow()
						.getActivePage();
				try {
					if(selectedObject instanceof «name.toFirstUpper()»ForList){
						«name.toFirstUpper()» inputObject = («name.toFirstUpper()»)handler.loadEntity(((«name.toFirstUpper()»ForList) selectedObject).getId(), null);
						IViewPart lview = page.showView(«name.toFirstUpper()»RcpForm.ID, inputObject.getId(), IWorkbenchPage.VIEW_ACTIVATE);
						((IEntityForm)lview).setInput(inputObject);
					}										
				} catch (Exception ex) {
					logger.error(ex.getMessage());
				}			
		}
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.imogene.sync.client.EntityListener#entitySavedOrUpdated(Synchronizable entity)
	 */
	public void entitySavedOrUpdated(Synchronizable entity) {			
		if (tableViewer != null) {
			Display.getDefault().syncExec(new Runnable() {
				public void run() {
					if (!tableViewer.getControl().isDisposed()) {
						updateTableData(startRow, maxRows, sortProperty, sortOrder);
					}
				}
			});
		}
	}
	
	/**
	 * Refresh the table content
	 */
	public void refreshTable() {	
		updateTableData(startRow, maxRows, sortProperty, sortOrder);
	}	
		
	public  int getMaxRows() {
		return maxRows;
	}

	public int getStartRow() {
		return startRow;
	}

	public int getTotalNbOfRows() {
		return totalNbOfRows;
	}

	public void setStartRow(int row) {
		startRow = row;
	}
	
	
	/*   
	 * PRIVATE CLASSES
	 */
	
	/**
	 * Selection Adapter to define the column sorting properties
	 * @author Medes-IMPS
	 */
	private class ColumnSorterSelectionAdapter extends SelectionAdapter {

		private String csortProperty;
		private boolean defaultSortingOrder;
		
		public ColumnSorterSelectionAdapter(String psortProperty, boolean defaultSortingOrder) {
			super();
			this.csortProperty = psortProperty;
			this.defaultSortingOrder = defaultSortingOrder;
		}
		
		@Override
		public void widgetSelected(SelectionEvent e) {
			
			if (sortProperty.equals(csortProperty) ) {
				if (sortOrder)
					sortOrder = false;
				else
					sortOrder = true;
			} else {
				sortProperty = csortProperty;
				sortOrder = defaultSortingOrder;
				
			}
			startRow = 0;
			updateTableData(startRow, maxRows, sortProperty, sortOrder);
		}
	}	
			
}
«ENDFILE»
«ENDIF-»
«ENDDEFINE»


«DEFINE setupColumnFields(String entityName) FOR Collection[FieldEntity]»	
        «FOREACH this AS field ITERATOR iter»
	    if (is«field.parentGroup.name.toFirstUpper()»FieldGroupReadable) {
	        final TableViewerColumn column«iter.counter1» = new TableViewerColumn(tableViewer, SWT.NONE);
			column«iter.counter1».getColumn().setText(Messages.getString("«field.parentGroup.parentCard.name.toFirstLower()»_field_«field.name.toFirstLower()»"));		
			column«iter.counter1».setLabelProvider(new ColumnLabelProvider(){
				@Override
				public String getText(Object element) {				
					if(element instanceof «entityName.toFirstUpper()»ForList){
						String value = «EXPAND columnValue(entityName.toFirstUpper()) FOR field-»;
						if(value != null) return value;
					}
					return new String();
				}			
			});		
			column«iter.counter1».getColumn().addSelectionListener(new ColumnSorterSelectionAdapter("«EXPAND template::CommonFieldUtil::propertyName FOR field-»", «EXPAND template::ImogRcpFieldUtil::getSortBoolean FOR field-»)); 
		}
		«ENDFOREACH» 
«ENDDEFINE»

«REM»Generate the method that set the column value for a main field «ENDREM»
«DEFINE columnValue(String entityName) FOR FieldEntity-»
	((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»()
«ENDDEFINE»
«DEFINE columnValue(String entityName) FOR TextField-»
	«IF translatable»
		((«entityName»ForList)element).getLocalizedFieldMap().getFieldI18nValue(((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»(), Locale.getDefault().getLanguage())
	«ELSE»
		((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»()
	«ENDIF»
«ENDDEFINE»
«DEFINE columnValue(String entityName) FOR NumericField-»
	String.valueOf(((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»())
«ENDDEFINE»
«DEFINE columnValue(String entityName) FOR BooleanField-»
	DisplayValueWrapper.getBooleanDisplay(((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»())
«ENDDEFINE»
«DEFINE columnValue(String entityName) FOR DateField-»
	DateHelper.toString(((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»())
«ENDDEFINE»
«DEFINE columnValue(String entityName) FOR TimeField-»
	DateHelper.toStringTime(((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»())
«ENDDEFINE»
«DEFINE columnValue(String entityName) FOR DateTimeField-»
	DateHelper.toStringDateTime(((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»())
«ENDDEFINE»

«DEFINE columnValue(String entityName) FOR EnumField»
	DisplayValueWrapper.getEnumDisplayValue(«entityName».class, "«EXPAND template::CommonFieldUtil::propertyName FOR this-»", ((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»())
«ENDDEFINE»
«DEFINE columnValue(String entityName) FOR BinaryField-»
	"" «REM»TODO«ENDREM»
«ENDDEFINE»
«DEFINE columnValue(String entityName) FOR RelationFieldEntity-»
	«IF (cardinality >1) || (cardinality == -1)-»
	((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»().size()+ " " + Messages.getString("entity_card_number_txt")
	«ELSE-»
	DisplayValueWrapper.getDisplayValue(((«entityName»ForList)element).«EXPAND template::CommonFieldUtil::getterName FOR this-»())
	«ENDIF-»
«ENDDEFINE»





«DEFINE displayColumnFields FOR List[FieldEntity]»	
        «FOREACH this AS field ITERATOR iter-»	
		column«iter.counter1».getColumn().pack();		 
		«ENDFOREACH-» 
«ENDDEFINE»


