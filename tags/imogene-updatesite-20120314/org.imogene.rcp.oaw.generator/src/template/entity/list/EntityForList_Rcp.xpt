«IMPORT core»
«EXTENSION template::CommonFieldUtilExt»
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String moduleName) FOR CardEntity»
«IF this.topLevel == true -»
		«IF columnFields.isEmpty -»
			«EXPAND getFile(moduleName, this.mainFields.addAll(this.secondaryFields)) FOR this-»		
		«ELSE -»
			«EXPAND getFile(moduleName, this.columnFields) FOR this-»
		«ENDIF- »	
«ENDIF -»
«ENDDEFINE»



«REM» --------------------------------------------------------------------------- «ENDREM»
«REM» ---------------------- GET FILE CONTENT ----------------------------------- «ENDREM»
«REM» ---------------------------------------------------------------------------- «ENDREM»

«DEFINE getFile(String moduleName, Collection[FieldEntity] fieldList) FOR CardEntity»

«FILE moduleName.toLowerCase() + "/entity/list/" + name.toFirstUpper() + "ForList.java"»
package org.imogene.«moduleName.toLowerCase()».entity.list;

import java.util.Date;

import org.imogene.common.data.Synchronizable;
import org.imogene.«moduleName.toLowerCase()».wrapper.DisplayValueWrapper;
«EXPAND template::ImogRcpFieldUtil::importForFieldForList(moduleName) FOREACH fieldList-»
«IF isTranslatableFieldPresent(this.groups.fields)-»
import org.imogene.«moduleName.toLowerCase()».entity.LocalizedFieldMap;
«ENDIF»


/**
 * «this.name» Bean implementation for listing the entities
 * (only the fields that are displayed in the table columns are kept)
 * @author Medes-IMPS
 */
public class «this.name.toFirstUpper()»ForList implements Synchronizable {

	/* Synchronizable properties */
	private String id;	
	private Date modified;	
	private Date uploadDate;
	private String modifiedBy;	
	private String modifiedFrom;
	private Date created;
	private String createdBy;
	
	/* Entity properties */
	«FOREACH fieldList AS field-» 
	private «EXPAND template::ImogRcpFieldUtil::fieldTypeForList FOR field-» «EXPAND template::CommonFieldUtil::propertyName FOR field-»;
	«ENDFOREACH-»	
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	/* For localized fields */
	private LocalizedFieldMap translations;
	«ENDIF-»
	
	public «this.name.toFirstUpper()»ForList() {
		«IF isTranslatableFieldPresent(this.groups.fields)-»
		translations = new LocalizedFieldMap();
		«ENDIF»
	}
		
	
	/* Entity getters and setters */

	«FOREACH fieldList AS field-»
	
	public «EXPAND template::ImogRcpFieldUtil::fieldTypeForList FOR field-» «EXPAND template::CommonFieldUtil::getterName FOR field-»()
	{
		return «EXPAND template::CommonFieldUtil::propertyName FOR field-»;
	}
   
	public void «EXPAND template::CommonFieldUtil::setterName FOR field-»(«EXPAND template::ImogRcpFieldUtil::fieldTypeForList FOR field-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR field-» = param;
	}
	
	«REM»
	When a property has a lowercase first char and an upper case second char,
	some bean introspectors need getter/setter with type getXxxx
	and some other need getter/setter with type getxxx
	«ENDREM»
	«IF isPropertyWithLowerUpperCaseFirstTwoChar(field.name)-»
	/* second set of getter/setter because of property has first char with lowercase and second char with uppercase 
	   and bean introspectors do not use same naming conventions */
	public «EXPAND template::ImogRcpFieldUtil::fieldTypeForList FOR field-» «EXPAND template::CommonFieldUtil::getterNameForPropertyWithLowerUpperCaseFirstTwoChar FOR field-»()
	{
		return «EXPAND template::CommonFieldUtil::propertyName FOR field-»;
	}
   
	public void «EXPAND template::CommonFieldUtil::setterNameForPropertyWithLowerUpperCaseFirstTwoChar FOR field-»(«EXPAND template::ImogRcpFieldUtil::fieldTypeForList FOR field-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR field-» = param;
	}
	/* ----------------------------------------------------------------------------------------------------------- */
	«ENDIF-»		
	
	«ENDFOREACH-»
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	public LocalizedFieldMap getLocalizedFieldMap() {
		return translations;
	}

	public void setLocalizedFieldMap(LocalizedFieldMap localizedFieldMap) {
		this.translations = localizedFieldMap;
	}
	«ENDIF»

	/* Synchronizable getters and setters */
	
	public String getId() {		
		return id;
	}

	public void setId(String pId) {
		id = pId;
	}	

	public Date getModified() {
		return modified;
	}

	public void setModified(Date pModified) {
		modified = pModified;
	}	
	
	public Date getUploadDate() {
		return uploadDate;
	}
	
	public void setUploadDate(Date date) {
		uploadDate = date;
	}

	public String getModifiedBy() {
		return modifiedBy;
	}

	public void setModifiedBy(String id) {
		modifiedBy = id;
	}
	
	public String getModifiedFrom() {
		return modifiedFrom;
	}

	public void setModifiedFrom(String modifiedFrom) {
		this.modifiedFrom = modifiedFrom;
	}
	
	public Date getCreated() {
		return created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}	
	
	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}	
	
	public String getDisplayValue() {		
		return DisplayValueWrapper.getDisplayValue(this);
	}
	
		
}
«ENDFILE»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»


«DEFINE generateRelationImports(String moduleName) FOR FieldEntity-»
«ENDDEFINE»

«DEFINE generateRelationImports(String moduleName) FOR RelationFieldEntity-»
	«IF this.entity.topLevel==false-»
import org.imogene.«moduleName».entity.«this.entity.name.toFirstUpper()»;
	«ENDIF-»
«ENDDEFINE»
