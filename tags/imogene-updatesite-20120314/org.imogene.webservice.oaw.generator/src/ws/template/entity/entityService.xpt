«IMPORT core»
«EXTENSION template::CommonFieldUtilExt» 
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String packageName, String projectName) FOR CardEntity»
«FILE packageName.toLowerCase() + "/service/" + this.name.toFirstUpper() + "Service.java"»
package org.imogene.«projectName.toLowerCase()».service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import org.imogene.ws.client.RestClient;
import org.imogene.ws.criteria.BasicCriteria;
import org.imogene.ws.criteria.CriteriaConstants;
import org.imogene.ws.criteria.MedooConjunction;
import org.imogene.ws.criteria.MedooDisjunction;
import org.imogene.ws.criteria.MedooJunction;
import org.imogene.ws.entity.MedooActor;
import org.imogene.ws.http.SessionUtil;
import org.imogene.ws.security.MedooSecurityHandler;
import org.imogene.ws.sync.SyncConstants;
import org.imogene.ws.util.MedooKeyGenerator;

import org.imogene.«projectName.toLowerCase()».dao.«name.toFirstUpper()»Dao;
import org.imogene.«projectName.toLowerCase()».entity.«name.toFirstUpper()»;
import org.imogene.«projectName.toLowerCase()».entity.«name.toFirstUpper()»List;
import org.imogene.«projectName.toLowerCase()».entity.display.«name.toFirstUpper()»Display;
import org.imogene.«projectName.toLowerCase()».entity.display.«name.toFirstUpper()»DisplayList;
import org.imogene.«projectName.toLowerCase()».security.«projectName.toFirstUpper()»AccessManager;

«EXPAND importsForFilterFields(projectName) FOR this -»
«FOREACH groups.fields AS e -»
«EXPAND importsForRelation(projectName) FOR e-»
«ENDFOREACH -»
«EXPAND importForeignKeyCard(this,projectName) FOR this.eContainer-»
«IF isTranslatableFieldPresent(this.groups.fields)-»
import org.imogene.ws.dao.LocalizedTextDao;
import org.imogene.ws.entity.LocalizedField;
import org.imogene.ws.entity.LocalizedText;
import org.imogene.ws.entity.LocalizedTextList;
«ENDIF»
«IF isBinaryFieldPresent(this.groups.fields) -»
import org.imogene.ws.binary.Binary;
import org.imogene.ws.dao.BinaryDao;
«ENDIF-»

/**
 * Controller that manages the Web Service requests
 * for the entity «name.toFirstUpper()»
 * @author MEDES-IMPS
 */
@Controller
public class «name.toFirstUpper()»Service {
	
	private static Logger logger = Logger.getLogger("org.imogene.«projectName.toLowerCase()».service.«name.toFirstUpper()»Service");
	
	private «name.toFirstUpper()»Dao dao;
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	private LocalizedTextDao i18nDao;
	«ENDIF-»
	«IF isBinaryFieldPresent(this.groups.fields) -»
	/* BinaryDao for Binary Deletion */
	private BinaryDao binaryDao;
	«ENDIF-»
	«EXPAND declareDaoForForeignKeyDeletion(this) FOR this.eContainer-»	
	private RestClient restClient;
	

	
	/**
	 * Gets entities of type «name.toFirstUpper()»
	 * @return a list of «name.toFirstUpper()» serialized in XML
	 */
	@ResponseBody
	@RequestMapping(method=RequestMethod.GET, value="/«name.toLowerCase()»s")
	public «name.toFirstUpper()»List get«name.toFirstUpper()»s() {
	
		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(SessionUtil.CURRENT_USER);
		
		«name.toFirstUpper()»List list = new «name.toFirstUpper()»List();

		if («projectName.toFirstUpper()»AccessManager.canReadForm("«name.toLowerCase()»", actor.getRoles())) {
			MedooJunction junction = createFilterJuntion(actor);			
			List<«name.toFirstUpper()»> beans = dao.list«name.toFirstUpper()»(junction);					
			List<«name.toFirstUpper()»> securedBeans = (List<«name.toFirstUpper()»>) MedooSecurityHandler
					.getInstance().getPolicy().toSecure(beans, actor);
						
			list.set«name.toFirstUpper()»s(securedBeans);			
		} 
		return list;	
	}
	

	/**
	 * Gets the entity of type «name.toFirstUpper()» with the specified id
	 * @param id the entity id
	 * @return the entity serialized in XML
	 */
	@ResponseBody
	@RequestMapping(method=RequestMethod.GET, value="/«name.toLowerCase()»/{id}")
	public «name.toFirstUpper()» get«name.toFirstUpper()»(@PathVariable String id) {
	
		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(	SessionUtil.CURRENT_USER);

		«name.toFirstUpper()» securedBean = null;	

		if («projectName.toFirstUpper()»AccessManager.canReadForm("«name.toLowerCase()»", actor.getRoles())) {
			//MedooJunction junction = createFilterJuntion(actor);			
			//«name.toFirstUpper()» bean = dao.get«name.toFirstUpper()»(id, junction);
			«name.toFirstUpper()» bean = dao.get«name.toFirstUpper()»(id);
			if (bean!=null)
				securedBean = («name.toFirstUpper()»)MedooSecurityHandler.getInstance().getPolicy().toSecure(bean, actor);		
		} 
		return securedBean;	
	}	
	
	/**
	 * Saves or updates an entity of type «name.toFirstUpper()» 
	 * @param body the HTTP request body
	 * @return
	 */
	@ResponseBody
	@RequestMapping(method=RequestMethod.PUT, value="/«name.toLowerCase()»")
	public void saveOrUpdate«name.toFirstUpper()»(@RequestBody «name.toFirstUpper()» bean) {	

		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(SessionUtil.CURRENT_USER);
		
		if(«projectName.toFirstUpper()»AccessManager.canEditForm("«name.toLowerCase()»", actor.getRoles())) {
			
			if (bean!=null) {
			«REM»
			«FOREACH groups.fields AS f-»
					«EXPAND setNomadCollection FOR f -»
			«ENDFOREACH-»
			«ENDREM»
			
				if (bean.getId()==null || bean.getId().equals(""))
					bean.setId(MedooKeyGenerator.generateKeyId("«shortName»"));					
				if (bean.getCreationDate()==null)
					bean.setCreationDate(new Date());
				if (bean.getLastModificationDate()==null)
					bean.setLastModificationDate(new Date(System.currentTimeMillis()));
				if (bean.getUploadDate()==null)
					bean.setUploadDate(new Date(System.currentTimeMillis()));
				if (bean.getCreator()==null || bean.getCreator().equals(""))
					bean.setCreator(actor.getLogin());
				if (bean.getModifier()==null || bean.getModifier().equals(""))
					bean.setModifier(actor.getLogin());
				if (bean.getModifiedFrom()==null || bean.getModifiedFrom().equals(""))
					bean.setModifiedFrom(SyncConstants.WS_ID_SYS);
				
				«name.toFirstUpper()» toBeSaved = («name.toFirstUpper()»)MedooSecurityHandler.getInstance().getPolicy().toHibernate(bean, actor);
				
				dao.saveOrUpdate(toBeSaved, true);
				«FOREACH groups.fields AS f -»
				«EXPAND saveLocalizedTexts FOR f-»
				«ENDFOREACH -»	
							
			}
		}
		else
			logger.info("User '" + actor.getLogin() + "' does not have roles to save entity «name.toFirstUpper()»");
	}	
	
	«FOREACH groups.fields AS f -»
	«EXPAND getRelationFieldChilds((projectName)) FOR f-»
	«ENDFOREACH -»
	
	
	/**
	 * Deletes the entity of type «name.toFirstUpper()» with the specified id
	 * @param id the entity id
	 */
	@ResponseBody
	@RequestMapping(method = RequestMethod.DELETE, value = "/«name.toLowerCase()»/{id}")
	public void delete«name.toFirstUpper()»(@PathVariable String id) {

		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(SessionUtil.CURRENT_USER);

		if («projectName.toFirstUpper()»AccessManager.canDelete(actor.getRoles())) {
			
			«name.toFirstUpper()» entity = dao.get«name.toFirstUpper()»(id);
			if(entity!=null) {
			
			   	«IF isBinaryFieldPresent(this.groups.fields) -»
		   			«FOREACH this.groups.fields AS f-»
						«EXPAND deleteAttachedBinaries FOR f-»
					«ENDFOREACH-»
				«ENDIF-»
			   
			   «EXPAND deleteForeignKeyReference(this) FOR this.eContainer-»
		
				«IF isTranslatableFieldPresent(this.groups.fields)-»
					//Delete entity fields LocalizedTexts
			   		«EXPAND deleteLocalizedTexts FOREACH this.groups.fields-»	
				«ENDIF-»				
				
				dao.delete(entity);
			}
		}
	}	
		
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	/**
	 * Saves the localized texts that are associated to a localized field
	 * @param localizedField the localizedField
	 * @param fieldId the fieldId
	 */
	private void saveLocalizedTexts(LocalizedField localizedField, String fieldId) {
		
		if(fieldId!=null && !fieldId.equals("")) {
			if (localizedField!=null && localizedField.getTranslations()!=null) {
				LocalizedTextList translations = localizedField.getTranslations();
				// check consistency between fieldId and translations
				boolean consistent = true;
				for (LocalizedText text:translations.getLocalizedTexts()) {
					if(!text.getFieldId().equals(fieldId))
						consistent=false;
				}	
				// save translations
				if(consistent) {
					for (LocalizedText text:translations.getLocalizedTexts())
						i18nDao.saveOrUpdate(text,true);
				}
			}
		}
	}
	
	/**
	 * Deletes the LocalizedTexts that correspond to a given field
	 * @param fieldId the field id for which LocalizedTexts have to be deleted
	 */
	private void deleteLocalizedTexts(String fieldId) {
		
		if (fieldId != null && !fieldId.equals("")) {
			List<LocalizedText> texts = i18nDao.listLocalizedText(fieldId);
			if(texts!=null) {
				for(LocalizedText text:texts)
					i18nDao.delete(text);
			}
		}
	}	
	«ENDIF»
	
	
	/**
	 * REST CLIENT PART
	 */
	
	/**
	 * Pushes an entity of type «name.toFirstUpper()» with the specified id
	 * to an external Web Service
	 * @param id the entity id
	 */
	@ResponseBody
	@RequestMapping(method = RequestMethod.GET, value = "/push/«name.toLowerCase()»/{id}")
	public void push«name.toFirstUpper()»(@PathVariable String id) {
	
		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(	SessionUtil.CURRENT_USER);

		«name.toFirstUpper()» securedBean = null;	

		if («projectName.toFirstUpper()»AccessManager.canReadForm("«name.toLowerCase()»", actor.getRoles())) {
			«name.toFirstUpper()» bean = dao.get«name.toFirstUpper()»(id);
			if (bean!=null) {
				securedBean = («name.toFirstUpper()»)MedooSecurityHandler.getInstance().getPolicy().toSecure(bean, actor);	
				restClient.push(securedBean, "«name.toLowerCase()»");
			}	
		} 
	}	
	
	
	/**
	 * PART CONCERNING THE CLIENT FILTER FIELDS
	 */	
	
	@ResponseBody
	@RequestMapping(method=RequestMethod.GET, value="/filters/«name.toLowerCase()»s")
	public «name.toFirstUpper()»DisplayList get«name.toFirstUpper()»sFilter() {
	
		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(SessionUtil.CURRENT_USER);
		
		«name.toFirstUpper()»DisplayList list = new «name.toFirstUpper()»DisplayList();

		if («projectName.toFirstUpper()»AccessManager.canReadForm("«name.toLowerCase()»", actor.getRoles())) {
			MedooJunction junction = createFilterJuntion(actor);
			
			List<«name.toFirstUpper()»Display> «name.toFirstLower()»DiplayList = new ArrayList<«name.toFirstUpper()»Display>();
			List<«name.toFirstUpper()»> «name.toFirstLower()»s = dao.list«name.toFirstUpper()»(junction);
			
			«IF isTranslatableFieldPresent(this.groups.fields) || hasTranslatableEntityInRelationFields(this.mainFields)-»
				List<«name.toFirstUpper()»> securedBeans = (List<«name.toFirstUpper()»>) MedooSecurityHandler
						.getInstance().getPolicy().toSecure(«name.toFirstLower()»s, actor);
				for(«name.toFirstUpper()» «name.toFirstLower()»:securedBeans) {
			«ELSE-»
				for(«name.toFirstUpper()» «name.toFirstLower()»:«name.toFirstLower()»s) {
			«ENDIF-»
			
				«name.toFirstUpper()»Display display = new  «name.toFirstUpper()»Display();
				display.set«name.toFirstUpper()»(«name.toFirstLower()»);
				«name.toFirstLower()»DiplayList.add(display);
			}
			list.set«name.toFirstUpper()»s(«name.toFirstLower()»DiplayList);		
		} 
		return list;	
	}
	
	«FOREACH groups.fields AS f -»
	«EXPAND getRelationFieldChildsForClientFilters(projectName) FOR f-»
	«ENDFOREACH -»	
	
	/**
	 * Creates a junction based on the filter field declarations, for the current actor.
	 * @param actor the current actor
	 */
	 private MedooJunction createFilterJuntion(MedooActor actor){
	 	MedooConjunction filterConjunction = new MedooConjunction();
	 	«EXPAND handleFilterField(this.name) FOREACH this.actorFilterFields -»
	 	return filterConjunction;
	 }		
	
	
	/**
	 * Setter for bean injection
	 * @param dao
	 */
	public void setDao(«name.toFirstUpper()»Dao dao) {
		this.dao = dao;
	}
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	/**
	 * Setter for bean injection
	 * @param i18nDao
	 */
	public void setI18nDao(LocalizedTextDao i18nDao) {
		this.i18nDao = i18nDao;
	}
	«ENDIF-»
	
	«IF isBinaryFieldPresent(this.groups.fields) -»
	/**
	 * Setter for bean injection
	 * @param dao
	 */
	public void setBinaryDao(BinaryDao dao) {
		this.binaryDao = dao;
	}		
	«ENDIF-»
	
	«EXPAND setDaoForForeignKeyDeletion(this) FOR this.eContainer-»
	
	/**
	 * Setter for bean injection
	 * @param restClient
	 */	
	public void setRestClient(RestClient restClient) {
		this.restClient = restClient;
	}
	
	
}
«ENDFILE»
«ENDDEFINE»




«REM» ----------------------------------------------- «ENDREM»
«DEFINE getRelationFieldChilds(String projectName) FOR FieldEntity»«ENDDEFINE»
«DEFINE getRelationFieldChilds(String projectName) FOR RelationFieldEntity»
«IF cardinality==-1 || cardinality>1 -»
	/**
	 * Gets the entities of type «entity.name.toFirstUpper()» that are related to the entity of type «this.parentGroup.parentCard.name.toFirstUpper()» with the specified id
	 * @param id id of the entity of type «this.parentGroup.parentCard.name.toFirstUpper()»
	 * @return a list of «entity.name.toFirstUpper()» serialized in XML
	 */
	 /*
	@ResponseBody
	@RequestMapping(method=RequestMethod.GET, value="/«this.parentGroup.parentCard.name.toLowerCase()»/«name.toLowerCase()»/{id}")
	public «entity.name.toFirstUpper()»List get«name.toFirstUpper()»(@PathVariable String id) {		
		
		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(SessionUtil.CURRENT_USER);
		List<«entity.name.toFirstUpper()»> «entity.name.toFirstLower()»s = new ArrayList<«entity.name.toFirstUpper()»>();	
		
		if («projectName.toFirstUpper()»AccessManager.canReadGroup("«this.parentGroup.parentCard.name.toLowerCase()».«this.parentGroup.name.toLowerCase()»", actor.getRoles())
		&& «projectName.toFirstUpper()»AccessManager.canReadForm("«entity.name.toLowerCase()»", actor.getRoles())) {
				
			«this.parentGroup.parentCard.name.toFirstUpper()» «this.parentGroup.parentCard.name.toFirstLower()» = dao.get«this.parentGroup.parentCard.name.toFirstUpper()»(id);		
			if («this.parentGroup.parentCard.name.toFirstLower()»!=null) {
				for(«entity.name.toFirstUpper()» «entity.name.toFirstLower()» : «this.parentGroup.parentCard.name.toFirstLower()».«EXPAND template::CommonFieldUtil::getterName FOR this»()) {
					«entity.name.toFirstLower()»s.add((«entity.name.toFirstUpper()»)MedooSecurityHandler.getInstance().getPolicy().toSecure(«entity.name.toFirstLower()», actor));
				}			
			}
		}
		return new «entity.name.toFirstUpper()»List(«entity.name.toFirstLower()»s);
	}
	*/
«ELSE -»
	/**
	 * Gets the a list of «this.parentGroup.parentCard.name.toFirstUpper()» entities for a given «entity.name.toFirstUpper()»
	 * @param id the id of the «entity.name.toFirstUpper()» used to filter the «this.parentGroup.parentCard.name.toFirstUpper()» entities
	 * @return a list of «this.parentGroup.parentCard.name.toFirstUpper()» display values serialized in XML
	 */
	@ResponseBody
	@RequestMapping(method=RequestMethod.GET, value="/«this.parentGroup.parentCard.name.toLowerCase()»s/«name.toLowerCase()»/{id}")
	public «this.parentGroup.parentCard.name.toFirstUpper()»List get«this.parentGroup.parentCard.name.toFirstUpper()»sBy«name.toFirstUpper()»(@PathVariable String id) {
		
		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(SessionUtil.CURRENT_USER);
		«this.parentGroup.parentCard.name.toFirstUpper()»List list = new «this.parentGroup.parentCard.name.toFirstUpper()»List();	
		
		if («projectName.toFirstUpper()»AccessManager.canReadGroup("«this.parentGroup.parentCard.name.toLowerCase()».«this.parentGroup.name.toLowerCase()»", actor.getRoles())) {
			MedooJunction criterion = createFilterJuntion(actor);	
			BasicCriteria criteria = new BasicCriteria();
			criteria.setOperation(CriteriaConstants.RELATIONFIELD_OPERATOR_EQUAL);
			criteria.setValue(id);
			criteria.setField("«EXPAND template::CommonFieldUtil::propertyName FOR this».id");
			criterion.add(criteria);
			
			List<«this.parentGroup.parentCard.name.toFirstUpper()»> «this.parentGroup.parentCard.name.toFirstLower()»s = dao.list«this.parentGroup.parentCard.name.toFirstUpper()»(criterion);
			List<«this.parentGroup.parentCard.name.toFirstUpper()»> securedBeans = (List<«this.parentGroup.parentCard.name.toFirstUpper()»>) MedooSecurityHandler.getInstance().getPolicy().toSecure(«this.parentGroup.parentCard.name.toFirstLower()»s, actor);		
			list.set«this.parentGroup.parentCard.name.toFirstUpper()»s(securedBeans);				
		}
		
		return list;
	}
«ENDIF -»
«ENDDEFINE»

«REM» ----------------------------------------------- «ENDREM»
«DEFINE getRelationFieldChildsForClientFilters(String projectName) FOR FieldEntity»«ENDDEFINE»
«DEFINE getRelationFieldChildsForClientFilters(String projectName) FOR RelationFieldEntity»
«IF cardinality==1 -»
	/**
	 * Gets the a list of «this.parentGroup.parentCard.name.toFirstUpper()» display values for a given «entity.name.toFirstUpper()»
	 * @param id the id of the «entity.name.toFirstUpper()» used to filter the «this.parentGroup.parentCard.name.toFirstUpper()» entities
	 * @return a list of «this.parentGroup.parentCard.name.toFirstUpper()» display values serialized in XML
	 */
	@ResponseBody
	@RequestMapping(method=RequestMethod.GET, value="/filters/«this.parentGroup.parentCard.name.toLowerCase()»s/«name.toLowerCase()»/{id}")
	public «this.parentGroup.parentCard.name.toFirstUpper()»DisplayList get«this.parentGroup.parentCard.name.toFirstUpper()»sBy«name.toFirstUpper()»Filter(@PathVariable String id) {
			
		MedooActor actor = (MedooActor) SessionUtil.session().getAttribute(SessionUtil.CURRENT_USER);
		«this.parentGroup.parentCard.name.toFirstUpper()»DisplayList list = new «this.parentGroup.parentCard.name.toFirstUpper()»DisplayList();	
		
		if («projectName.toFirstUpper()»AccessManager.canReadGroup("«this.parentGroup.parentCard.name.toLowerCase()».«this.parentGroup.name.toLowerCase()»", actor.getRoles())) {
			
			MedooJunction criterion = createFilterJuntion(actor);		

			BasicCriteria criteria = new BasicCriteria();
			criteria.setOperation(CriteriaConstants.RELATIONFIELD_OPERATOR_EQUAL);
			criteria.setValue(id);
			criteria.setField("«EXPAND template::CommonFieldUtil::propertyName FOR this».id");
			criterion.add(criteria);
		
			List<«this.parentGroup.parentCard.name.toFirstUpper()»Display> «this.parentGroup.parentCard.name.toFirstLower()»DiplayList = new ArrayList<«this.parentGroup.parentCard.name.toFirstUpper()»Display>();
			List<«this.parentGroup.parentCard.name.toFirstUpper()»> «this.parentGroup.parentCard.name.toFirstLower()»s = dao.list«this.parentGroup.parentCard.name.toFirstUpper()»(criterion);
			for(«this.parentGroup.parentCard.name.toFirstUpper()» «this.parentGroup.parentCard.name.toFirstLower()»:«this.parentGroup.parentCard.name.toFirstLower()»s) {
				«this.parentGroup.parentCard.name.toFirstUpper()»Display display = new  «this.parentGroup.parentCard.name.toFirstUpper()»Display();
				display.set«this.parentGroup.parentCard.name.toFirstUpper()»(«this.parentGroup.parentCard.name.toFirstLower()»);
				«this.parentGroup.parentCard.name.toFirstLower()»DiplayList.add(display);
			}
			list.set«this.parentGroup.parentCard.name.toFirstUpper()»s(«this.parentGroup.parentCard.name.toFirstLower()»DiplayList);
		}
		return list;
	}
	
«ENDIF -»
«ENDDEFINE»


«REM» Imports implied by the relation fields «ENDREM»
«DEFINE importsForRelation(String projectName) FOR FieldEntity-»«ENDDEFINE»
«DEFINE importsForRelation(String projectName) FOR RelationFieldEntity-»
import org.imogene.«projectName.toLowerCase()».entity.«entity.name.toFirstUpper()»;
«IF cardinality==-1 || cardinality>1 -»
import org.imogene.«projectName.toLowerCase()».entity.«entity.name.toFirstUpper()»List;
«ENDIF -»
«ENDDEFINE»



«REM»---------------------------------------------------- «ENDREM»
«REM»-------------------- FILTER FIELDS ----------------- «ENDREM»
«REM»---------------------------------------------------- «ENDREM»

«REM» Imports for filter fields «ENDREM»
«DEFINE importsForFilterFields(String projectName) FOR CardEntity -»
	«FOREACH this.actorFilterFields AS actorField-»
import org.imogene.«projectName.toLowerCase()».entity.«actorField.actorField.parentActor.name.toFirstUpper()»;
import org.imogene.«projectName.toLowerCase()».entity.«actorField.entityField.entity.name.toFirstUpper()»;
	«ENDFOREACH-»
«ENDDEFINE»

«REM» Filter field handling «ENDREM»
«DEFINE handleFilterField(String entityName) FOR ActorFilter -»
	/* add filter field for actor «actorField.parentActor.name.toFirstUpper()» */
	if(actor instanceof «actorField.parentActor.name.toFirstUpper()»){	
		MedooJunction «actorField.name.toFirstLower()»«this.entityField.name.toFirstUpper()» = new MedooDisjunction();
		for(Object «entityField.entity.name.toFirstLower()»:((«actorField.parentActor.name.toFirstUpper()»)actor).«EXPAND template::CommonFieldUtil::getterName FOR this.actorField»()){
			BasicCriteria criteria = new BasicCriteria();
			criteria.setOperation(CriteriaConstants.STRING_OPERATOR_EQUAL);
			criteria.setField("«EXPAND template::CommonFieldUtil::propertyName FOR this.entityField».id");
			criteria.setValue(((«entityField.entity.name.toFirstUpper()»)«this.entityField.entity.name.toFirstLower()»).getId());
			«actorField.name.toFirstLower()»«this.entityField.name.toFirstUpper()».add(criteria);
		}
		filterConjunction.add(«actorField.name.toFirstLower()»«this.entityField.name.toFirstUpper()»);
	}
«ENDDEFINE»

«REM»---------------------------------------------------- «ENDREM»
«REM»-------------------- LOCALIZED FIELDS -------------- «ENDREM»
«REM»---------------------------------------------------- «ENDREM»

«DEFINE saveLocalizedTexts FOR FieldEntity-»«ENDDEFINE»
«DEFINE saveLocalizedTexts FOR TextField-»
«IF this.translatable -»
saveLocalizedTexts(toBeSaved.«EXPAND template::CommonFieldUtil::getterName FOR this»LocalizedField(), toBeSaved.«EXPAND template::CommonFieldUtil::getterName FOR this»());
«ENDIF -»
«ENDDEFINE»

«REM»---------------------------------------------------- «ENDREM»
«REM»----------------- DELETE FOREIGN KEYS -------------- «ENDREM»
«REM»---------------------------------------------------- «ENDREM»

«REM» ------------------------------------------ 
      Imports classes for foreign key deletion
------------------------------------------------«ENDREM»
«DEFINE importForeignKeyCard(CardEntity cardEntity, String projectName) FOR emf::EObject-»
«ENDDEFINE»
«DEFINE importForeignKeyCard(CardEntity cardEntity, String projectName) FOR Project-»
		«FOREACH entities AS e-»				
			 «FOREACH e.groups.fields AS field-»		 
			 	«EXPAND importForeignKeyCardReference(cardEntity,projectName) FOR field-»
			«ENDFOREACH-» 	   	   
	    «ENDFOREACH-»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»
«DEFINE importForeignKeyCardReference(CardEntity cardEntity, String projectName) FOR FieldEntity-»«ENDDEFINE»
«DEFINE importForeignKeyCardReference(CardEntity cardEntity, String projectName) FOR RelationFieldEntity-»
«IF cardEntity.name==this.entity.name -»	
	«IF (this.cardinality == 1 && !(ReverseRelationFieldEntity.isAssignableFrom(this.metaType) && (getOppositeCardinality(this) == 1)))
	|| (this.cardinality != 1 && (getOppositeCardinality(this) != 1))-»	
import org.imogene.«projectName.toLowerCase()».entity.«this.parentGroup.parentCard.name.toFirstUpper()»;
import org.imogene.«projectName.toLowerCase()».dao.«this.parentGroup.parentCard.name.toFirstUpper()»Dao;
     «ENDIF -»
«ENDIF -»
«ENDDEFINE»
«REM» ------------------------------------------ «ENDREM»

«REM» ------------------------------------------ 
      Declare DAO for foreign key deletion
------------------------------------------------«ENDREM»
«DEFINE declareDaoForForeignKeyDeletion(CardEntity cardEntity) FOR emf::EObject-»«ENDDEFINE»
«DEFINE declareDaoForForeignKeyDeletion(CardEntity cardEntity) FOR Project-»
		«FOREACH entities AS e-»		
			 «FOREACH e.groups.fields AS field-»
			 	«EXPAND declareDaoForForeignKey(cardEntity) FOR field-»
			«ENDFOREACH-» 	   	   
	    «ENDFOREACH-»	    
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»
«DEFINE declareDaoForForeignKey(CardEntity cardEntity) FOR FieldEntity-»«ENDDEFINE»
«DEFINE declareDaoForForeignKey(CardEntity cardEntity) FOR RelationFieldEntity-»
«IF cardEntity.name==this.entity.name -»	
	«IF (this.cardinality == 1 && !(ReverseRelationFieldEntity.isAssignableFrom(this.metaType) && (getOppositeCardinality(this) == 1)))
	|| (this.cardinality != 1 && (getOppositeCardinality(this) != 1))-»	
	/* «this.parentGroup.parentCard.name.toFirstUpper()»Dao for Foreign Key Deletion */	
	private «this.parentGroup.parentCard.name.toFirstUpper()»Dao «this.parentGroup.parentCard.name.toFirstLower()»«this.name.toFirstUpper()»Dao;	
     «ENDIF -»
«ENDIF -»
«ENDDEFINE»
«REM» ------------------------------------------ «ENDREM»

«REM» ------------------------------------------ 
      Set DAO for foreign key deletion
------------------------------------------------«ENDREM»
«DEFINE setDaoForForeignKeyDeletion(CardEntity cardEntity) FOR emf::EObject-»«ENDDEFINE»
«DEFINE setDaoForForeignKeyDeletion(CardEntity cardEntity) FOR Project-»
		«FOREACH entities AS e-»		
			 «FOREACH e.groups.fields AS field-»
			 	«EXPAND setDaoForForeignKey(cardEntity) FOR field-»
			«ENDFOREACH-» 	   	   
	    «ENDFOREACH-»	    
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»
«DEFINE setDaoForForeignKey(CardEntity cardEntity) FOR FieldEntity-»«ENDDEFINE»
«DEFINE setDaoForForeignKey(CardEntity cardEntity) FOR RelationFieldEntity-»
«IF cardEntity.name==this.entity.name -»	
	«IF (this.cardinality == 1 && !(ReverseRelationFieldEntity.isAssignableFrom(this.metaType) && (getOppositeCardinality(this) == 1)))
	|| (this.cardinality != 1 && (getOppositeCardinality(this) != 1))-»	
	/**
	 * Setter for bean injection
	 * @param dao
	 */
	public void set«this.parentGroup.parentCard.name.toFirstUpper()»«this.name.toFirstUpper()»Dao(«this.parentGroup.parentCard.name.toFirstUpper()»Dao dao) {
		this.«this.parentGroup.parentCard.name.toFirstLower()»«this.name.toFirstUpper()»Dao = dao;
	}     
     «ENDIF -»
«ENDIF -»
«ENDDEFINE»
«REM» ------------------------------------------ «ENDREM»



«REM» ------------------------------------------ 
      Delete foreign key references
------------------------------------------------«ENDREM»
«DEFINE deleteForeignKeyReference(CardEntity cardEntity) FOR emf::EObject-»«ENDDEFINE»
«DEFINE deleteForeignKeyReference(CardEntity cardEntity) FOR Project-»
		«FOREACH entities AS e-»		
			 «FOREACH e.groups.fields AS field-»
			 	«EXPAND deleteRelationFieldCard1Reference(cardEntity) FOR field-»
			«ENDFOREACH-» 	   	   
	    «ENDFOREACH-»    
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»

«DEFINE deleteRelationFieldCard1Reference(CardEntity cardEntity) FOR FieldEntity-»«ENDDEFINE»
«DEFINE deleteRelationFieldCard1Reference(CardEntity cardEntity) FOR RelationFieldEntity-»
«IF cardEntity.name==this.entity.name -»	
	«IF this.cardinality == 1 && !(ReverseRelationFieldEntity.isAssignableFrom(this.metaType) && (getOppositeCardinality(this) == 1))-»
	«REM»OK for cardinality==1 with the exception of the reverseRelationField of a 1:1 relation«ENDREM»
		«EXPAND deleteForeignKeyCard1 FOR this-»
	«ELSE -»	
		«IF this.cardinality != 1 && (getOppositeCardinality(this) != 1)-»
			«EXPAND deleteForeignKeyCardN FOR this-»		
		«ENDIF -»	
    «ENDIF -»
«ENDIF -»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»

«DEFINE deleteForeignKeyCard1 FOR FieldEntity-»
		// Delete foreign key reference for field «this.name» of entity «this.parentGroup.parentCard.name»
        MedooJunction searchCriterionsFor«this.parentGroup.parentCard.name»«this.name» = new MedooConjunction();
		BasicCriteria criteria«this.parentGroup.parentCard.name»«this.name» = new BasicCriteria();
		criteria«this.parentGroup.parentCard.name»«this.name».setOperation(CriteriaConstants.RELATIONFIELD_OPERATOR_EQUAL);
		criteria«this.parentGroup.parentCard.name»«this.name».setValue(entity.getId());
		criteria«this.parentGroup.parentCard.name»«this.name».setField("«EXPAND template::CommonFieldUtil::propertyName FOR this-».id");
		searchCriterionsFor«this.parentGroup.parentCard.name»«this.name».add(criteria«this.parentGroup.parentCard.name»«this.name»);    

		List<«this.parentGroup.parentCard.name.toFirstUpper()»> resultFor«this.parentGroup.parentCard.name»«this.name» = «this.parentGroup.parentCard.name.toFirstLower()»«this.name.toFirstUpper()»Dao.list«this.parentGroup.parentCard.name.toFirstUpper()»("«EXPAND template::CommonFieldUtil::getFirstSortField FOR this.parentGroup.parentCard-»", «EXPAND template::CommonFieldUtil::getFirstSortFieldOrderDirection FOR this.parentGroup.parentCard-»,searchCriterionsFor«this.parentGroup.parentCard.name»«this.name»);
		if (resultFor«this.parentGroup.parentCard.name»«this.name»!=null)
		{
			for («this.parentGroup.parentCard.name.toFirstUpper()» foreignEntity: resultFor«this.parentGroup.parentCard.name»«this.name»)
			{
	           	foreignEntity.setLastModificationDate(new Date());
	           	foreignEntity.«EXPAND template::CommonFieldUtil::setterName FOR this-»(null);
	           	«this.parentGroup.parentCard.name.toFirstLower()»«this.name.toFirstUpper()»Dao.saveOrUpdate(foreignEntity, false);      
        	}	
		}		
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»

«DEFINE deleteForeignKeyCardN FOR FieldEntity-»
		// Delete foreign key reference for field «this.name» of entity «this.parentGroup.parentCard.name»
		List<«this.parentGroup.parentCard.name.toFirstUpper()»> resultFor«this.parentGroup.parentCard.name»«this.name» = «this.parentGroup.parentCard.name.toFirstLower()»«this.name.toFirstUpper()»Dao
		.listAffectedCardNProperty("«EXPAND template::CommonFieldUtil::propertyName FOR this-»", entity.getId());
		if (resultFor«this.parentGroup.parentCard.name»«this.name»!=null)
		{
			for («this.parentGroup.parentCard.name.toFirstUpper()» foreignEntity: resultFor«this.parentGroup.parentCard.name»«this.name»)
			{
	           	foreignEntity.setLastModificationDate(new Date());
	           	foreignEntity.removeFrom«EXPAND template::CommonFieldUtil::propertyName FOR this-»(entity);
	           	«this.parentGroup.parentCard.name.toFirstLower()»«this.name.toFirstUpper()»Dao.saveOrUpdate(foreignEntity, false);      
        	}	
		}
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»


«REM» ------------------------------------------------«ENDREM»
«DEFINE deleteAttachedBinaries FOR FieldEntity-»«ENDDEFINE»
«DEFINE deleteAttachedBinaries FOR BinaryField-»
		// Delete attached binary for field «this.name»
		String «this.name»Id = entity.«EXPAND template::CommonFieldUtil::getterName FOR this-»();
		if («this.name»Id!=null && !«this.name»Id.equals("")) {
			Binary «this.name.toFirstLower()» = binaryDao.getBinary(«this.name»Id);
			if («this.name.toFirstLower()»!=null)
				binaryDao.deleteBinary(«this.name.toFirstLower()»);
		}
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»

«REM» ------------------------------------------------«ENDREM»
«DEFINE deleteLocalizedTexts FOR FieldEntity-»«ENDDEFINE»
«DEFINE deleteLocalizedTexts FOR TextField-»
	«IF this.translatable-»
		deleteLocalizedTexts(entity.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
	«ENDIF-»
«ENDDEFINE»
«REM» ------------------------------------------------«ENDREM»




«REM»
«DEFINE setNomadCollection FOR FieldEntity-»«ENDDEFINE»
«DEFINE setNomadCollection FOR RelationFieldEntity-»
«IF this.cardinality!=1 -»
				/* specific behavior for Nomad, when collection is null - > do not do anything */
				if(bean.getId()!=null && !bean.getId().equals("") && bean.«EXPAND template::CommonFieldUtil::getterName FOR this»()==null) {
					«this.parentGroup.parentCard.name.toFirstUpper()» existing = dao.get«this.parentGroup.parentCard.name.toFirstUpper()»(bean.getId());
					if(existing!=null)
						bean.«EXPAND template::CommonFieldUtil::setterName FOR this»(existing.«EXPAND template::CommonFieldUtil::getterName FOR this»());
				}			
				/* when collection is not null but empty -> remove reference to entities */
«ENDIF -»
«ENDDEFINE»
«ENDREM»
