«IMPORT core»
«DEFINE generate(String packageName, String modelName) FOR Project»
«FILE modelName.toLowerCase()+"/server/servlet/EncryptionServlet.java"»
package org.imogene.«modelName.toLowerCase()».server.servlet;

import java.io.IOException;
import java.io.OutputStream;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import org.imogene.«modelName.toLowerCase()».client.entity.ShortNames;
import org.imogene.web.gwt.common.entity.ImogActor;
import org.imogene.web.gwt.common.entity.ImogRole;
import org.imogene.web.server.ServerConstants;
import org.imogene.web.server.dao.GenericDao;
import org.imogene.encryption.EncryptionManager;

/**
 * Servlet that permits to access to a binary file for download.
 * @author Medes-IMPS 
 */
public class EncryptionServlet extends HttpServlet {
		
	private final static String ID_PARAM = "imog.ident.id=";
	private final static String LOGIN_PARAM = "imog.ident.login=";
	private final static String PASSWORD_PARAM = "imog.ident.password=";
	private final static String ROLES_PARAM = "imog.ident.roles=";
	private final static String ROLES_SEPARATOR = ";";
	
	private final static String PARAM_TYPE="type";
	private final static String PARAM_ID="id";	
	
	/* dao part */
	private GenericDao genericDao;
	
	/* encryptionManager for encrypting id file */
	private EncryptionManager encryptionManager;
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(config.getServletContext());		
		genericDao = (GenericDao)wac.getBean("genericDao");	
		encryptionManager = (EncryptionManager) wac.getBean("encryptionManager");
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		if (req.getSession().getAttribute(ServerConstants.SESSION_USER) != null) {	
			String actorShortName = req.getParameter(PARAM_TYPE);
			String actorId = req.getParameter(PARAM_ID);
			Class<?> actorClass = getActorClass(actorShortName);
			if(actorClass!=null){
				ImogActor actor = (ImogActor)genericDao.loadEntity(actorClass, actorId);
				if(actor!=null){
					StringBuffer imogId = new StringBuffer();
					imogId.append(ID_PARAM).append(actor.getId());
					imogId.append("\n");
					imogId.append(LOGIN_PARAM).append(actor.getLogin());
					imogId.append("\n");
					imogId.append(PASSWORD_PARAM).append(actor.getPassword());
					imogId.append("\n");
					imogId.append(ROLES_PARAM);
					if(actor.getRoles()!=null && actor.getRoles().size()>0){
						StringBuffer roles = new StringBuffer();
						for(ImogRole role : actor.getRoles()){
							roles.append(role.getId());
							roles.append(ROLES_SEPARATOR);
						}
						imogId.append(roles.toString());
					}
					imogId.append("\n");
					imogId.append("\n");
					imogId.append("/*------- end of the id file -------*/");
					resp.setHeader("Content-Disposition", "attachment; filename=\""+ actor.getId()+ ".imogid" + "\"");
					resp.setContentType("application/octet-stream");
					OutputStream out = encryptionManager.getEncryptedOutputStream(resp.getOutputStream());
					out.write(imogId.toString().getBytes());					
				}
			}
			else{
				resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
			}			
			
		} else {
			resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
		}
	}
	
	/**
	 * Get the actor class from the its short name
	 * @param shortName the actor short name
	 * @return the actor class or null if it doesn't exist
	 */
	private Class<?> getActorClass(String shortName){		
		try{
			return Class.forName(new ShortNames().getClassName(shortName)+"Actor");
		}catch(Exception ex){
			ex.printStackTrace();
		}
		return null;
	}
}
«ENDFILE»
«ENDDEFINE»