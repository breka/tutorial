«IMPORT core»
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR CardEntity»«REM»«ENDDEFINE»
«DEFINE generate(String packageName, String projectName, boolean gmaps) FOR Actor»«ENDREM»
«FILE projectName.toLowerCase()+"/server/servlet/"+ name.toFirstUpper()+"ServiceServlet.java"»
package org.imogene.«projectName.toLowerCase()».server.servlet;

import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;

import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import net.sf.gilead.core.PersistentBeanManager;
import net.sf.gilead.gwt.PersistentRemoteService;

import org.imogene.«projectName.toLowerCase()».client.entity.«name.toFirstUpper()»;
import org.imogene.«projectName.toLowerCase()».client.remote.«name.toFirstUpper()»Service;
import org.imogene.«projectName.toLowerCase()».server.dao.«name.toFirstUpper()»Dao;
import org.imogene.web.gwt.common.criteria.ImogJunction;
import org.imogene.web.gwt.common.criteria.ImogConjunction;
import org.imogene.web.gwt.common.entity.ImogActor;
import org.imogene.web.server.ServerConstants;
«EXPAND importsForFilterFields(projectName) FOR this -»
«FOREACH groups.fields AS e -»
«EXPAND importsForRelation(projectName) FOR e-»
«ENDFOREACH -»

@SuppressWarnings("serial")
public class «name.toFirstUpper()»ServiceServlet extends PersistentRemoteService implements «name.toFirstUpper()»Service {
		
	private «name.toFirstUpper()»Dao «name.toFirstLower()»Dao;			
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
		WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(config.getServletContext());
		setBeanManager((PersistentBeanManager)wac.getBean("beanManager"));
		«name.toFirstLower()»Dao =(«name.toFirstUpper()»Dao)wac.getBean("«name.toFirstLower()»Dao");		
	}	
	
	/**
	 * Load the entity with the specified id
	 * @param entityId the entity id
	 * @return the entity or null
	 */
	public «name.toFirstUpper()» get«name.toFirstUpper()»(String entityId){
		return «name.toFirstLower()»Dao.get«name.toFirstUpper()»(entityId);
	}
	
	/**
	 * List entities of type «name.toFirstUpper()»
	 * @param i first index to retrieve
	 * @param j nb of items to retrieve
	 * @param sortProperty the property used to sort the collection
	 * @param sortOrder true for an ascendant sort
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»(int i, int j, String sortProperty, boolean sortOrder){
		ImogJunction junction = createFilterJuntion((ImogActor)getThreadLocalRequest().getSession().getAttribute(ServerConstants.SESSION_USER));
		return «name.toFirstLower()»Dao.list«name.toFirstUpper()»(i, j, sortProperty, sortOrder, junction);
	}
	
	/**
	 * List entities of type «name.toFirstUpper()»
	 * @param i first index to retrieve
	 * @param j nb of items to retrieve
	 * @prama criterion request criteria
	 * @param sortProperty the property used to sort the collection
	 * @param sortOrder true for an ascendant sort
	 * @return list of «name.toFirstLower()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»(int i, int j, ImogJunction criterion, String property, boolean sortOrder){
		ImogJunction junction = createFilterJuntion((ImogActor)getThreadLocalRequest().getSession().getAttribute(ServerConstants.SESSION_USER));
		junction.add(criterion);
		return «name.toFirstLower()»Dao.list«name.toFirstUpper()»(i, j, property, sortOrder, junction);
	}
	
	/**
	 * List all the entities of type «name.toFirstUpper()»
	 */
	public List<«name.toFirstUpper()»> list«name.toFirstUpper()»(){
		return «name.toFirstLower()»Dao.list«name.toFirstUpper()»();
	}
	
	/**
	 * Count number of «name.toFirstLower()» in the database
	 * @return the count
	 */
	public int count«name.toFirstUpper()»(){
		return «name.toFirstLower()»Dao.count«name.toFirstUpper()»();
	}
	
	/**
	 * Count number of «name.toFirstLower()» in the database, 
	 * that matches the criteria
	 * @return the count
	 */
	public int count«name.toFirstUpper()»(ImogJunction criterion){
		return «name.toFirstLower()»Dao.count«name.toFirstUpper()»(criterion);
	}
	
	/**
	 * Save or update the entity
	 * @param entity the entity to save or update
	 * @param isNew true if it is a new entity added for the first time.
	 */
	public void saveOrUpdate(«name.toFirstUpper()» entity, boolean isNew){
		«name.toFirstLower()»Dao.saveOrUpdate(entity, isNew);
	}
	
	/**
	 * Save or update the entity without modifing teh uploadate
	 * @param entity the entity to save or update
	 * @param isNew true if it is a new entity added for the first time.
	 */
	public void saveOrUpdateShadow(«name.toFirstUpper()» entity, boolean isNew){
		«name.toFirstLower()»Dao.saveOrUpdateShadow(entity, isNew);
	}
	
	/* relation dependences */
	«FOREACH groups.fields AS f -»
		«EXPAND methodsForRelation(name.toFirstUpper()) FOR f -»
	«ENDFOREACH -»
	
	/**
	 * Create a junction based on the filter field declarations, for the current actor.
	 * @param actor the current actor
	 */
	 private ImogJunction createFilterJuntion(ImogActor actor){
	 	ImogConjunction filterConjunction = new ImogConjunction();
	 	«EXPAND handleFilterField(this.name) FOREACH this.actorFilterFields -»
	 	return filterConjunction;
	 }
	
	«EXPAND specificPart FOR this -»		
}

«ENDFILE»
«ENDDEFINE»

«REM» Imports implied by the relation fields «ENDREM»
«DEFINE importsForRelation(String projectName) FOR FieldEntity»«ENDDEFINE»
«DEFINE importsForRelation(String projectName) FOR RelationFieldEntity»
«IF cardinality==-1 || cardinality>1 -»
import org.imogene.«projectName.toLowerCase()».client.entity.«entity.name.toFirstUpper()»;
«ENDIF -»
«ENDDEFINE»


«DEFINE methodsForRelation(String parentEntityType) FOR FieldEntity»«ENDDEFINE»
«DEFINE methodsForRelation(String parentEntityType) FOR RelationFieldEntity»
«IF cardinality ==-1 || cardinality>1»
/**
 * List associated «entity.name.toFirstUpper()», 
 * on the field «name.toFirstLower()»
 * @param parent the parent entity
 * @return the list of the associated entities
 */
public List<«entity.name.toFirstUpper()»> list«entity.name.toFirstUpper()»(«parentEntityType» parent){
	return «parentEntityType.toFirstLower()»Dao.list«entity.name.toFirstUpper()»(parent);
}
«ENDIF»
«ENDDEFINE»

«REM» AOP specification part hook «ENDREM»
«DEFINE specificPart FOR CardEntity»«ENDDEFINE»

«REM»---------------------------------------------------- «ENDREM»
«REM»-------------------- FILTER FIELDS ----------------- «ENDREM»

«REM» imports for filter fields «ENDREM»
«DEFINE importsForFilterFields(String projectName) FOR CardEntity -»
	import org.imogene.web.gwt.common.criteria.BasicCriteria;
	import org.imogene.web.gwt.common.criteria.CriteriaConstants;	
	import org.imogene.web.gwt.common.criteria.ImogDisjunction;
	«FOREACH this.actorFilterFields AS actorField»
	import org.imogene.«projectName.toLowerCase()».client.entity.«actorField.actorField.parentActor.name.toFirstUpper()»;
	import org.imogene.«projectName.toLowerCase()».client.entity.«actorField.entityField.entity.name.toFirstUpper()»;
	«ENDFOREACH»
«ENDDEFINE»

«REM» Filter field handling «ENDREM»
«DEFINE handleFilterField(String entityName) FOR ActorFilter -»
	/* add filter field for actor «actorField.parentActor.name.toFirstUpper()» */
	if(actor instanceof «actorField.parentActor.name.toFirstUpper()»){	
		ImogJunction «actorField.name.toFirstLower()»«this.entityField.name.toFirstUpper()» = new ImogDisjunction();
		for(Object «entityField.entity.name.toFirstLower()»:((«actorField.parentActor.name.toFirstUpper()»)actor).«EXPAND template::CommonFieldUtil::getterName FOR this.actorField»()){
			BasicCriteria criteria = new BasicCriteria();
			criteria.setOperation(CriteriaConstants.STRING_OPERATOR_EQUAL);
			criteria.setField("«EXPAND template::CommonFieldUtil::propertyName FOR this.entityField».id");
			criteria.setValue(((«entityField.entity.name.toFirstUpper()»)«this.entityField.entity.name.toFirstLower()»).getId());
			«actorField.name.toFirstLower()»«this.entityField.name.toFirstUpper()».add(criteria);
		}
		filterConjunction.add(«actorField.name.toFirstLower()»«this.entityField.name.toFirstUpper()»);
	}
«ENDDEFINE»