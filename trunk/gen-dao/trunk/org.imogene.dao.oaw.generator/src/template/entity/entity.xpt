«IMPORT core»
«EXTENSION template::CommonFieldUtilExt» 
«EXTENSION template::CommonEntityUtilExt» 

«DEFINE generate(String projectName) FOR CardEntity»
«FILE projectName.toLowerCase()+"/entity/"+this.name.toFirstUpper() + ".java"»
package org.imogene.«projectName.toLowerCase()».entity;

import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import com.thoughtworks.xstream.annotations.XStreamOmitField;

import org.imogene.lib.common.entity.ImogActorImpl;
import org.imogene.lib.common.entity.ImogBeanImpl;
import org.imogene.lib.common.entity.IsGeoreferenced;
import org.imogene.lib.common.role.ImogRole;
import org.imogene.lib.common.sync.entity.SynchronizableEntity;

/**
 * ImogBean implementation for the entity «name.toFirstUpper()»
 * @author MEDES-IMPS
 */

public class «name.toFirstUpper()» extends «IF Actor.isAssignableFrom(this.metaType)»ImogActorImpl«ELSE»ImogBeanImpl«ENDIF»«IF this.georeferenced!=null» implements IsGeoreferenced«ENDIF» {

	«IF Actor.isAssignableFrom(this.metaType)-»
	private static final String[] AUTHORIZED_ROLES = new String[] {
		«IF !((Actor)this).authorizedRoles.isEmpty»
			«FOREACH ((Actor) this).authorizedRoles AS role SEPARATOR ','»"«role.name»"«ENDFOREACH»   
		«ELSE»
			«FOREACH ((Project) this.eContainer).roles  AS role SEPARATOR ','»"«role.name»"«ENDFOREACH»,
			"administrator",
			"delete",
			"export"
		«ENDIF -»  
	};
	«ENDIF-»
	
	/* Entity fields */	
	«EXPAND fieldDeclaration FOREACH groups.fields-»
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	/* For localized fields */
	@Transient
	private LocalizedFieldMap localizedFieldMap = new LocalizedFieldMap();	
	«ENDIF»
	
	
	public «name.toFirstUpper()»(){
		«IF Actor.isAssignableFrom(this.metaType) && ((Actor) this).notificationInfos != null-»
		Map<String, String> map = new HashMap<String, String>();
		«FOREACH ((Actor)this).notificationInfos AS nf-»
		map.put("«nf.method»", "«EXPAND template::CommonFieldUtil::getterName FOR nf.dataField-»");
		«ENDFOREACH -»
		setNotificationData(map);
		«ENDIF-»
	}
	
	/* Getters and Setters for Entity fields */
	
	«FOREACH groups AS g-»
	/* Getters and Setters for «g.name.toFirstUpper()» group fields */
	«FOREACH g.fields AS f -»
	«EXPAND template::DaoFieldUtil::getterDeclarationForField FOR f»
	«EXPAND template::DaoFieldUtil::setterDeclarationForField FOR f»	
	«REM»
	When a property has a lowercase first char and an upper case second char,
	some bean introspectors need getter/setter with type getXxxx
	and some other need getter/setter with type getxxx
	«ENDREM»
	«IF isPropertyWithLowerUpperCaseFirstTwoChar(f.name)-»
	/* second set of getter/setter because of property has first char with lowercase and second char with uppercase 
	   and bean introspectors do not use same naming conventions */
	«EXPAND template::DaoFieldUtil::getterDeclarationForFieldWithLowerUpperCaseFirstTwoChar FOR f»
	«EXPAND template::DaoFieldUtil::setterDeclarationForFieldWithLowerUpperCaseFirstTwoChar FOR f-»
	/* ----------------------------------------------------------------------------------------------------------- */
	«ENDIF-»
	
	«IF RelationFieldEntity.isAssignableFrom(f.metaType) && (((RelationFieldEntity)f).cardinality != 1)-»
	/**
	 * @param param the «((RelationFieldEntity)f).entity.name-» to add to the «EXPAND template::CommonFieldUtil::propertyName FOR f-» collection
	 */
	public void addTo«EXPAND template::CommonFieldUtil::propertyName FOR f-»(«((RelationFieldEntity)f).entity.name.toFirstUpper()-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR f-».add(param);
	}	
	
	/**
	 * @param param the «((RelationFieldEntity)f).entity.name-» to remove from the «EXPAND template::CommonFieldUtil::propertyName FOR f-» collection
	 */
	public void removeFrom«EXPAND template::CommonFieldUtil::propertyName FOR f-»(«((RelationFieldEntity)f).entity.name.toFirstUpper()-» param)
	{
		«EXPAND template::CommonFieldUtil::propertyName FOR f-».remove(param);
	}	
	«ENDIF-»	
	
	
	«ENDFOREACH -»	
	«ENDFOREACH»
	
	«IF isTranslatableFieldPresent(this.groups.fields)-»
	public LocalizedFieldMap getLocalizedFieldMap() {
		return localizedFieldMap;
	}

	public void setLocalizedFieldMap(LocalizedFieldMap localizedFieldMap) {
		this.localizedFieldMap = localizedFieldMap;
	}
	«ENDIF»	
	
	«IF this.georeferenced!=null -»
	public Double getLatitude() {
		return «EXPAND template::CommonFieldUtil::propertyName FOR this.georeferenced»Latitude;
	}
	public Double getLongitude() {
		return «EXPAND template::CommonFieldUtil::propertyName FOR this.georeferenced»Longitude;
	}
	«ENDIF»	
	

	public String getDisplayValue() {		
		StringBuffer buffer = new StringBuffer();
		«FOREACH this.mainFields AS m -»
		//TODO Compute main fields
		«ENDFOREACH -»
		return buffer.toString();
	}
	
	«IF Actor.isAssignableFrom(this.metaType)-»
	
	private boolean isAuthorizedRole(String roleId) {
		for (String role : AUTHORIZED_ROLES) {
			if (role.equals(roleId)) {
				return true;
			}
		}
		return false;
	}
	
	@Override
	public void addRole(ImogRole role) {

		if (!isAuthorizedRole(role.getId())) {
			throw new IllegalArgumentException(
					"The role "
							+ role.getName()
							+ " can not be assigned to this actor (not defined as an authorized role), for actor : «name.toFirstUpper()»");
		}

		if (!isAssignedRole(role.getId())) {
			super.addRole(role);
		}
	}
	
	«EXPAND filterField FOREACH ((Actor)this).filters-»
	
	«ENDIF-»
	
}
«ENDFILE»
«ENDDEFINE»

«DEFINE fieldDeclaration FOR FieldEntity-»
	private «EXPAND template::DaoFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»; 
«ENDDEFINE»
«DEFINE fieldDeclaration FOR GeoField-»
	@XStreamOmitField
	private «EXPAND template::DaoFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»Latitude;
	@XStreamOmitField 
	private «EXPAND template::DaoFieldUtil::entityFieldType FOR this -» «EXPAND template::CommonFieldUtil::propertyName FOR this»Longitude; 
«ENDDEFINE»


«REM» Set the actor roles «ENDREM»
«DEFINE setAuthorizedImogRoles FOR Role-»              
        authorizedImogRoles.add("«name»");
«ENDDEFINE»



«REM» Set the project roles to the actor «ENDREM»
«DEFINE setProjectImogRoles FOR emf::EObject-»«ENDDEFINE»
«DEFINE setProjectImogRoles FOR Project-»              
       	«FOREACH this.roles AS r-»         
        authorizedImogRoles.add("«r.name»");
		«ENDFOREACH -»
		authorizedImogRoles.add("administrator");
		authorizedImogRoles.add("delete");
		authorizedImogRoles.add("export");
«ENDDEFINE»

«REM» Create variable, getter and setter for the filter fields «ENDREM»
«DEFINE filterField FOR FilterField»

	/** 
	 * filter fields for the «this.entity.name.toFirstUpper()» entity 	
	 */		
	private List<«entity.name.toFirstUpper()»> «EXPAND template::CommonFieldUtil::propertyName FOR this» = new Vector<«entity.name.toFirstUpper()»>();
	
	/**
	 * Set the list of allowed «this.entity.name.toFirstUpper()» for card access.	
	 */
	public void «EXPAND template::CommonFieldUtil::setterName FOR this»(List<«entity.name.toFirstUpper()»> filterFields){
		«EXPAND template::CommonFieldUtil::propertyName FOR this» = filterFields;
	}
	
	/**
	 * Get the list of allowed «this.entity.name.toFirstUpper()» for card access.
	 * @return a list of «this.entity.name.toFirstUpper()». 	
	 */
	public List<«entity.name.toFirstUpper()»> «EXPAND template::CommonFieldUtil::getterName FOR this»(){
		return «EXPAND template::CommonFieldUtil::propertyName FOR this»;
	} 
«ENDDEFINE»


