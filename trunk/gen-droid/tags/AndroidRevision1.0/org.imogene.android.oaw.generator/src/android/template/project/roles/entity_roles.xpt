«IMPORT core»
«DEFINE generate(String projectName) FOR CardEntity»
«FILE "/" + projectName.toLowerCase() + "/roles/" + name.toFirstUpper() + "Roles.java"»
package org.imogene.android.«projectName.toLowerCase()-».roles;

import android.content.Context;
«IF groups.readers.size != 0 || groups.writers.size != 0-»
import org.imogene.android.preference.PreferenceHelper;
«ENDIF-»

public class «name.toFirstUpper()-»Roles {

	public static final boolean canRead(Context context) {
		if (
			«FOREACH groups AS group SEPARATOR "||" -»
			canRead«group.name.toFirstUpper()-»(context)
			«ENDFOREACH-») {
			return true;
		} else {
			return false;
		}
	}
	
	public static final boolean canWrite(Context context) {
		if (
			«FOREACH groups AS group SEPARATOR "||" -»
			canWrite«group.name.toFirstUpper()-»(context)
			«ENDFOREACH-») {
			return true;
		} else {
			return false;
		}
	}
	
	«IF creators.size > 0-»
	public static final boolean canCreate(Context context) {
		String roles = PreferenceHelper.getCurrentRoles(context);
		if (
			«FOREACH creators AS creator SEPARATOR  "||"-»
			roles.contains(«projectName.toFirstUpper()-»Roles.«creator.name.toUpperCase()-»)
			«ENDFOREACH-») {
			return true;
		} else {
			return false;
		}
	}
	«ENDIF-»
	
	«IF directAccess.size > 0-»
	public static final boolean directAccess(Context context) {
		String roles = PreferenceHelper.getCurrentRoles(context);
		if (
			«FOREACH directAccess AS da SEPARATOR  "||"-»
			roles.contains(«projectName.toFirstUpper()-»Roles.«da.name.toUpperCase()-»)
			«ENDFOREACH-») {
			return true;
		} else {
			return false;
		}
	}
	«ENDIF-»

	«EXPAND canRead(projectName) FOREACH groups»
	«EXPAND canWrite(projectName) FOREACH groups»

}
«ENDFILE-»
«ENDDEFINE»



«DEFINE canRead(String project) FOR FieldGroup-»
public static final boolean canRead«name.toFirstUpper()-»(Context context) {
	«IF readers.size == 0-»
	return true;
	«ELSE-»
	String roles = PreferenceHelper.getCurrentRoles(context);
	if (
		«FOREACH readers AS reader SEPARATOR  "||"-»
		roles.contains(«project.toFirstUpper()-»Roles.«reader.name.toUpperCase()-»)
		«ENDFOREACH-») {
		return true;
	} else {
		return false;
	}
	«ENDIF-»
}
«ENDDEFINE»

«DEFINE canWrite(String project) FOR FieldGroup-»
public static final boolean canWrite«name.toFirstUpper()-»(Context context) {
	«IF writers.size == 0-»
	return true;
	«ELSE-»
	String roles = PreferenceHelper.getCurrentRoles(context);
	if (
		«FOREACH writers AS writer SEPARATOR  "||"-»
		roles.contains(«project.toFirstUpper()-»Roles.«writer.name.toUpperCase()-»)
		«ENDFOREACH-») {
		return true;
	} else {
		return false;
	}
	«ENDIF-»
}
«ENDDEFINE»