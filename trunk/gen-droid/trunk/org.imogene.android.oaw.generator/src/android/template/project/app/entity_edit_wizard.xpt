«IMPORT core»
«DEFINE generate(String projectName) FOR CardEntity»
«FILE "/" + projectName.toLowerCase() + "/app/" + name.toFirstUpper() + "Wizard.java"»
package org.imogene.android.«projectName.toLowerCase()-».app;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import org.imogene.android.Constants.Extras;
import org.imogene.android.app.AbstractEntityWizard;
import org.imogene.android.widget.field.FieldFlipper;
import org.imogene.android.widget.field.FieldManager;
import org.imogene.android.widget.field.FieldManager.RelationManager;
import org.imogene.android.widget.field.edit.BarcodeFieldEdit;
import org.imogene.android.widget.field.edit.BinaryFieldEdit;
import org.imogene.android.widget.field.edit.BooleanFieldEdit;
import org.imogene.android.widget.field.edit.DateFieldEdit;
import org.imogene.android.widget.field.edit.DateTimeFieldEdit;
import org.imogene.android.widget.field.edit.EnumMultipleFieldEdit;
import org.imogene.android.widget.field.edit.EnumSingleFieldEdit;
import org.imogene.android.widget.field.edit.FloatFieldEdit;
import org.imogene.android.widget.field.edit.GeoFieldEdit;
import org.imogene.android.widget.field.edit.IntegerFieldEdit;
import org.imogene.android.widget.field.edit.RelationManyFieldEdit;
import org.imogene.android.widget.field.edit.RelationOneFieldEdit;
import org.imogene.android.widget.field.edit.StringFieldEdit;
import org.imogene.android.widget.field.edit.TimeFieldEdit;
import org.imogene.android.«projectName.toLowerCase()».R;
import org.imogene.android.«projectName.toLowerCase()».entities.«name.toFirstUpper()-»;
«EXPAND android::template::EntityUtil::organizeEntityImport(projectName) FOREACH groups.fields-»
import org.imogene.android.«projectName.toLowerCase()».roles.«name.toFirstUpper()»Roles;

public class «name.toFirstUpper()-»Wizard extends AbstractEntityWizard implements RelationManager {

	private FieldManager mManager;

	«FOREACH groups.fields AS f-»
	private «EXPAND android::template::EditorsUtil::nameEditField FOR f» «f.name.toFirstLower()»;
	«ENDFOREACH»
	
	private «name.toFirstUpper()-» mEntity;
	
	public «name.toFirstUpper()-»Wizard() {
		super(«IF icon.length > 0-»R.drawable.«icon.split("\\.").get(0).toLowerCase()»«ELSE-»0«ENDIF-»);
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		if (Intent.ACTION_INSERT.equals(getIntent().getAction())) {
			if (getIntent().hasExtra(Extras.EXTRA_ENTITY))
				mEntity = new «name.toFirstUpper()-»(getIntent().getBundleExtra(Extras.EXTRA_ENTITY));
			else
				mEntity = new «name.toFirstUpper()-»();
		} else {
			mEntity = new «name.toFirstUpper()-»(this, getIntent().getData());
		}
		
		mManager = new FieldManager(this, this, 100);
		
		final FieldFlipper flipper = getFieldFlipper();
		getLayoutInflater().inflate(R.layout.«name.toLowerCase()»_edit_wizard, flipper, true);
		
		«FOREACH groups.fields AS f-»
			«f.name.toFirstLower()» = («EXPAND android::template::EditorsUtil::nameEditField FOR f») findViewById(R.id.«f.shortName.toLowerCase()»);
		«ENDFOREACH-»

		«FOREACH groups.fields AS f-»
			«f.name.toFirstLower()».setAutomaticManageVisibility(false);
			«f.name.toFirstLower()».onAttachedToHierarchy(mManager);
			«f.name.toFirstLower()».setValue(mEntity.get«f.name.toFirstUpper()»());
			«EXPAND android::template::EditorsUtil::specificInit FOR f-»
			«EXPAND android::template::EditorsUtil::dependency FOREACH f.fieldDependentVisibility-»
		«ENDFOREACH»
		
		«FOREACH groups.fields AS field-»
			«IF field.hidden || field.readOnly-»
				flipper.removeView(«field.name.toFirstLower()»);
			«ENDIF-»
		«ENDFOREACH»
		
		«FOREACH groups AS group ITERATOR i-»
		if (!«name.toFirstUpper()-»Roles.canWrite«group.name.toFirstUpper()-»(this)) {
			«FOREACH group.fields AS field»
				flipper.removeView(«field.name.toFirstLower()»);
			«ENDFOREACH»
		}
		«ENDFOREACH»
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		mManager.dispatchActivityResult(requestCode, resultCode, data);
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		mManager.dispatchActivityDestroy();
	}
	
	private void collect() {
		«FOREACH groups.fields AS f-»
		mEntity.set«f.name.toFirstUpper()»(«f.name.toFirstLower()».getValue());
		«ENDFOREACH-»
	}
	
	@Override
	protected void save(boolean temporary) {
		collect();
		if (temporary) {
			mEntity.commit(this, true, true);
			return;
		} else {
			Uri uri = mEntity.commit(this, true, false);
			if (uri != null) {
				setResult(RESULT_OK, new Intent().setData(uri));
				forceFinish();
			} else {
				setResult(RESULT_CANCELED);
				forceFinish();
			}
		}
	}
	
	public String getCurrentId() {
		if (mEntity.getId() == null)
			save(true);
		return mEntity.getId();
	}
	
	public long getCurrentRowId() {
		if (mEntity.getRowId() == -1)
			save(true);
		return mEntity.getRowId();
	}
	
	public Uri getCurrentContentUri() {
		return «name.toFirstUpper()».CONTENT_URI;
	}

}
«ENDFILE»
«ENDDEFINE»
