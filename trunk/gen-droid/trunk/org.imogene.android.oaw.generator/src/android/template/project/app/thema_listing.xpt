«IMPORT core»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(boolean multilogin) FOR Project »
«FILE "/" + name.toLowerCase() + "/app/" + name.toFirstUpper() + "Listing.java"-»
package org.imogene.android.«name.toLowerCase()-».app;

import java.util.ArrayList;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.ActivityNotFoundException;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import android.database.ContentObserver;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.Toast;
import org.imogene.android.Constants.Extras;
import org.imogene.android.Constants.Intents;
import org.imogene.android.app.BaseExpandableListActivity;
import org.imogene.android.app.Preferences;
import org.imogene.android.database.sqlite.SQLiteWrapper;
import org.imogene.android.service.AbstractSyncService;
import org.imogene.android.util.content.IntentUtils;
import org.imogene.android.widget.ThemaExpandableListAdapter;
import org.imogene.android.widget.ThemaExpandableListAdapter.EntityChild;
«FOREACH entities AS entity-»
«IF entity.topLevel || entity.directAccess.size > 0-»
import org.imogene.android.«name.toLowerCase()-».entities.«entity.name.toFirstUpper()-»;
«ENDIF-»
«IF entity.directAccess.size > 0-»
import org.imogene.android.«name.toLowerCase()-».roles.«entity.name.toFirstUpper()-»Roles;
«ENDIF-»
«ENDFOREACH-»
import org.imogene.android.«name.toLowerCase()».R;

public class «name.toFirstUpper()»Listing extends BaseExpandableListActivity implements OnSharedPreferenceChangeListener {

	private static final String EXTRA_SCANNED = "AbstractThemaListing_scanned";
	
	private static final int DIALOG_SEARCH_SERVER_ID = 1;
	
	private static final int ACTIVITY_BARCODE_ID = 1;
	private static final int ACTIVITY_SEARCH_ID = 2;
	
	private final Handler mHandler = new Handler();
	
	private final ContentObserver mObserver = new ContentObserver(mHandler) {
	
		@Override
		public boolean deliverSelfNotifications() {
			return true;
		}
	
		@Override
		public void onChange(boolean selfChange) {
			super.onChange(selfChange);
			((BaseExpandableListAdapter) getExpandableListAdapter()).notifyDataSetChanged();
		}
	};
	
	private SharedPreferences mPreferences;
	
	private String mScanned;
	
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		fillData();

		mPreferences = PreferenceManager.getDefaultSharedPreferences(this);
		
		mPreferences.registerOnSharedPreferenceChangeListener(this);
	}
	
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		outState.putString(EXTRA_SCANNED, mScanned);
	}
	
	@Override
	protected void onRestoreInstanceState(Bundle state) {
		super.onRestoreInstanceState(state);
		mScanned = state.getString(EXTRA_SCANNED);
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		getContentResolver().unregisterContentObserver(mObserver);
		mPreferences.unregisterOnSharedPreferenceChangeListener(this);
	}
	
	@Override
	public final void startActivity(Intent intent) {
		try {
			super.startActivity(intent);
		} catch (ActivityNotFoundException e) {
			IntentUtils.treatException(e, this, intent);
		}
	}
	
	@Override
	public final void startActivityForResult(Intent intent, int requestCode) {
		try {
			super.startActivityForResult(intent, requestCode);
		} catch (ActivityNotFoundException e) {
			IntentUtils.treatException(e, this, intent);
		}
	}
	
	public final void restart() {
		startActivity(getIntent());
		finish();
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		boolean result = super.onCreateOptionsMenu(menu);
		getMenuInflater().inflate(R.menu.menu_thema_listing, menu);
	    «IF hasQRCode(this)-»
		menu.findItem(R.id.menu_search).setVisible(true);
		«ENDIF-»
		«IF multilogin-»
		menu.findItem(R.id.menu_change_user).setVisible(true).setIntent(new Intent(this, MultiUserListing.class));
		«ENDIF-»
		menu.findItem(R.id.menu_preferences).setIntent(new Intent(this, «IF hasFilter(this)»ExtendedPreferences«ELSE»Preferences«ENDIF».class));
		return result;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_search :
			startActivityForResult(new Intent(Intents.ACTION_SCAN), ACTIVITY_BARCODE_ID);
			return true;
		default :
			return super.onOptionsItemSelected(item);
		}
	}
	
	@Override
	public boolean onCreateActionBarMenu(Menu menu) {
		boolean result = super.onCreateActionBarMenu(menu);
		getMenuInflater().inflate(R.menu.actionbar_sync_item, menu);
		return result;
	}

	@Override
	public boolean onActionBarItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_sync:
			AbstractSyncService.startService(this);
			return true;
		default:
			return super.onActionBarItemSelected(item);
		}
	}
	
	@Override
	public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
		EntityChild entity = (EntityChild) getExpandableListAdapter().getChild(groupPosition, childPosition);
		startActivity(new Intent(Intent.ACTION_VIEW, entity.getContentUri()));
		return true;
	}

	public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
		if (getString(R.string.sync_server_url_key).equals(key))
			finish();
		else if (getString(R.string.current_roles_key).equals(key))
			restart();
	}
	
	@Override
	protected Dialog onCreateDialog(int id) {
		switch (id) {
		case DIALOG_SEARCH_SERVER_ID:
			return new AlertDialog.Builder(this)
				.setTitle(R.string.scanned_notfound)
				.setMessage(getString(R.string.scanned_notfoundinapp, mScanned))
				.setPositiveButton(android.R.string.ok, new OnClickListener() {					
					public void onClick(DialogInterface dialog, int which) {
						startActivityForResult(new Intent(
							Intents.ACTION_SEARCH_ENTITY)
							.putExtra(Extras.EXTRA_SEARCH, mScanned),
							ACTIVITY_SEARCH_ID);
					}
				})
				.setNegativeButton(android.R.string.no, null)
				.create();
		default:
			return super.onCreateDialog(id);
		}
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == RESULT_OK && requestCode == ACTIVITY_BARCODE_ID) {
			mScanned = data.getStringExtra("SCAN_RESULT");
			Toast.makeText(this, getString(R.string.scanned, mScanned), Toast.LENGTH_LONG).show();
			Uri uri = SQLiteWrapper.findInDatabase(this, mScanned);
			if (uri != null) {
				startActivity(new Intent(Intent.ACTION_VIEW, uri));
			} else {
				showDialog(DIALOG_SEARCH_SERVER_ID);
			}
		} else if (resultCode == RESULT_OK && requestCode == ACTIVITY_SEARCH_ID) {
			startActivity(new Intent(Intent.ACTION_VIEW, data.getData()));
		} else {
			super.onActivityResult(requestCode, resultCode, data);
		}
	}
	
	protected final void fillData() {
		ArrayList<Integer> groupData = new ArrayList<Integer>();
		ArrayList<ArrayList<EntityChild>> childData = new ArrayList<ArrayList<EntityChild>>();
		
		«IF hasMiscellaneousThema(entities, themas)-»
		ArrayList<EntityChild> themaMiscellaneous = new ArrayList<EntityChild>();
		«ENDIF-»
		«FOREACH themas AS thema-»
		ArrayList<EntityChild> thema«thema.name.toFirstUpper()-» = new ArrayList<EntityChild>();
		«ENDFOREACH-»

		«FOREACH entities AS entity-»
		«IF entity.topLevel || entity.directAccess.size > 0-»
			«IF entity.directAccess.size > 0-»
			if («entity.name.toFirstUpper()»Roles.directAccess(this)) {
			«ENDIF-»
			getContentResolver().registerContentObserver(«entity.name.toFirstUpper()-».CONTENT_URI, true, mObserver);
			«IF isInMiscellaneousThema(themas, entity)-»
			themaMiscellaneous.add(new EntityChild(
				«entity.name.toFirstUpper()-».CONTENT_URI,
				«entity.name.toFirstUpper()-».TABLE_NAME,
				R.string.«entity.shortName.toLowerCase()-»_des_pl,
				«IF entity.icon.length > 0-»R.drawable.«entity.icon.split("\\.").get(0).toLowerCase()»«ELSE-»0«ENDIF-»,
				«entity.name.toFirstUpper()-».COLOR));
			«ELSE-»
			«FOREACH themas AS thema-»
				«IF thema.entities.contains(entity)-»
				thema«thema.name.toFirstUpper()-».add(new EntityChild(
					«entity.name.toFirstUpper()-».CONTENT_URI,
					«entity.name.toFirstUpper()-».TABLE_NAME,
					R.string.«entity.shortName.toLowerCase()-»_des_pl,
					«IF entity.icon.length > 0-»R.drawable.«entity.icon.split("\\.").get(0).toLowerCase()»«ELSE-»0«ENDIF-»,
					«entity.name.toFirstUpper()-».COLOR));
				«ENDIF-»
			«ENDFOREACH-»
			«ENDIF-»
			«IF entity.directAccess.size > 0-»
			}
			«ENDIF-»
		«ENDIF-»
		«ENDFOREACH-»
		
		«IF hasMiscellaneousThema(entities, themas)-»
		if (!themaMiscellaneous.isEmpty()) {
			groupData.add(R.string.thema_miscellaneous);
			childData.add(themaMiscellaneous);
		}
		«ENDIF-»
		«FOREACH themas AS thema-»
		if (!thema«thema.name.toFirstUpper()-».isEmpty()) {
			groupData.add(R.string.thema_«thema.name.toLowerCase()-»);
			childData.add(thema«thema.name.toFirstUpper()-»);
		}
		«ENDFOREACH-»

		ThemaExpandableListAdapter adapter = new ThemaExpandableListAdapter(this, groupData, childData);
		setListAdapter(adapter);

    }
    
}
«ENDFILE-»
«ENDDEFINE»