«IMPORT core»
«EXTENSION template::CommonFieldUtilExt»
«EXTENSION android::template::DatesGenExt»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate(String projectName, String modelName) FOR CardEntity»
«FILE "/" + projectName.toLowerCase() + "/entities/" + name.toFirstUpper() + ".java"»
package org.imogene.android.«projectName.toLowerCase()-».entities;

import java.util.ArrayList;
import java.util.Arrays;

import android.content.ContentValues;
import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import org.imogene.android.common.Binary;
import org.imogene.android.common.GpsLocation;
import org.imogene.android.common.LocalizedText;
«IF Actor.isAssignableFrom(metaType)-»
import org.imogene.android.common.UserImpl;
import org.imogene.android.common.interfaces.User;
«ELSE-»
import org.imogene.android.common.EntityImpl;
import org.imogene.android.common.interfaces.Entity;
«ENDIF-»
import org.imogene.android.database.sqlite.SQLiteWrapper;
import org.imogene.android.util.FormatHelper;
import org.imogene.android.util.LocalizedTextList;
import org.imogene.android.util.Tools;
import org.imogene.android.«projectName.toLowerCase()-».database.sqlite.«name.toFirstUpper()-»Cursor;

public class «name.toFirstUpper()-» extends 
«IF Actor.isAssignableFrom(metaType) -»UserImpl«ELSE-»EntityImpl«ENDIF-» {

	public static class Columns implements «IF Actor.isAssignableFrom(metaType) -»User.Columns«ELSE-»Entity.Columns«ENDIF-» {
		public static final Drawable COLOR = Tools.getColorChip(Color.parseColor(«IF color.length > 0-»"#«color»"«ELSE-»"black"«ENDIF-»));
		public static final String PACKAGE = "org.imogene.«modelName.toLowerCase()».entity.«name»";
		public static final String TABLE_NAME = "«name.toLowerCase()-»";
		public static final String BEAN_TYPE = "«shortName»";
		public static final Uri CONTENT_URI = FormatHelper.buildUriForFragment(TABLE_NAME);
		
		«EXPAND column FOREACH groups.fields-»
		
		«EXPAND nTonTable FOREACH groups.fields-»
	}

	«EXPAND declaration FOREACH groups.fields-»
	
	public «name.toFirstUpper()-»(Context context, Uri uri) {
		«name.toFirstUpper()-»Cursor cursor = («name.toFirstUpper()-»Cursor) SQLiteWrapper.query(context, uri, null, null);
		cursor.moveToFirst();
		init(cursor);
		«FOREACH groups.fields AS field -»
		m«field.name.toFirstUpper()-» = cursor.get«field.name.toFirstUpper()-»();
		«ENDFOREACH-»
		cursor.close();
	}

	public «name.toFirstUpper()»(Bundle bundle) {
		«EXPAND createFromBundle FOREACH groups.fields-»
	}
	
	public «name.toFirstUpper()-»() {
	}
	
	«EXPAND generateGetter FOREACH groups.fields»
	«EXPAND generateSetter FOREACH groups.fields»
	
	@Override
	protected final Uri getContentUri() {
		return Columns.CONTENT_URI;
	}
	
	@Override
	protected final String getBeanType() {
		return Columns.BEAN_TYPE;
	}
	
	@Override
	protected final void preCommit(Context context, boolean local, boolean temporary) {
		«EXPAND preCommit FOREACH groups.fields-»
	}
	
	@Override
	protected final void addValues(Context context, ContentValues values) {
		super.addValues(context, values);
		«EXPAND commit FOREACH groups.fields-»
	}
	
	@Override
	protected final void postCommit(Context context) {
		«EXPAND postCommit FOREACH groups.fields-»
	}
	
	public final void reset() {
		«EXPAND reset FOREACH groups.fields-»
	}

}
«ENDFILE»
«ENDDEFINE»




«DEFINE column FOR FieldEntity-»
public static final String «name.toUpperCase()» = "«name.toFirstLower()»";
«ENDDEFINE»





«DEFINE nTonTable FOR FieldEntity-»
«ENDDEFINE»

«DEFINE nTonTable FOR MainRelationFieldEntity-»
«IF (cardinality != 1 && getOppositeCardinality(this) != 1)-»
public static final String TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()» = "«shortName.toLowerCase()»";
«ENDIF-»
«ENDDEFINE»

«DEFINE nTonTable FOR ReverseRelationFieldEntity-»
«IF (cardinality != 1 && getOppositeCardinality(this) != 1)-»
public static final String TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()» = "«oppositeRelationField.shortName.toLowerCase()»";
«ENDIF-»
«ENDDEFINE»




«DEFINE declaration FOR FieldEntity-»
«ENDDEFINE»

«DEFINE declaration FOR StringField-»
«IF defaultValue != null && defaultValue.length != 0-»
private String m«name.toFirstUpper()-» = "«defaultValue-»";
«ELSE-»
private String m«name.toFirstUpper()-» = null;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR TextField-»
«IF translatable-»
private LocalizedTextList m«name.toFirstUpper()-» = null;
«ELSE-»
«IF defaultValue != null && defaultValue.length != 0-»
private String m«name.toFirstUpper()-» = "«defaultValue-»";
«ELSE-»
private String m«name.toFirstUpper()-» = null;
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR IntegerField-»
«IF defaultValue != null && defaultValue.length != 0-»
private Integer m«name.toFirstUpper()-» = Integer.valueOf("«defaultValue-»");
«ELSE-»
private Integer m«name.toFirstUpper()-» = null;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR FloatField-»
«IF defaultValue != null && defaultValue.length != 0-»
private Float m«name.toFirstUpper()-» = Float.valueOf("«defaultValue-»");
«ELSE-»
private Float m«name.toFirstUpper()-» = null;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR DatesField-»
«IF defaultValue == "now"-»
private Long m«name.toFirstUpper()-» = System.currentTimeMillis();
«ELSEIF defaultValue != null && defaultValue.length > 0-»
	«IF isDate(defaultValue)-»
	private Long m«name.toFirstUpper()-» = Long.valueOf("«convertDate(defaultValue)»");
	«ELSEIF isDateTime(defaultValue)-»
	private Long m«name.toFirstUpper()-» = Long.valueOf("«convertDateTime(defaultValue)»");
	«ELSEIF isTime(defaultValue)-»
	private Long m«name.toFirstUpper()-» = Long.valueOf("«convertTime(defaultValue)»");
	«ELSE-»
	private Long m«name.toFirstUpper()-» = null;
	«ENDIF»
«ELSE-»
private Long m«name.toFirstUpper()-» = null;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR BooleanField-»
«IF defaultValue != null && defaultValue.length != 0-»
private Boolean m«name.toFirstUpper()-» = «defaultValue-»;
«ELSE-»
private Boolean m«name.toFirstUpper()-» = null;
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR BinaryField-»
private Uri m«name.toFirstUpper()-» = null;
«ENDDEFINE»

«DEFINE declaration FOR EnumField-»
«IF multipleSelection-»
private boolean[] m«name.toFirstUpper()-» = new boolean[«enumValues.size»];
«ELSE-»
	«IF defaultValue != null && defaultValue.length != 0-»
	private int m«name.toFirstUpper()-» = «defaultValue»;
	«ELSE-»
	private int m«name.toFirstUpper()-» = -1;
	«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE declaration FOR GeoField-»
private Location m«name.toFirstUpper()-» = null;
«ENDDEFINE»

«DEFINE declaration FOR RelationFieldEntity-»
«IF cardinality == 1-»
private Uri m«name.toFirstUpper()-» = null;
«ELSE-»
private ArrayList<Uri> m«name.toFirstUpper()-» = new ArrayList<Uri>();
«ENDIF-»
«ENDDEFINE»







«DEFINE reset FOR FieldEntity-»
m«name.toFirstUpper()-» = null;
«ENDDEFINE»

«DEFINE reset FOR EnumField-»
«IF multipleSelection-»
m«name.toFirstUpper()-» = new boolean[«enumValues.size»];
«ELSE-»
m«name.toFirstUpper()-» = -1;
«ENDIF-»
«ENDDEFINE»

«DEFINE reset FOR RelationFieldEntity-»
«IF cardinality == 1-»
m«name.toFirstUpper()-» = null;
«ELSE-»
m«name.toFirstUpper()-».clear();
«ENDIF-»
«ENDDEFINE»






«DEFINE generateGetter FOR FieldEntity-»
«ENDDEFINE»

«DEFINE generateGetter FOR StringField-»
public final String get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR TextField-»
«IF translatable-»
public final LocalizedTextList get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ELSE-»
public final String get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE generateGetter FOR IntegerField-»
public final Integer get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR FloatField-»
public final Float get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR BooleanField-»
public final Boolean get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR DatesField-»
public final Long get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR BinaryField-»
public final Uri get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR EnumField-»
«IF multipleSelection-»
public final boolean[] get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ELSE»
public final int get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDIF»
«ENDDEFINE»

«DEFINE generateGetter FOR GeoField-»
public final Location get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDDEFINE»

«DEFINE generateGetter FOR RelationFieldEntity-»
«IF cardinality == 1-»
public final Uri get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ELSE»
public final ArrayList<Uri> get«name.toFirstUpper()-»() {
	return m«name.toFirstUpper()-»;
}
«ENDIF»
«ENDDEFINE»






«DEFINE generateSetter FOR FieldEntity-»
«ENDDEFINE»

«DEFINE generateSetter FOR StringField-»
public final void set«name.toFirstUpper()-»(String «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR TextField-»
«IF translatable-»
public final void set«name.toFirstUpper()»(LocalizedTextList «name.toFirstLower()») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ELSE-»
public final void set«name.toFirstUpper()-»(String «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE generateSetter FOR IntegerField-»
public final void set«name.toFirstUpper()-»(Integer «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR FloatField-»
public final void set«name.toFirstUpper()-»(Float «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR BooleanField-»
public final void set«name.toFirstUpper()-»(Boolean «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR DatesField-»
public final void set«name.toFirstUpper()-»(Long «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR BinaryField-»
public final void set«name.toFirstUpper()-»(Uri «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR EnumField-»
«IF multipleSelection-»
public final void set«name.toFirstUpper()-»(boolean[] «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ELSE-»
public final void set«name.toFirstUpper()-»(int «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE generateSetter FOR GeoField-»
public final void set«name.toFirstUpper()-»(Location «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDDEFINE»

«DEFINE generateSetter FOR RelationFieldEntity-»
«IF cardinality == 1-»
public final void set«name.toFirstUpper()-»(Uri «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ELSE-»
public final void set«name.toFirstUpper()-»(ArrayList<Uri> «name.toFirstLower()-») {
	m«name.toFirstUpper()-» = «name.toFirstLower()-»;
}
«ENDIF-»
«ENDDEFINE»







«DEFINE createFromBundle FOR FieldEntity-»
«ENDDEFINE»

«DEFINE createFromBundle FOR RelationFieldEntity-»
if (bundle.containsKey(Columns.«name.toUpperCase()»)) {
	«IF cardinality == 1-»
	m«name.toFirstUpper()» = bundle.getParcelable(Columns.«name.toUpperCase()»);
	«ELSE-»
	m«name.toFirstUpper()» = bundle.getParcelableArrayList(Columns.«name.toUpperCase()»);
	«ENDIF-»
}
«ENDDEFINE»





«DEFINE preCommit FOR FieldEntity-»
«ENDDEFINE»

«DEFINE preCommit FOR TextField-»
«IF translatable-»
if (m«name.toFirstUpper()» != null) {
	m«name.toFirstUpper()».saveThemAll(context, local);
}
«ENDIF-»
«ENDDEFINE»






«DEFINE commit FOR FieldEntity-»
values.put(Columns.«name.toUpperCase()», m«name.toFirstUpper()-»);
«ENDDEFINE»

«DEFINE commit FOR TextField-»
«IF translatable-»
if (m«name.toFirstUpper()» != null) {
	values.put(Columns.«name.toUpperCase()», m«name.toFirstUpper()-».getTextId());
} else {
	values.putNull(Columns.«name.toUpperCase()»);
}
«ELSE-»
values.put(Columns.«name.toUpperCase()», m«name.toFirstUpper()-»);
«ENDIF-»
«ENDDEFINE»

«DEFINE commit FOR BooleanField-»
if (m«name.toFirstUpper()-» != null)
	values.put(Columns.«name.toUpperCase()», m«name.toFirstUpper()-».toString());
else
	values.putNull(Columns.«name.toUpperCase()»);
«ENDDEFINE»

«DEFINE commit FOR EnumField-»
«IF multipleSelection -»
values.put(Columns.«name.toUpperCase()», Arrays.toString(m«name.toFirstUpper()-»));
«ELSE-»
values.put(Columns.«name.toUpperCase()», m«name.toFirstUpper()-»);
«ENDIF-»
«ENDDEFINE»

«DEFINE commit FOR GeoField-»
values.put(Columns.«name.toUpperCase()», GpsLocation.saveLocation(context, m«name.toFirstUpper()-»));
«ENDDEFINE»

«DEFINE commit FOR BinaryField-»
if (m«name.toFirstUpper()-» != null && !Binary.isBinary(m«name.toFirstUpper()-»)) {
	Binary «name.toLowerCase()-» = new Binary();
	«name.toLowerCase()-».setData(m«name.toFirstUpper()-»);
	«name.toLowerCase()-».setParentEntity(Columns.BEAN_TYPE);
	«name.toLowerCase()-».setParentFieldGetter("get«name.toFirstUpper()-»");
	«name.toLowerCase()-».setParentKey(getId());
	m«name.toFirstUpper()-» = «name.toLowerCase()-».commit(context, true, false);
}
values.put(Columns.«name.toUpperCase()», SQLiteWrapper.queryId(context, m«name.toFirstUpper()-»));
«ENDDEFINE»

«DEFINE commit FOR MainRelationFieldEntity-»
«IF cardinality == 1-»
values.put(Columns.«name.toUpperCase()», SQLiteWrapper.queryId(context, m«name.toFirstUpper()-»));
«ENDIF»
«ENDDEFINE»

«DEFINE commit FOR ReverseRelationFieldEntity-»
«IF getOppositeCardinality(this) != 1 && cardinality == 1 -»
values.put(Columns.«name.toUpperCase()», SQLiteWrapper.queryId(context, m«name.toFirstUpper()-»));
«ENDIF-»
«ENDDEFINE»





«DEFINE postCommit FOR FieldEntity-»
«ENDDEFINE»

«DEFINE postCommit FOR MainRelationFieldEntity-»
«IF cardinality != 1-»
«IF oppositeRelationField != null && getOppositeCardinality(this) == 1-»
{
ContentValues v = new ContentValues();
v.putNull(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField»);
context.getContentResolver().update(«entity.name.toFirstUpper()-».Columns.CONTENT_URI, v, «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField» + "='" + getId() + "'", null);
v.put(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField», getId());
for (Uri uri : m«name.toFirstUpper()-»)
	context.getContentResolver().update(uri, v, null, null);
}
«ELSE-»
{
SQLiteWrapper.delete(context, Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()», «parentGroup.parentCard.name.toFirstUpper()».Columns.TABLE_NAME + "='" + getId() + "'", null);
ContentValues v = new ContentValues();
v.put(«parentGroup.parentCard.name.toFirstUpper()».Columns.TABLE_NAME, getId());
for (Uri uri : m«name.toFirstUpper()-») {
	v.put(«entity.name.toFirstUpper()».Columns.TABLE_NAME, SQLiteWrapper.queryId(context, uri));
	SQLiteWrapper.insert(context, Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()», "", v);
}
}
«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE postCommit FOR ReverseRelationFieldEntity-»
«IF isForbiddenCase(this)»
{
ContentValues v = new ContentValues();
v.putNull(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField»);
context.getContentResolver().update(«entity.name.toFirstUpper()-».Columns.CONTENT_URI, v, «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField» + "='" + getId() + "'", null);
if (m«name.toFirstUpper()-» != null) {
	v.put(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField», getId());
	context.getContentResolver().update(m«name.toFirstUpper()-», v, null, null);
}
}
«ELSE»
«IF cardinality != 1»
«IF getOppositeCardinality(this) == 1-»
{
ContentValues v = new ContentValues();
v.putNull(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField»);
context.getContentResolver().update(«entity.name.toFirstUpper()-».Columns.CONTENT_URI, v, «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField» + "='" + getId() + "'", null);
v.put(«EXPAND android::template::MedooAndroidFieldUtil::columnName FOR oppositeRelationField», getId());
for (Uri uri : m«name.toFirstUpper()-»)
	context.getContentResolver().update(uri, v, null, null);
}
«ELSE»
{
SQLiteWrapper.delete(context, Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()», Columns.TABLE_NAME + "='" + getId() + "'", null);
ContentValues v = new ContentValues();
v.put(Columns.TABLE_NAME, getId());
for (Uri uri : m«name.toFirstUpper()-») {
	v.put(«entity.name.toFirstUpper()».Columns.TABLE_NAME, SQLiteWrapper.queryId(context, uri));
	SQLiteWrapper.insert(context, Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()», "", v);
}
}
«ENDIF»
«ENDIF»
«ENDIF»
«ENDDEFINE»