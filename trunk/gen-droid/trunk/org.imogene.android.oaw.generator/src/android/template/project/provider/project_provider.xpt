«IMPORT core»
«EXTENSION template::CommonFieldUtilExt»
«EXTENSION android::template::MedooAndroidFieldUtilExt»
«DEFINE generate FOR Project »
«FILE "/" + name.toLowerCase() + "/provider/" + name.toFirstUpper() + "Provider.java"-»
package org.imogene.android.«name.toLowerCase()-».provider;

import org.imogene.android.Constants;
import org.imogene.android.Constants.Databases;
import org.imogene.android.provider.AbstractProvider;
«FOREACH entities AS entity-»
import org.imogene.android.«name.toLowerCase()-».database.sqlite.«entity.name.toFirstUpper()-»Cursor;
«ENDFOREACH-»
«FOREACH entities AS entity-»
import org.imogene.android.«name.toLowerCase()-».entities.«entity.name.toFirstUpper()-»;
«ENDFOREACH-»
import org.imogene.android.«name.toLowerCase()-».search.«name.toFirstUpper()-»SearchSupport;

import android.app.SearchManager;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

public class «name.toFirstUpper()-»Provider extends AbstractProvider {

	private static final String VND_ITEM = "vnd.org.imogene.android.«name.toLowerCase()».cursor.item/";
	private static final String VND_DIR = "vnd.org.imogene.android.«name.toLowerCase()».cursor.dir/";
	
	«FOREACH entities AS entity ITERATOR i-»
	private static final int «entity.name.toUpperCase()» = LAST_INDEX + «3 * i.counter0 + 1-»;
	private static final int «entity.name.toUpperCase()»_ID = LAST_INDEX + «3 * i.counter0 + 2-»;
	private static final int «entity.name.toUpperCase()»_SEARCH_SUGGEST = LAST_INDEX + «3 * i.counter0 + 3-»;
	«ENDFOREACH-»

	static {
		«FOREACH entities AS entity-»
		sURIMatcher.addURI(Constants.AUTHORITY, «entity.name.toFirstUpper()».Columns.TABLE_NAME, «entity.name.toUpperCase()»);
		sURIMatcher.addURI(Constants.AUTHORITY, «entity.name.toFirstUpper()».Columns.TABLE_NAME + "/#", «entity.name.toUpperCase()»_ID);
		sURIMatcher.addURI(Constants.AUTHORITY, «entity.name.toFirstUpper()».Columns.TABLE_NAME + "/" + SearchManager.SUGGEST_URI_PATH_QUERY, «entity.name.toUpperCase()»_SEARCH_SUGGEST);
		sURIMatcher.addURI(Constants.AUTHORITY, «entity.name.toFirstUpper()».Columns.TABLE_NAME + "/" + SearchManager.SUGGEST_URI_PATH_QUERY + "/*", «entity.name.toUpperCase()»_SEARCH_SUGGEST);
		«ENDFOREACH-»
	}
	
	private SQLiteDatabase sqlDB = null;
	private «name.toFirstUpper()»Database dbHelper = null;
	
	@Override
	public boolean onCreate() {
		dbHelper = «name.toFirstUpper()-»Database.get(getContext());
		return true;
	}
	
	protected final «name.toFirstUpper()»Database getHelper() {
		return dbHelper;
	}
	
	protected final String getVndDir() {
		return VND_DIR;
	}
	
	protected final String getVndItem() {
		return VND_ITEM;
	}

	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		int result = -1;
		switch (sURIMatcher.match(uri)) {
		«FOREACH entities AS entity-»
		case «entity.name.toUpperCase()»:
			result = deleteMulti(«entity.name.toFirstUpper()».Columns.TABLE_NAME, selection, selectionArgs);
			break;
		case «entity.name.toUpperCase()»_ID:
			String «entity.shortName.toLowerCase()»Id = uri.getPathSegments().get(1);
			result = deleteSingle(«entity.name.toFirstUpper()».Columns.TABLE_NAME, «entity.shortName.toLowerCase()»Id, selection, selectionArgs);
			break;
		«ENDFOREACH-»
		default:
			return super.delete(uri, selection, selectionArgs);
		}
		getContext().getContentResolver().notifyChange(uri, null);
		return result;
	}



	@Override
	public String getType(Uri uri) {
		switch (sURIMatcher.match(uri)) {
		«FOREACH entities AS entity-»
		case «entity.name.toUpperCase()»:
			return VND_DIR + "«entity.name.toLowerCase()»";
		case «entity.name.toUpperCase()»_ID:
			return VND_ITEM + "«entity.name.toLowerCase()»";
		«ENDFOREACH-»
		default:
			return super.getType(uri);
		}
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {
		switch (sURIMatcher.match(uri)) {
		«FOREACH entities AS entity-»
		case «entity.name.toUpperCase()»:
			return insertInTable(«entity.name.toFirstUpper()-».Columns.TABLE_NAME, «entity.name.toFirstUpper()-».Columns.CONTENT_URI, values);
		«ENDFOREACH»
		default:
			return super.insert(uri, values);
		}
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection,
			String[] selectionArgs, String sortOrder) {
		sqlDB = dbHelper.getWritableDatabase();
		SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
		switch (sURIMatcher.match(uri)) {
		«FOREACH entities AS entity-»
		case «entity.name.toUpperCase()»:
			qb.setTables(«entity.name.toFirstUpper()».Columns.TABLE_NAME);
			break;
		case «entity.name.toUpperCase()»_ID:
			qb.setTables(«entity.name.toFirstUpper()».Columns.TABLE_NAME);
			qb.appendWhere("_id=" + uri.getPathSegments().get(1));
			break;
		case «entity.name.toUpperCase()»_SEARCH_SUGGEST:
			return «name.toFirstUpper()-»SearchSupport.get«entity.name.toFirstUpper()-»Suggestions(getContext(), sqlDB, uri.getLastPathSegment());
		«ENDFOREACH-»
		default:
			return super.query(uri, projection, selection, selectionArgs, sortOrder);
		}
		Cursor c = qb.query(sqlDB, projection, selection, selectionArgs, null,
				null, sortOrder);
		c.setNotificationUri(getContext().getContentResolver(), uri);
		return c;
	}

	@Override
	public int update(Uri uri, ContentValues values, String selection,
			String[] selectionArgs) {
		int result = -1;
		switch (sURIMatcher.match(uri)) {
		«FOREACH entities AS entity-»
		case «entity.name.toUpperCase()»:
			result = updateMulti(«entity.name.toFirstUpper()».Columns.TABLE_NAME, values, selection, selectionArgs);
			break;
		case «entity.name.toUpperCase()»_ID:
			String «entity.shortName.toLowerCase()»Id = uri.getPathSegments().get(1);
			result = updateSingle(«entity.name.toFirstUpper()».Columns.TABLE_NAME, «entity.shortName.toLowerCase()»Id, values, selection, selectionArgs);
			break;
		«ENDFOREACH-»
		default:
			return super.update(uri, values, selection, selectionArgs);
		}
		getContext().getContentResolver().notifyChange(uri, null);
		return result;
	}

	private static class «name.toFirstUpper()-»Database extends ImogDatabase {

		private static final String TAG = «name.toFirstUpper()-»Database.class.getName();
	
		private static final int DATABASE_VERSION = «getDatabaseVersion()-»;

		«FOREACH entities AS entity-»
		private static final String DATABASE_CREATE_«entity.name.toUpperCase()» = 
			"create table if not exists " + «entity.name.toFirstUpper()».Columns.TABLE_NAME + " ("
				+ «entity.name.toFirstUpper()».Columns._ID + " integer primary key autoincrement, "
				+ «entity.name.toFirstUpper()».Columns.MODIFIED + " integer, "
				+ «entity.name.toFirstUpper()».Columns.MODIFIEDBY + " text, "
				+ «entity.name.toFirstUpper()».Columns.MODIFIEDFROM + " text, "
				+ «entity.name.toFirstUpper()».Columns.UPLOADDATE + " integer, "
				+ «entity.name.toFirstUpper()».Columns.CREATED + " integer, "
				+ «entity.name.toFirstUpper()».Columns.CREATEDBY + " text, "
				+ «entity.name.toFirstUpper()».Columns.UNREAD + " integer, "
				+ «entity.name.toFirstUpper()».Columns.SYNCHRONIZED + " integer, "
				«IF Actor.isAssignableFrom(entity.metaType) -»
				+ «entity.name.toFirstUpper()».Columns.LOGIN + " text, "
				+ «entity.name.toFirstUpper()».Columns.PASSWORD + " blob, "
				+ «entity.name.toFirstUpper()».Columns.ROLES + " text, "
				«ENDIF-»
				«EXPAND getKey FOREACH entity.groups.fields-»
				+ «entity.name.toFirstUpper()».Columns.ID + " text not null);";
		«ENDFOREACH-»
	
		«EXPAND buildTableManyToMany FOREACH entities.groups.fields-»
	
		static {
			CREATOR = new Creator<«name.toFirstUpper()-»Database>() {
				@Override
				public «name.toFirstUpper()-»Database getDatabase(Context context) {
					return «name.toFirstUpper()-»Database.get(context);
				}
			};
		}
			
		private static «name.toFirstUpper()-»Database sSingleton = null;
		/**
		* Private constructor, callers should obtain an instance through
		* {@link #getInstance(android.content.Context)} instead.
		*/
		«name.toFirstUpper()-»Database(Context context) {
			super(context, Databases.DATABASE_NAME, null, DATABASE_VERSION);
		}
	
		private static final synchronized «name.toFirstUpper()-»Database get(Context context) {
			if (sSingleton == null) {
				sSingleton = new «name.toFirstUpper()-»Database(context);
			}
			return sSingleton;
		}
	
		@Override
		public void onCreate(SQLiteDatabase db) {
			super.onCreate(db);
			«FOREACH entities AS entity-»
			db.execSQL(DATABASE_CREATE_«entity.name.toUpperCase()»);
			«ENDFOREACH-»
		
			«EXPAND buildSQLManyToMany FOREACH entities.groups.fields-»
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
				+ newVersion + ", which will destroy all old data");
			onCreate(db);
			«EXPAND upgradeField FOREACH entities.groups.fields-»
		}
	
		public final Uri findInDatabase(String scanned) {
    		long id;
    		«FOREACH entities AS e SEPARATOR " else "»
   	 		if ((id = queryRowId(«e.name.toFirstUpper()-».Columns.CONTENT_URI, scanned)) != -1)
    			return ContentUris.withAppendedId(«e.name.toFirstUpper()-».Columns.CONTENT_URI, id);
    		«ENDFOREACH»
    		else
    			return null;
    	}
    	
    	@Override
		public Cursor query(Uri uri, String where, String order) {
			SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
			switch (sURIMatcher.match(uri)) {
			«FOREACH entities AS entity-»
			case «entity.name.toUpperCase()»:
				qb.setCursorFactory(new «entity.name.toFirstUpper()»Cursor.Factory());
				qb.setTables(«entity.name.toFirstUpper()».Columns.TABLE_NAME);
				break;
			case «entity.name.toUpperCase()»_ID:
				qb.setCursorFactory(new «entity.name.toFirstUpper()»Cursor.Factory());
				qb.setTables(«entity.name.toFirstUpper()».Columns.TABLE_NAME);
				qb.appendWhere("_id=" + uri.getPathSegments().get(1));
				break;
			«ENDFOREACH-»
			default:
				return super.query(uri, where, order);
			}
			SQLiteDatabase db = getReadableDatabase();
			Cursor c = qb.query(db, null, where, null, null, null, order);
			c.setNotificationUri(getContext().getContentResolver(), uri);
			return c;
		}

		@Override
		public String queryId(Uri uri) {
			if (uri == null)
				return null;
			switch (sURIMatcher.match(uri)) {
			«FOREACH entities AS entity-»
			case «entity.name.toUpperCase()»_ID:
				return getEntityId(«entity.name.toFirstUpper()».Columns.TABLE_NAME, uri);
			«ENDFOREACH-»
			default:
				return super.queryId(uri);
			}
		}

		@Override
		public long queryRowId(Uri uri, String id) {
			switch (sURIMatcher.match(uri)) {
			«FOREACH entities AS entity-»
			case «entity.name.toUpperCase()»:
				return getEntityRowId(«entity.name.toFirstUpper()».Columns.TABLE_NAME, id);
			«ENDFOREACH-»
			default:
				return super.queryRowId(uri, id);
			}
		}
	}

}
«ENDFILE»
«ENDDEFINE»


«DEFINE getKey FOR FieldEntity-»
+ «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR this» + " text, "
«ENDDEFINE»

«DEFINE getKey FOR DatesField-»
+ «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR this» + " integer, "
«ENDDEFINE»

«DEFINE getKey FOR IntegerField-»
+ «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR this» + " integer, "
«ENDDEFINE»

«DEFINE getKey FOR FloatField-»
+ «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR this» + " float, "
«ENDDEFINE»

«DEFINE getKey FOR MainRelationFieldEntity-»
«IF (cardinality == 1)-»
+ «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR this» + " text, "
«ENDIF-»
«ENDDEFINE»

«DEFINE getKey FOR ReverseRelationFieldEntity-»
«IF (cardinality ==1 && getOppositeCardinality(this) != 1)-»
+ «EXPAND android::template::MedooAndroidFieldUtil::columnName FOR this» + " text, "
«ENDIF-»
«ENDDEFINE»



«DEFINE buildTableManyToMany FOR FieldEntity-»
«ENDDEFINE»

«DEFINE buildTableManyToMany FOR MainRelationFieldEntity-»
«IF (cardinality != 1 && getOppositeCardinality(this) != 1)-»
private static final String DATABASE_CREATE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()» = "create table if not exists " +
	«parentGroup.parentCard.name.toFirstUpper()».Columns.TABLE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()» + " ("
	+ BaseColumns._ID + " integer primary key autoincrement, "
	+ «parentGroup.parentCard.name.toFirstUpper()».Columns.TABLE_NAME + " text not null, "
	+ «entity.name.toFirstUpper()».Columns.TABLE_NAME + " text not null);";
«ENDIF-»
«ENDDEFINE»



«DEFINE buildSQLManyToMany FOR FieldEntity-»
«ENDDEFINE»

«DEFINE buildSQLManyToMany FOR MainRelationFieldEntity-»
«IF (cardinality != 1)-»
«IF ((oppositeRelationField != null && oppositeRelationField.cardinality != 1) || (oppositeRelationField == null && InverseCardinality != 1))-»
	db.execSQL(DATABASE_CREATE_«parentGroup.parentCard.name.toUpperCase()»_«name.toUpperCase()»);
«ENDIF-»
«ENDIF-»
«ENDDEFINE»



«DEFINE upgradeField FOR FieldEntity-»
try {
	db.compileStatement("select «name.toFirstLower()-» from «parentGroup.parentCard.name.toLowerCase()-» limit 1").close();
} catch (Exception e) {
	db.execSQL("alter table «parentGroup.parentCard.name.toLowerCase()-» add column «name.toFirstLower()-» text;");
}
«ENDDEFINE»

«DEFINE upgradeField FOR DatesField-»
try {
	db.compileStatement("select «name.toFirstLower()-» from «parentGroup.parentCard.name.toLowerCase()-» limit 1").close();
} catch (Exception e) {
	db.execSQL("alter table «parentGroup.parentCard.name.toLowerCase()-» add column «name.toFirstLower()-» integer;");
}
«ENDDEFINE»

«DEFINE upgradeField FOR IntegerField-»
try {
	db.compileStatement("select «name.toFirstLower()-» from «parentGroup.parentCard.name.toLowerCase()-» limit 1").close();
} catch (Exception e) {
	db.execSQL("alter table «parentGroup.parentCard.name.toLowerCase()-» add column «name.toFirstLower()-» integer;");
}
«ENDDEFINE»

«DEFINE upgradeField FOR FloatField-»
try {
	db.compileStatement("select «name.toFirstLower()-» from «parentGroup.parentCard.name.toLowerCase()-» limit 1").close();
} catch (Exception e) {
	db.execSQL("alter table «parentGroup.parentCard.name.toLowerCase()-» add column «name.toFirstLower()-» float;");
}
«ENDDEFINE»

«DEFINE upgradeField FOR RelationFieldEntity-»
«IF (cardinality == 1)-»
try {
	db.compileStatement("select «name.toFirstLower()-» from «parentGroup.parentCard.name.toLowerCase()-» limit 1").close();
} catch (Exception e) {
	db.execSQL("alter table «parentGroup.parentCard.name.toLowerCase()-» add column «name.toFirstLower()-» text;");
}
«ENDIF-»
«ENDDEFINE»
