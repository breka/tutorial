«IMPORT core»
«DEFINE generate(String packageName, String projectName) FOR Project»
«FILE projectName.toLowerCase()+"/server/security/ImogSecurityDetailService.java"»
package org.imogene.«projectName.toLowerCase()».server.security;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.imogene.web.gwt.common.entity.DefaultActor;
import org.imogene.web.gwt.common.entity.ImogActor;
import org.imogene.web.server.ServerConstants;
import org.imogene.web.server.dao.GenericDao;
import org.imogene.web.server.security.ImogUserDetails;
import org.springframework.dao.DataAccessException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

«FOREACH entities AS e -»
  «EXPAND importForActor(projectName) FOR e -»
«ENDFOREACH -»		
	

/**
 * Manages the application access through spring security
 * @author MEDES-IMPS
 */
public class ImogSecurityDetailService implements UserDetailsService {

	private Logger logger = Logger.getLogger(ImogSecurityDetailService.class);
	
	private GenericDao genericDao;
	«FOREACH entities AS e -»
		«EXPAND declareForDao FOR e -»
	«ENDFOREACH -»	
	
	@Override
	public UserDetails loadUserByUsername(String login)
			throws UsernameNotFoundException, DataAccessException {
		
		ImogActor current = null;

		logger.debug("Validating auhtentication for user: " + login);
		
		«FOREACH entities AS e»
			«EXPAND loginValidation FOR e-»
		«ENDFOREACH-»			
		
		/* Default User */
		current = validateForDefaultUser(login);		
		if (current != null)
			return setSessionUser(current);
		
		return null;
	}

	/**
	 * Sets the current user in session
	 * @param actor the current user
	 * @return
	 */
	private ImogUserDetails setSessionUser(ImogActor actor) {		
		session().setAttribute(ServerConstants.SESSION_USER, actor);		
		return new ImogUserDetails(actor);
	}
	
	/**
	 * Gets the current user session
	 * @return the current HttpSession
	 */
	private HttpSession session() {		
	    ServletRequestAttributes attr = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
	    HttpSession session = attr.getRequest().getSession(true);
	    logger.debug("Session id: " + session.getId());
	    return session;// true == allow create
	}	
	
	«EXPAND loginValidationMethod FOREACH this.entities-»
		
	/**
	 * Validates the login for the default actor
	 * @param login the entered login
	 * @return the DefaultActor
	 */
	private DefaultActor validateForDefaultUser(String login) {
		@SuppressWarnings("unchecked")
		List<DefaultActor> actors = (List<DefaultActor>) genericDao
				.listBeans(DefaultActor.class);
		if (actors.size() > 1) {
			for (ImogActor it : actors) {
				if (it.getLogin().equals(login))
					return (DefaultActor) it;
			}
		}
		if (actors.size() == 1) {
			if (actors.get(0).getLogin().equals(login))
				return actors.get(0);
		}
		return null;
	}

	/**
	 * Setter for bean injection
	 */
	public void setGenericDao(GenericDao genericDao) {
		this.genericDao = genericDao;
	}
	
	«FOREACH entities AS e -»
  		«EXPAND actorDao FOR e -»
	«ENDFOREACH -»	
}	
«ENDFILE»
«ENDDEFINE»



«REM» Imports for actor «ENDREM»
«DEFINE importForActor(String projectName) FOR CardEntity -»«ENDDEFINE»
«DEFINE importForActor(String projectName) FOR Actor -»
import org.imogene.«projectName.toLowerCase()».client.entity.«name.toFirstUpper()»;
import org.imogene.«projectName.toLowerCase()».server.dao.«name.toFirstUpper()»Dao;
«ENDDEFINE»

«REM» Declare actor dao «ENDREM»
«DEFINE declareForDao FOR CardEntity -»«ENDDEFINE»
«DEFINE declareForDao FOR Actor -»
private «name.toFirstUpper()»Dao «name.toFirstLower()»Dao;
«ENDDEFINE»

«REM» Set actor dao «ENDREM»
«DEFINE actorDao FOR CardEntity -»«ENDDEFINE»
«DEFINE actorDao FOR Actor -»
	/**
	 * Setter for bean injection
	 */
	public void set«name.toFirstUpper()»Dao(«name.toFirstUpper()»Dao «name.toFirstLower()»Dao) {
		this.«name.toFirstLower()»Dao = «name.toFirstLower()»Dao;
	}
«ENDDEFINE»

«REM» Login validation for actor «ENDREM»
«DEFINE loginValidation FOR CardEntity -»«ENDDEFINE»
«DEFINE loginValidation FOR Actor -»
		/* «name.toFirstUpper()» */
		current = validateFor«name.toFirstUpper()»(login);	
		if (current != null)
			return setSessionUser(current);	
«ENDDEFINE»

«REM» Login validation method for Actor«ENDREM»
«DEFINE loginValidationMethod FOR CardEntity»«ENDDEFINE»
«DEFINE loginValidationMethod FOR Actor»
	/**
	 * Validates the login for a «name.toFirstUpper()» actor
	 * @param login the entered login
	 * @return the «name.toFirstUpper()»Actor
	 */
	private «name.toFirstUpper()» validateFor«name.toFirstUpper()»(String login) {
		List<«name.toFirstUpper()»> actors = «name.toFirstLower()»Dao.get«name.toFirstUpper()»ActorFromLogin(login);
		if (actors.size() > 1)
			System.out.println("Can't process authentification, several users use the same login ! ");
		if (actors.size() == 1) {
			if (actors.get(0).getLogin().equals(login))
				return actors.get(0);
		}
		return null;
	}
«ENDDEFINE»
