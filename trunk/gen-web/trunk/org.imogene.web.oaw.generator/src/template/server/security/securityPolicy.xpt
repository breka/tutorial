«IMPORT core»
«EXTENSION template::CommonEntityUtilExt» 
«DEFINE generate(String projectName) FOR Project»
«FILE projectName.toLowerCase()+"/server/servlet/security/Imog" + projectName.toFirstUpper() + "Policy.java"»

package org.imogene.«projectName.toLowerCase()».server.servlet.security;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;

import org.imogene.web.gwt.common.entity.ImogActor;
import org.imogene.web.gwt.common.entity.ImogBean;
import org.imogene.web.gwt.common.entity.ImogRole;
import org.imogene.web.gwt.common.entity.LocalizedText;

import org.imogene.web.server.ImogSecurityPolicy;
import org.imogene.web.server.dao.GenericDao;
import org.imogene.web.server.dao.hibernate.LocalizedTextDao;

«FOREACH entities AS e-»
import org.imogene.«projectName.toLowerCase()».client.entity.«e.name.toFirstUpper()»;
«IF Actor.isAssignableFrom(e.metaType)-»
import org.imogene.«projectName.toLowerCase()».client.entity.«e.name.toFirstUpper()»Actor;
«ENDIF-»
«ENDFOREACH-»

/**
 * This class filters a persisted bean in order to send to the client a secured
 * bean that contains only the data that the user is allowed to read. 
 * @author MEDES-IMPS
 */
public class Imog«projectName.toFirstUpper()»Policy implements ImogSecurityPolicy {

	/* generic DAO access */
	private GenericDao dao;
	private LocalizedTextDao i18nDao;
	
	/* Generic dao setter */
	public Imog«projectName.toFirstUpper()»Policy(GenericDao dao, LocalizedTextDao i18nDao){
		this.dao = dao;
		this.i18nDao = i18nDao;
	}
	

	public ImogBean toHibernate(ImogBean bean, ImogActor actor) {		
		«FOREACH entities AS e-»
			«EXPAND dispatchUnsecure FOR e-»		
		«ENDFOREACH-»		
		return null;
	}

	public List<?> toHibernate(List<?> beans, ImogActor actor) {
		
		List<ImogBean> unsecuredList = new Vector<ImogBean>();	
		for (Iterator<?> it = beans.iterator(); it.hasNext();) {
			unsecuredList.add(toHibernate((ImogBean)it.next(), actor));
		}			
		return unsecuredList;
	}
	
	public ImogBean toSecure(ImogBean bean, ImogActor actor) {
		«FOREACH entities AS e-»
			«EXPAND dispatchSecure FOR e-»
		«ENDFOREACH-»		
		return null;
	}
	
	public List<?> toSecure(List<?> beans, ImogActor actor) {
		
		List<ImogBean> securedList = new Vector<ImogBean>();	
		for (Iterator<?> it = beans.iterator(); it.hasNext();) {
			securedList.add(toSecure((ImogBean)it.next(), actor));
		}		
		return securedList;
	}

	«FOREACH entities AS e-»	
		
		«EXPAND toSecure FOR e-»
		
		«EXPAND toUnSecure FOR e-»

	«ENDFOREACH-»
	
	«FOREACH entities AS e-»	
		«IF isTranslatableFieldPresent(e.groups.fields)-»
	/**
	 * Adds the Localized texts to a «e.name.toFirstUpper()-» entity
	 * @param value the «e.name.toFirstUpper()-» entity
	 * @param roleNames set of role ids for the user 
	 * @return «e.name.toFirstUpper()-» entity with the Localized texts added
	 */
	private «e.name.toFirstUpper()-» getLocalized«e.name.toFirstUpper()-»(«e.name.toFirstUpper()-» value, Set<String> roleNames) {
		«e.name.toFirstUpper()-» entity = value;
		if (entity!=null) {
			«FOREACH e.groups AS g-»
				«IF isTranslatableFieldPresent(g.fields)-»			
					«IF g.readers.size == 0-»
						«FOREACH g.fields AS f-»
							«EXPAND addLocalizedTexts FOREACH g.fields-»
						«ENDFOREACH-»			
					«ELSE-»
						if(«FOREACH g.readers AS r ITERATOR i» roleNames.contains("«r.name»") «IF !i.lastIteration»||«ENDIF»«ENDFOREACH»«IF g.writers.size>0»||«ENDIF»«FOREACH g.writers AS w ITERATOR i» roleNames.contains("«w.name»") «IF !i.lastIteration»||«ENDIF»«ENDFOREACH» || roleNames.contains("administrator")){
							«EXPAND addLocalizedTexts FOREACH g.fields-»
						}
					«ENDIF-»				
				«ENDIF-»
			«ENDFOREACH-»
		}		
		return entity;		
	}	
		«ENDIF-»
	«ENDFOREACH-»
	
	/**
	 * Gets the Localized texts for a given field
	 * @param fieldId the field id for which LocalizedTexts are searched
	 * @return a list of LocalizedTexts
	 */
	private List<LocalizedText> getLocalizedTexts(String fieldId) {
		return i18nDao.listLocalizedText(fieldId);	
	}
		
	
	/*
	@SuppressWarnings("unchecked")
	private void updateCollection(Set from, Set to) {
		to.clear();
		for (Iterator it = from.iterator(); it.hasNext();) {
			to.add(it.next());
		}
		//  Be carful, very strange Hibernate behaviour,
		//  if accept to persits a collection cleared and populate,
		//  but don't want to persist a collection cleared and let empty.
		//  SO we create a new HashSet.
		 
		if (from.size() == 0) {
			to = new HashSet();
		}
	}
	*/
	

	private Set<String> getRoleNames(ImogActor actor){
		Set<String> names = new HashSet<String>();
		if(actor!=null){
			for(ImogRole role: actor.getRoles()){
				names.add(role.getId());			
			}
		}
		return names;
	}
}
«ENDFILE»
«ENDDEFINE»

«REM» CardEntity dispatcher to secure «ENDREM»
«DEFINE dispatchSecure FOR CardEntity-»
	«IF Actor.isAssignableFrom(this.metaType)-»
		if(bean instanceof «name.toFirstUpper()»Actor)
				return toSecure«name.toFirstUpper()»Actor((«name.toFirstUpper()»Actor)bean, getRoleNames(actor));
	«ENDIF-»
	«REM»«ELSE»«ENDREM»
	if(bean instanceof «name.toFirstUpper()»)
			return toSecure«name.toFirstUpper()»((«name.toFirstUpper()»)bean, getRoleNames(actor));
	«REM»«ENDIF»«ENDREM»
«ENDDEFINE»	

«REM» CarEntity dispatcher to unsecure «ENDREM»
«DEFINE dispatchUnsecure FOR CardEntity-»
	«IF Actor.isAssignableFrom(this.metaType)-»
	if(bean instanceof «name.toFirstUpper()»Actor)
			return toUnsecure«name.toFirstUpper()»Actor((«name.toFirstUpper()»Actor)bean, getRoleNames(actor));	
	«ENDIF-»		
	«REM»«ELSE»	«ENDREM»		
	if(bean instanceof «name.toFirstUpper()»)
			return toUnsecure«name.toFirstUpper()»((«name.toFirstUpper()»)bean, getRoleNames(actor));
	«REM»«ENDIF»«ENDREM»
«ENDDEFINE»
			
«REM» Setter to affect the values to the new bean «ENDREM»
«DEFINE setField(boolean toSecure) FOR FieldEntity-»
	transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
«ENDDEFINE»

«DEFINE setField(boolean toSecure) FOR TextField-»
	transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
	«IF this.translatable-»
		«IF !toSecure-»
	transformedBean.getLocalizedFieldMap().addI18nValues(bean.getLocalizedFieldMap().getFieldI18nValues(bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»()));
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE setField(boolean toSecure) FOR RelationFieldEntity-»
	«IF this.cardinality>1||this.cardinality==-1»
		«IF isTranslatableFieldPresent(this.entity.groups.fields)-»
		Set<«this.entity.name.toFirstUpper()-»> «EXPAND template::CommonFieldUtil::propertyName FOR this-» = bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»();
		for («this.entity.name.toFirstUpper()-» card: «EXPAND template::CommonFieldUtil::propertyName FOR this-»)
			card = getLocalized«this.entity.name.toFirstUpper()»(card,roleNames);	
		transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(«EXPAND template::CommonFieldUtil::propertyName FOR this-»);
		«ELSE-»
		//updateCollection(bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»(), transformedBean.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
		transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
		«ENDIF-»	
	«ELSE-»
	if(transformedBean.«EXPAND template::CommonFieldUtil::getterName FOR this-»()==null ||
		bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»() == null ||
		!transformedBean.«EXPAND template::CommonFieldUtil::getterName FOR this-»().getId().equals(bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»().getId())){
		«IF isTranslatableFieldPresent(this.entity.groups.fields)-»
		transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(getLocalized«this.entity.name.toFirstUpper()»(bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»(),roleNames));
		«ELSE-»
		transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(bean.«EXPAND template::CommonFieldUtil::getterName FOR this-»());
		«ENDIF-»
	}
	«ENDIF-»
«ENDDEFINE»

«REM» Set empty field to securise a bean «ENDREM»
«DEFINE setEmptyField FOR FieldEntity-»
	transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(null);
«ENDDEFINE»

«DEFINE setEmptyField FOR RelationFieldEntity-»
	«IF this.cardinality>1 || this.cardinality==-1-»
		transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(new HashSet<«entity.name.toFirstUpper()»>());
	«ELSE-»
		transformedBean.«EXPAND template::CommonFieldUtil::setterName FOR this-»(null);
	«ENDIF-»
«ENDDEFINE»

«REM» hand  administrativ field «ENDREM»
«DEFINE handleAdminField(boolean toSecure) FOR CardEntity-»«ENDDEFINE»
«DEFINE handleAdminField(boolean toSecure) FOR Actor-»
		«FOREACH (List[FieldEntity])getAdministrationFields(this) AS f-»
			«EXPAND setField(toSecure) FOR f-»
		«ENDFOREACH-»
«ENDDEFINE»

«REM» handle filter field «ENDREM»
«DEFINE handleFilterField(boolean toSecure) FOR CardEntity-»«ENDDEFINE»
«DEFINE handleFilterField(boolean toSecure) FOR Actor-»
	«FOREACH this.filters AS f-»
		«EXPAND setField(toSecure) FOR f-»
	«ENDFOREACH-»
«ENDDEFINE»


«REM» ---------------------------------------------------------- «ENDREM»
«DEFINE toSecure FOR CardEntity»

	/**
	 * Secured an «this.name.toFirstUpper()» bean.
	 * 
	 * @param «this.name.toFirstLower()» The «this.name.toFirstUpper()» bean to secure
	 * @param roleNames set of role ids for the user 
	 * @return A secured «this.name.toFirstUpper()» bean
	 */	 
	private ImogBean toSecure«this.name.toFirstUpper()»(«this.name.toFirstUpper()» bean, Set<String> roleNames){
		
		«this.name.toFirstUpper()» transformedBean = new «this.name.toFirstUpper()»();
		
		«EXPAND toSecureCommon FOR this-»

		return transformedBean;
	}
	
	«REM» Generate additional Actor method if Actor «ENDREM»
	«IF Actor.isAssignableFrom(this.metaType)-»
	
	/**
	 * Secured an «this.name.toFirstUpper()» bean.
	 * 
	 * @param «this.name.toFirstLower()» The «this.name.toFirstUpper()» bean to secure
	 * @param roleNames set of role ids for the user 
	 * @return A secured «this.name.toFirstUpper()» bean
	 */	 

	private ImogBean toSecure«this.name.toFirstUpper()»Actor(«this.name.toFirstUpper()»Actor bean, Set<String> roleNames){

		«this.name.toFirstUpper()»Actor transformedBean = new «this.name.toFirstUpper()»Actor();

		«EXPAND toSecureCommon FOR this-»
		
		/*
		if(roleNames.contains("administrator")){
			transformedBean.setLogin(bean.getLogin());
			transformedBean.setPassword(bean.getPassword());
			transformedBean.setNotificationLocale(bean.getNotificationLocale());
			transformedBean.setNotificationMethod(bean.getNotificationMethod());
			transformedBean.setBeNotified(bean.getBeNotified());			
			updateCollection(bean.getRoles(), transformedBean.getRoles());
			«EXPAND handleAdminField(true) FOR this-»
			«EXPAND handleFilterField(true) FOR this-»
		}*/
		
		return transformedBean;
	}	
	«ENDIF-»	

«ENDDEFINE»

«REM» Common code between CardEntity and Actor for toSecure expand «ENDREM»
«DEFINE toSecureCommon FOR CardEntity-»
		/* unsecured data */		
		transformedBean.setId(bean.getId());
		transformedBean.setCreator(bean.getCreator());
		transformedBean.setCreationDate(bean.getCreationDate());
		transformedBean.setModifier(bean.getModifier());
		transformedBean.setModifiedFrom(bean.getModifiedFrom());
		transformedBean.setLastModificationDate(bean.getLastModificationDate());
		transformedBean.setUploadDate(bean.getUploadDate());
		
		«FOREACH this.groups AS g»
			«IF g.readers.size == 0-»
				«FOREACH g.fields AS f-»
					«EXPAND setField(true) FOR f -»
				«ENDFOREACH-»			
			«ELSE-»
				if(«FOREACH g.readers AS r ITERATOR i» roleNames.contains("«r.name»") «IF !i.lastIteration»||«ENDIF»«ENDFOREACH»«IF g.writers.size>0»||«ENDIF»«FOREACH g.writers AS w ITERATOR i» roleNames.contains("«w.name»") «IF !i.lastIteration»||«ENDIF»«ENDFOREACH» || roleNames.contains("administrator")){
					«FOREACH g.fields AS f-»
						«EXPAND setField(true) FOR f -»
					«ENDFOREACH-»
				}
				else{
				«FOREACH g.fields AS f-»
						«EXPAND setEmptyField FOR f -»
				«ENDFOREACH-»
				}
			«ENDIF-»
		«ENDFOREACH»
		
		«IF isTranslatableFieldPresent(this.groups.fields)-»
		transformedBean = getLocalized«this.name.toFirstUpper()»(transformedBean, roleNames);
		«ENDIF»
«ENDDEFINE»
«REM» ---------------------------------------------------------- «ENDREM»


«REM» ---------------------------------------------------------- «ENDREM»
«DEFINE toUnSecure FOR CardEntity-»

	private ImogBean toUnsecure«this.name.toFirstUpper()»(«this.name.toFirstUpper()» bean, Set<String> roleNames){	
		«this.name.toFirstUpper()» transformedBean = («this.name.toFirstUpper()»)dao.loadEntity(«this.name.toFirstUpper()».class, bean.getId());

		if(transformedBean == null){
		
			transformedBean = new «this.name.toFirstUpper()»();			
			transformedBean.setId(bean.getId());
		}

		«EXPAND toUnSecureCommon FOR this»
		
		return transformedBean;
	}
	
	«REM» Generate additional Actor method if Actor «ENDREM»
	«IF Actor.isAssignableFrom(this.metaType)»
	private ImogBean toUnsecure«this.name.toFirstUpper()»Actor(«this.name.toFirstUpper()»Actor bean, Set<String> roleNames){	
		«this.name.toFirstUpper()»Actor transformedBean = («this.name.toFirstUpper()»Actor)dao.loadEntity(«this.name.toFirstUpper()»Actor.class, bean.getId());
		
		if(transformedBean == null){

			transformedBean = new «this.name.toFirstUpper()»Actor();				
			transformedBean.setId(bean.getId());
			
		}

		«EXPAND toUnSecureCommon FOR this-»
		
		«IF Actor.isAssignableFrom(this.metaType)-»
		/*
			if (roleNames.contains("administrator")) {
				transformedBean.setLogin(bean.getLogin());
				transformedBean.setPassword(bean.getPassword());
				transformedBean.setNotificationLocale(bean.getNotificationLocale());
				transformedBean.setNotificationMethod(bean.getNotificationMethod());
				transformedBean.setBeNotified(bean.getBeNotified());
				updateCollection(bean.getRoles(), transformedBean.getRoles());
				«EXPAND handleAdminField(false) FOR this-»	
				«EXPAND handleFilterField(false) FOR this-»			
			}
		*/
		«ENDIF-»
		return transformedBean;
	}
	«ENDIF-»

«ENDDEFINE»

«REM» Common code between CardEntity and Actor for toUnSecure expand «ENDREM»
«DEFINE toUnSecureCommon FOR CardEntity-»

		transformedBean.setCreator(bean.getCreator());
		transformedBean.setCreationDate(bean.getCreationDate());
		transformedBean.setModifier(bean.getModifier());
		transformedBean.setModifiedFrom(bean.getModifiedFrom());
		transformedBean.setLastModificationDate(bean.getLastModificationDate());
		transformedBean.setUploadDate(bean.getUploadDate());							
		
		«FOREACH this.groups AS g»
			«IF g.writers.size == 0»
				«IF g.readers.size>0»					
					if(«FOREACH g.readers AS r ITERATOR i» roleNames.contains("«r.name»") «IF !i.lastIteration»||«ENDIF»«ENDFOREACH» || roleNames.contains("administrator")){					
					«FOREACH g.fields AS f-»
						«EXPAND setField(false) FOR f-»
					«ENDFOREACH-»
				}
				«ELSE»
					«FOREACH g.fields AS f-»
						«EXPAND setField(false) FOR f -»
					«ENDFOREACH-»
				«ENDIF»									
			«ELSE»
				if(«FOREACH g.writers AS r ITERATOR i» roleNames.contains("«r.name»") «IF !i.lastIteration»||«ENDIF»«ENDFOREACH» || roleNames.contains("administrator")){
					«FOREACH g.fields AS f-»
						«EXPAND setField(false) FOR f-»
					«ENDFOREACH-»
				}				
			«ENDIF»
		«ENDFOREACH»
		
«ENDDEFINE»
«REM» ---------------------------------------------------------- «ENDREM»

«REM» Add LocalizedTexts to translatable entity «ENDREM»
«DEFINE addLocalizedTexts FOR FieldEntity-»«ENDDEFINE»
«DEFINE addLocalizedTexts FOR TextField-»
	«IF this.translatable-»
			entity.getLocalizedFieldMap().addI18nValues(getLocalizedTexts(entity.«EXPAND template::CommonFieldUtil::getterName FOR this-»()));
	«ENDIF-»
«ENDDEFINE»
«REM» ---------------------------------------------------------- «ENDREM»