#summary How to install imogene
#labels Eclipse,Java,Tomcat,GWT,Android

<wiki:toc max_depth="3" />

----

= Prerequisite =

Only install *imogene* from the sources if you want to inspect the code or adapt it for your own use.
	* If you are not familiar with the Eclipse development environment.
	* If you are not a developer.
	* If you don't know what *imogene* is.
	* If you don't know why you are here.
Then you should not go further.

...

You stayed ! We now assume that you are a developer familiar with Eclipse.

To prepare your development environment follow the HowToInstall guide but DON'T follow the last step (don't install the *imogene* plugin from the update site).

If you don't have Subclipse installed install it from this update site `http://subclipse.tigris.org/update_1.8.x`. Check that you are getting the most recent update from the [http://subclipse.tigris.org/ Subclipse web page].

From the *SVN Repository Exploring* perspective add the *imogene* source code repository location `http://imogene.googlecode.com/svn/trunk/`.

Open the hierarchy in the *imogene* SVN repository and checkout all the `org.imogene` projects into your workbench.

Note: The project `org.imogene.tools.androidhelper` is not in use anymore.

----

= Code Overview =

The packages called `org.imogene.<name>.contrib` contain the source code of the plugin extension for the given generator.

The packages called `org.imogene.<name>.oaw.generator` contain the source code of the generator for the given application.

The packages called `org.imogene.<name>.template` contains the base source code of the future generated application (the administration application doesn't have one because it is using the one from the web application). This code is common for all target generated applications.

The `dev-libs` remote folder contains source code of some libraries used by the *imogene* applications.
{{{
org.imogene.lib.encryption 
org.imogene.lib.gwt.widgets 
org.imogene.lib.synchro.client 
org.imogene.lib.synchro.common 
org.imogene.lib.synchro.server
}}} 

The `dev-tools` remote folder contains Eclipse plugins that have to be installed to develop the *imogene* generators.
{{{
org.imogene.tools.encrypter 
org.imogene.tools.libraryhelper
}}} 

The `gen-common` remote folder contains methods for generation that are common with at least 2 generators.
{{{
org.imogene.oaw.generator.common
}}}

The `gen-admin` remote folder contains the generator for the Administration application.
{{{
org.imogene.admin.contrib 
org.imogene.admin.oaw.generator 
}}}

The `gen-droid` remote folder contains the generator for the Android application.
{{{
org.imogene.android.contrib 
org.imogene.android.oaw.generator 
org.imogene.android.template 
}}}

The `gen-init` remote folder contains the generator for the Initialiser application.
{{{
org.imogene.initializer.contrib 
org.imogene.initializer.oaw.generator 
org.imogene.initializer.template 
}}}

The `gen-model` remote folder contains plugin source code to initialise a new Imogene project in a launched studio.
{{{
org.imogene.model.contrib 
org.imogene.model.template 
}}}

The `gen-notif` remote folder contains the generator for the Notification application.
{{{
org.imogene.notifier.contrib 
org.imogene.notifier.oaw.generator 
org.imogene.notifier.template 
}}}

The `gen-rcp` remote folder contains the generator for the Desktop RCP application.
{{{
org.imogene.rcp.contrib 
org.imogene.rcp.core 
org.imogene.rcp.oaw.generator 
org.imogene.rcp.template 
}}}

The `gen-sync` remote folder contains the generator for the Synchronisation server application.
{{{ 
org.imogene.synchro.contrib 
org.imogene.synchro.oaw.generator 
org.imogene.synchro.template 
}}}

The `gen-web` remote folder contains the generator for the Web application.
{{{
org.imogene.web.contrib 
org.imogene.web.oaw.generator 
org.imogene.web.template 
}}}

The `gen-ws` remote folder contains the generator for the Restful Web services application.
{{{
org.imogene.webservice.contrib 
org.imogene.webservice.oaw.generator 
org.imogene.webservice.template 
}}}

The `library` remote folder contains libraries shared by the templates of the generators.
{{{
org.imogene.library 
org.imogene.library.contrib 
}}}

The `model` remote folder contains the model definition source code. Defines the elements of the model, the specific source code for editing the model and the validation rules.
{{{
org.imogene.model.core 
org.imogene.model.core.editor 
org.imogene.model.validation 
}}}

The `studio` remote folder contains the *imogene* plugin source code that is launched in a new eclipse.
{{{
org.imogene.studio.contrib
}}}

----

= Homemade Plugins for Development =

The *imogene* studio needs some plugins to be installed to ease the development. These plugins can be found in the `dev-tools` folder.

Follow these steps to install the 'org.imogene.tools.libraryhelper' plugin in your environment.
	# From the *Java perspective* right-click on the 'org.imogene.tools.libraryhelper' project.
	# Select *Export...*.
	# Under *Plug-in Development* select *Deployable plug-ins and fragments*.
	# Select the checkbox next to *Install into host* (The repository will automatcally be selected).
	# Then click *Finish* and follow the instructions.
	
----
	
= Run Imogene From Source Code =

Follow these steps to run *imogene* from the source code.
	# From within Eclipse, select *Run > Run Configurations...*.
	# Double-click *Eclipse Application*.
	# Enter *Imogene Studio* for the _Name_.
	# Under the *Plug-ins* tabulation make sure the *Launch with* option is configured with *all workspace and enabled target plug-ins*.
	# Then click *Run*.
	
Done ! *imogene* is now running from the source code.

----

= Tips =

* Each time you modify a `java` file outside the templates you have to rerun the *Imogene Studio*. This is not necessary if you modified an `Xpand` file or any files from the templates.

* The templates are compressed into `zip` files and placed into the contribution `(org.imogene.<generator>.contrib)` plug-ins. Follow these steps to update a template once you have made a modification:
	# Right-click on the `build.xml` file in the corresponding `contrib` project of the template you just modified.
	# Select *Run As > Ant build...*.
	# Under the *JRE* tabulation, select the checkbox near to *Run in the same JRE as the workspace*.<br />Note: These steps have to be made for each contribution plug-ins at least once. Then you can just select *Run As > Ant build* this will run over the configuration page of step 3.